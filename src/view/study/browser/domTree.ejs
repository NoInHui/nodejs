<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// DOM 트리

// HTML 을 지탱하는것은 태그(tag) 입니다.
// 문서 객체 모델(DOM)에 따르면, 모든 HTML 태그는 객체입니다.
// 태그 하나가 감싸고 있는 '자식' 태그는 중첩 태그(nested tag) 라고 부릅니다.
// 태그 내의 문자(text) 역시 객체입니다.

// 이런 모든 객체는 자바스크립트를 통해 접근할 수 있고, 페이지를 조작할 때 이 객체를 사용합니다.
// document.body 는 <body> 태그를 객체로 나타낸 것이죠.

document.body.style.background = 'red';
setTimeout(() => document.body.style.background = '', 1000);

// 위 예시에선 document.body 의 배경색을 바꾸기 위해 style.background 을 사용했는데, 이 외에도 다양한 프로퍼티가 존재합니다.

// innerHTML - 해당 노드의 HTML 콘텐츠
// offsetWidth - 해당 노드의 너비(픽셀)
// 기타 등등 


// 간단한 문서를 이용해 DOM 구조에 대해 알아봅시다.

/**

<!DOCTYPE HTML>
<html>
<head>
  <title>사슴에 관하여</title>
</head>
<body>
  사슴에 관한 진실.
</body>
</html>

*/


// 트리에 있는 노드는 모두 객체 입니다.
// 태그는 요소 노드(element node)이고 트리 구조를 구성합니다.
// <html> 은 루트 노드가 되고, <head> 와 <body> 는 루트 노드의 자식이 됩니다.

// 요소 내의 문자는 텍스트 노드가 됩니다.
// 텍스트 노드는 문자열만 담습니다. 자식 노드를 가질 수 없고, 트리의 끝에서 잎 노드(leaf node)가 됩니다.

// 텍스트 노드 생성엔 두 가지 예외가 있습니다.
// 1. 역사적인 이유로, <head> 이전의 공백과 새 줄은 무시됩니다.
// 2. HTML 명세서에서 모든 컨텐츠는 body 안쪽에 있어야 한다고 했으므로, </body> 뒤에 무언가를 넣더라도 그 콘텐츠는 자동으로 body 안쪽으로 옮겨집니다.
// 따라서 </body> 뒤엔 공백이 있을 수 없습니다.

// 두 예외를 제외하곤 아주 간단합니다.
// 문서 내 공백이 있다면 다른 문자와 마찬가지로 텍스트 노드가 됩니다.
// 그리고 공백을 지우면 텍스트 노드도 사라집니다.

// 공백이 없는 텍스트 노드만으로 HTML 문서를 구성하려면 HTML 을 아래와 같이 만들어야 합니다.

/**

<!DOCTYPE HTML>
<html><head><title>사슴에 관하여</title></head><body>사슴에 관한 진실.</body></html>

*/

// 문자열 양 끝 공백과 공백만 있는 텍스트 노드는 개발자 도구에서 보이지 않습니다.



// 자동 교정
// 기형적인 HTML 을 만나면 브라우저는 DOM 생성과정에서 HTML 을 자동으로 교정합니다.
// 예를 들어 가장 최상위 태그는 항상 <html> 이어야 하는데 문서에 <html> 태그가 없는 경우, 문서 최 상위에 이를 자동으로 넣어주죠.
// 따라서 DOM 은 <html> 에 대응하는 노드가 항상 있습니다.
// <body> 도 같은 방식으로 적용됩니다.

// 만약 HTML 파일 안에 '안녕하세요.' 라는 문장 하나만 저장된 상황이라면, 브라우저가 자동으로 이 문장을 <html> 과 <body> 로 감싸줍니다.
// 그리고 <head> 도 더해줍니다.

// DOM 생성과정에서 브라우저는 문서에 있는 에러 등, 닫는 태그가 없는 에러 등을 자동으로 처리합니다.

/**

<p>hello
<li>test1
<li>test2

*/

// 이렇게 태그 짝이 안 맞아도 브라우저는 태그를 읽고, 자동으로 빠진 부분을 채워 넣어 줍니다.


// 테이블은 언제나 <tbody> 가 있습니다.
// 테이블은 조금 흥미롭습니다.
// DOM 명세서에선 테이블에 반드시 <tbody> 가 있어야 한다고 못 박아 놓았지만, HTML 에선 <tbody> 를 생략하곤 합니다.
// 이때, 브라우저는 자동으로 DOM 에 <tbody> 를 만들어줍니다.


// 기타 노드 타입
// 요소와 텍스트 노드 외에도 다양한 노트 타입이 있습니다.

// 주석도 노드가 됩니다.
// 주석은 화면 출력물에 영향을 주지 않는데, 왜 DOM 에는 추가되는지 의아해할 수도 있습니다.
// HTML 에 뭔가 있따면 반드시 DOM 트리에 추가되어야 한다는 규칙 떄문에 DOM 에 추가된 것입니다.

// HTML 안의 모든 것은 DOM 을 구성합니다.

// HTML 문서 최상단에 위치하는 <!DOCTYPE...> 지시자 또한 DOM 노드가 됩니다.
// 이 노드는 DOM 트리의 <html> 바로 위에 위치합니다.
// 본 튜토리얼에선 이 노드를 다루지 않을 예정이라 다이어그램에도 표시는 하지 않을 것입니다.
// 하지만 존재하는 노드입니다.

// 문서 전체를 나타내는 document 객체 또한 DOM 노드입니다.

// 노드 타입은 총 12가지 인데, 실무에선 주로 다음 4가지 노드를 다룹니다.

// 1. DOM 의 진입점이 되는 문서(document) 노드
// 2. HTML 태그에서 만들어지며, DOM 트리를 구성하는 블록인 요소 노드(element node)
// 3. 텍스트를 포함하는 텍스트 노드(text node)
// 4. 화면에 보이지는 않지만, 정보를 기록하고 자바스크립트를 사용해 이 정보를 DOM 으로부터 읽을 수 있는 주석(comment) 노드





</script>