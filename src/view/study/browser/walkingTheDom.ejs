<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>

    <table id="table" style="display: none;">
        <thead>
            <tr>
                <th>
                    1
                </th>
                <th>
                    2
                </th>
            </tr>
        </thead>
        <tr>
          <td>일</td><td>이</td>
        </tr>
        <tr>
          <td>삼</td><td>사</td>
        </tr>
      </table>
</body>
</html>

<script>

// DOM 탐색하기

// DOM을 이용하면 요소와 요소의 콘텐츠에 무엇이든 할 수 있습니다.
// 하지만 무언가를 하기 전엔 당연히 조작하고자 하는 DOM 객체에 접근하는 것이 선행되어야 합니다.

// DOM 에 수행하는 모든 연산은 document 객체에서 시작합니다.
// document 객체는 DOM 에 접근하기 위한 진입점 이죠.


// 트리 상단의 documentElement 와 body

// DOM 트리 상단의 노드들은 document 가 제공하는 프로퍼티를 사용해 접근할 수 있습니다.

// <html> = document.documentElement
// document 를 제외하고 DOM 트리 꼭대기에 있는 문서 노드는 <html> 태그에 해당하는 document.documentElement 입니다.

// <body> = document.body
// document.body 는 <body> 요소에 해당하는 DOM 노드로, 자주 쓰이는 노드 중 하나입니다.

// <head> = document.head
// <head> 태그는 document.head 로 접근할 수 있습니다.



// document.body 가 null 일 수도 있으니 주의하세요.

// 스크립트를 읽는 도중에 존재하지 않는 요소는 스크립트에서 접근할 수 없습니다.
// 브라우저가 아직 document.body 를 읽지 않았기 때문에 <head> 안에 있는 스크립트에선 document.body 에 접근하지 못하죠.

// DOM 의 나라에서 null 은 '존재하지 않음'을 의미합니다.
// DOM 에서 null 값은 '존재하지 않음' 이나 '해당하는 노드가 없음' 을 의미합니다.

// childNodes, firstChild, lastChild 로 자식 노드 탐색하기

// 앞으로 사용할 두 가지 용어를 먼저 정의하고 설명을 이어나가도록 하겠습니다.

// 자식 노드(child node, children) 는 바로 아래의 자식 요소를 나타냅니다.
// 자식 노드는 부모 노드의 바로 아래에서 중첩 관계를 만듭니다.

// 후손 노드(descendants) 는 중첩 관계에 있는 모든 요소를 의미합니다.
// 자식 노드, 자식 노드의 모든 자신 노드등이 후손 노드가 됩니다.


// childNodes 컬렉션은 텍스트 노드를 포함한 모든 자식 노드를 담고 있습니다.

console.log(document.body.childNodes);

// firstChild 와 lastChild 프로퍼티를 이용하면 첫 번쨰, 마지막 자식 노드에 빠르게 접근할 수 있습니다.

console.log(document.body.childNodes[0] === document.body.firstChild);
console.log(document.body.childNodes[document.body.childNodes.length-1] === document.body.lastChild);

// 자식 노드의 존재 여부를 검사할 땐 함수 ele.hasChildNodes() 를 사용할 수도 있습니다.


// DOM 컬렉션

// 위에서 살펴본 childNodes 는 마치 배열 같아 보입니다.
// 하지만 childNodes 는 배열이 아닌 반복 가능한(iterable) 유사 배열 객체인 컬렉션(collection) 입니다.

// childNodes 는 컬렉션이기 때문에 아래와 같은 특징을 가집니다.

// 1. for..of 를 사용할 수 있습니다.
for(let node of document.body.childNodes) {
    console.log(node);
}
// 이터러블이기 때문에 Symbol.iterator 프로퍼티가 구현되어 있어서 for..of 를 사용하는 것이 가능하죠.

// 2. 배열이 아니기 때문에 배열 메서드를 쓸 수 없습니다.
try {
    document.body.childNodes.map(v => console.log(v));
} catch(e) {
    console.log(e);
}

// 첫번째 특징은 장점으로 작용합니다.
// 두번째 특징은 썩 좋지는 않지만 Array.from 을 사용하면 진짜 배열을 만들 수 있기 때문에 참을 만합니다.
// 컬렉션에 배열 메서드를 사용하고 싶다면 Array.from 을 적용합시다.

Array.from(document.body.childNodes).map(v=> console.log(v));


// DOM 컬렉션은 읽는 것만 가능합니다.

// DOM 컬렉션을 비롯해 이번 챕터에서 설명하는 모든 탐색용 프로퍼티는 읽기 전용입니다.
// chilNodes[i] = ... 를 이용해 자식 노드를 교체하는게 불가능하죠.
// DOM 을 변경하려면 다른 메서드가 필요합니다.
// 다음 챕터에서 이 메서드에 대해 살펴보겠습니다.


// DOM 컬렉션은 살아있습니다.

// 몆몆 예외사항을 제외하고 거의 모든 DOM 컬렉션은 살아있습니다.
// DOM 의 현재 상태를 반영한다는 말이죠.
// ele.childNodes 를 참조하고 있는 도중에 DOM 에 새로운 노드가 추가되거나 삭제되면, 변경사항이 컬렉션에도 자동으로 반영됩니다.


// 컬렉션에 for..in 반복문을 사용하지 마세요.

// 컬렉션은 for..of 를 이용해 순회할 수 있습니다.
// 그런데 가끔 for..in 을 사용하려는 사람들이 있죠.
// for..in 은 절대 사용하지 마세요.
// for..in 반복문은 객체의 모든 열거 가능한 프로퍼티를 순회합니다.
// 컬렉션엔 거의 사용되지 않는 '추가' 프로퍼티가 있는데, 이 프로퍼티까지 순회 대상에 포함하길 원하지 않으실 거니까요.
for(let prop in document.body.childNodes) {
    console.log(prop);
}


// 형제와 부모 노드

// 같은 부모를 가진 노드는 형제(sibiling) 노드 라고 부릅니다.
// <head> 와 <body> 는 대표적인 형제 노드 입니다.

// 다음 형제 노드에 대한 정보는 nextSibling, 이전 형제 노드에 대한 정보는 previousSibling 프로퍼티에서 찾을 수 있습니다.
// 부모 노드에 대한 정보는 parentNode 프로퍼티를 이용해 참조할 수 있습니다.


console.log(Object.getPrototypeOf(document.body.parentNode));
console.log(document.body.parentNode);
console.log(document.body.nextSibling);
console.log(document.body.previousSibling);


// 요소 간 이동

// 지금까지 언급한 탐색 관련 프로퍼티는 모든 종류의 노드를 참조합니다.
// childNodes 를 이용하면 텍스트 노드, 요소 노드, 심지어 주석 노드까지 참조할 수 있죠.

// 하지만 실무에서 텍스트 노드나 주석 노드는 잘 다루지 않습니다.
// 웹 페이지를 구성하는 태그의 분신인 요소 노드를 조작하는 작업이 대다수죠.

// children 프로퍼티는 해당 요소의 자식 노드 중 요소 노드만을 가리킵니다.
console.log(document.body.children);

// firstElementChild 와 lastElementChild 프로퍼티는 각각 첫 번째 자식 요소 노드와 마지막 자식 요소 노드를 가리킵니다.
console.log(document.body.firstElementChild);
console.log(document.body.lastElementChild);

// previousElementSibling 와 nextElementSibling 은 형제 요소 노드를 가리킵니다.
console.log(document.body.previousElementSibling);
console.log(document.body.nextElementSibling);

// parentElement 는 부모 요소 노드를 가리킵니다.
console.log(document.body.parentElement);


// 부모가 요소가 아니라면 parentElement 는 어떻게 되나요?

// parentElement 프로퍼티는 부모 요소 노드를 반환하는 반면 parentNode 프로퍼티는 종류에 상관없이 부모 노드를 반환합니다.
// 대개 두 프로퍼티는 같은 노드를 반환합니다.

// 그런데 document.documentElement 아래와 같은 상황에서는 다른 노드를 반환합니다.

console.log(document.documentElement.parentNode); // document
console.log(document.documentElement.parentElement); // null

// 반환 값이 다른 이유는 <html> 에 해당하는 document.documentElement 의 부모는 document 인데 document 노드는 요소 노드가 아니기 때문입니다.
// 따라서 위 예시에서 parentNode 는 의도한 대로 document 노드를 반환하지만, parentElement 는 null 을 반환합니다.
// 이런 사소한 차이는 임의의 요소 노드 ele 에서 시작해 <html> 까지 거슬러 올라가고 싶은데, document 까지는 가고 싶지 않을 때 유용하게 활용할 수 있습니다.



// 테이블 탐색하기

// 지금까지 DOM 탐색 기본 프로퍼티를 알아보았습니다.
// 그런데 일부 DOM 요소 노드는 편의를 위해 기본 프로퍼티 외에 추가적인 프로퍼티를 지원합니다.

// 테이블이 가장 대표적입니다.

// <table> 요소는 기본 프로퍼티 이외에 다음과 같은 프로퍼티를 지원합니다.

let table = document.querySelector('#table');

// table.rows 는 <tr> 요소를 담은 컬렉션을 참조합니다.
console.log(table.rows);

// table.caption/tHead/tFoot 은 각각 <caption>, <thead>, <tfoot> 요소를 참조합니다.
console.log(table.tHead);

// table.tBodies 는 <tbody> 요소를 담은 컬렉션을 참조합니다.
// 표준에 따르면 테이블 내에 여러 개의 <tbody> 가 존재하는게 가능한데, 최소한 하나는 무조건 있어야 합니다.
// <tbody> 가 없더라도 브라우저는 <tbody> 노드를 DOM 에 자동으로 추가합니다.
console.log(table.tBodies);

// <thead>, <tfoot>, <tbody> 요소는 rows 프로퍼티를 지원합니다.
console.log(table.tBodies[0].rows);

// <tr> 요소는 다음 프로퍼티를 지원합니다.
// tr.cells 는 주어진 <tr> 안의 모든 <td>, <th> 을 담은 컬렉션을 반환합니다.
// tr.sectionRowIndex 는 주어진 <tr> 이 <thead>,<tbody>,<tfoot> 안쪽에서 몆 번째 줄에 위치하는지를 나타내는 인덱스를 반환합니다.
// tr.rowIndex 는 <table> 내에서 해당 <tr> 이 몆 번째 줄인 지를 나타내는 숫자를 반환합니다.

let row = table.tBodies[0].rows[0];
console.log(row.cells);
console.log(row.sectionRowIndex);
console.log(row.rowIndex);

// <td> 와 <th> 요소는 다음 프로퍼티를 지원합니다.

//  td.cellIndex 는 <td> 나 <th> 가 속한 <tr> 에서 해당 셀이 몆 번째인지를 나타내는 숫자를 반환합니다.


// 테이블과 마찬가지로 HTML 폼(form) 에만 쓸 수 있는 탐색 프로퍼티도 있습니다.
// 폼을 배우면서 이 프로퍼티에 대해서도 살펴보도록 하겠습니다.


// 요약

// 탐색 프로퍼티를 사용하면 이웃 노드로 바로 이동할 수 있습니다.

// 탐색 프로퍼티는 크게 두 개의 집합으로 나뉩니다.
// 1. 모든 노드에 적용 가능한 parentNode, childNodes, firstChild, lastChild, previousSibling, nextSibling
// 2. 요소 노드에만 적용 가능한 parentElement, children, firstElementChild, lastElementChild, previousElementSibling, nextElementSibling

// 테이블과 같은 몆몆 DOM 요소는 추가 프로퍼티와 콘텐츠에 접속할 수 있게 해주는 컬렉션을 제공합니다.

</script>