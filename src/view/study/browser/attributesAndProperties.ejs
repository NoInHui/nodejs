<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
    <div id="ele1"></div>
    <div id="ele2" something="something special"></div>
    <input id="ele3">
    <input id="ele5" type="checkbox" checked>
    <input id="ele6" style="color:red;font-size:120%">
    <input id="ele7" show-info="name" data-about="inhui">
    
</body>
</html>

<script>

// 속성과 프로퍼티

// 브라우저는 웹페이지를 만나면 HTML 을 읽어(파싱,parsing) DOM 객체를 생성합니다.
// 요소 노드에서 대부분의 표준 HTML 속성(attribute)은 DOM 객체의 프로퍼티(property)가 됩니다.

// 태그 <body id="page"> 가 있을 때, DOM 객체에서 body.id = 'page' 를 사용할 수 있는 것 같이 말이죠.

// 그런데 속성-프로퍼티가 항상 일대일로 매핑되지는 않습니다.
// 이번 챕터에선 속성과 프로퍼티를 어떻게 다룰 수 있는지, 두 가지가 언제 일대일로 매핑되는지, 언제는 매핑되지 않는지에 주의하면서 두 개념을 알아보겠습니다.

// DOM 프로퍼티

// 앞서 내장 DOM 프로퍼티에 대해 살펴본 바 있습니다.
// DOM 프로퍼티의 종류는 엄청나게 많습니다.
// 하지만 이런 내장 프로퍼티만으로 충분하지 않은 경우 자신만의 프로퍼티를 만들 수도 있습니다.
// DOM 노드(DOM node) 는 자바스크립트 객체입니다. 객체를 바꿔보겠습니다.

let ele1 = document.querySelector('#ele1');
ele1.myData = {
    name: 'elename1',
    title: 'eleTitle1'
};

console.log(document.querySelector('#ele1').myData);

// 메서드도 하나 추가해보겠습니다.
document.querySelector('#ele1').func1 = function() {
    console.log('func1');
}

document.querySelector('#ele1').func1();

// Element.prototype 같은 내장 프로토타입을 수정해 모든 요소 노드에서 이 메서드를 사용하게 할 수도 있습니다.

Element.prototype.attributeTestFunc1 = function() {
    console.log('attributeTestFunc1');
}

document.querySelector('#ele1').attributeTestFunc1();

// 예시에서 살펴본 바와 같이 DOM 프로퍼티와 메서드는 일반 자바스크립트 객체처럼 행동하므로 아래와 같은 특징을 보입니다.
// 1. 어떤 값이든 가질 수 있습니다.
// 2. 대,소문자를 가립니다.


// HTML 속성

// HTML 에서 태그는 복수의 속성을 가질 수 있습니다.
// 브라우저는 HTML 을 파싱해 DOM 객체를 만들 때 HTML 표준 속성을 인식하고, 이 표준 속성을 사용해 DOM 프로퍼티를 만듭니다.
// 따라서 요소가 id 같은 표준속성으로만 구성되어 있다면, 이에 해당하는 프로퍼티가 자연스레 만들어집니다.
// 하지만 표준이 아닌 속성일 때는 상황이 달라집니다.

console.log(document.querySelector('#ele2').something); // undefined

// 한 요소에선 표준인 속성이 다른 요소에선 표준이 아닐 수 있다는 점에도 주의해야 합니다.
// type 는 <input> 요소(HTMLInputElement) 에선 표준이지만, <body> (HTMLBodyElement) 에선 아닙니다.
// 요소에 어떤 표준 속성이 있는지 알아보려면 해당 요소의 명세서에 정보를 찾을 수 있습니다.

// 비표준 속성은 접근할 수 없는 걸까요?
// 물론 방법이 있습니다. 모든 속성은 아래의 메서드를 사용해 접근할 수 있습니다.

let ele2 = document.querySelector('#ele2');

// elem.hasAttribute(name) – 속성 존재 여부 확인
// elem.getAttribute(name) – 속성값을 가져옴
// elem.setAttribute(name, value) – 속성값을 변경함
// elem.removeAttribute(name) – 속성값을 지움

console.log(ele2.hasAttribute('something'));
console.log(ele2.getAttribute('something'));
ele2.setAttribute('something','test');
// ele2.removeAttribute('something');

// 위 메서드들은 HTML 에서 명시한 속성을 대상으로 동작합니다.
 
// 여기에 더하여 ele.attributes 을 사용하면 모든 속성값을 읽을 수도 있습니다.
// ele.attributes 을 호출하면 내장 클래스 Attr 를 구현한 객체들을 담은 컬렉션이 반환되는데, 객체엔 name 과 value 프로퍼티가 존재합니다.

console.log(ele2.attributes);



// 프로퍼티-속성 동기화

// 표준 속성이 변하면 대응하는 프로퍼티는 자동으로 갱신됩니다.
// 몆몆 경우를 제외하고 프로퍼티가 변하면 속성 역시 마찬가지로 갱신됩니다.

let ele4 = document.querySelector('#ele3');
ele4.setAttribute('id','ele4');
console.log(document.querySelector('#ele3'));
console.log(document.querySelector('#ele4'));

// 그런데 아래 예시의 input.value 처럼 동기화가 속성에서 프로퍼티 방향으로만 일어나는 예외상황도 존재합니다.

ele4.setAttribute('value', 'test1');
console.log(ele4.value);

ele4.value = 'test2';
console.log(ele4.getAttribute('value')) // test1

// 위 예시에선 다음을 확인할 수 있습니다.

// 속성 value 를 수정하면 프로퍼티도 수정됩니다.
// 하지만 프로퍼티를 수정해도 속성은 수정되지 않습니다.

// 이런 기능은 유용하게 사용될 수도 있습니다.
// 유저의 어떤 행동 때문에 value 가 수정되었는데 수정 전의 원래 값으로 복구하고 싶은 경우, 속성에 저장된 값을 가지고 오면 되기 때문입니다.


// DOM 프로퍼티 값의 타입

// DOM 프로퍼티는 항상 문자열이 아닙니다.
// 체크박스에 사용되는 input.checked 프로퍼티의 경우 boolean 값을 가집니다.

let ele5 = document.querySelector('#ele5');
console.log(ele5.getAttribute('checked')) // 속성값 : 빈 문자열
console.log(ele5.checked) // 프로퍼티 값 : true

// 몆 가지 다른 예를 살펴봅시다.
// style 의 속성의 경우 문자열이지만, style 프로퍼티는 객체입니다.

let ele6 = document.querySelector('#ele6');
console.log(ele6.getAttribute('style'));
console.log(ele6.style); // [object CSSStyleDeclaration]
console.log(ele6.style.color); // red

// 대부분의 프로퍼티의 값은 문자열입니다.

// 아주 드물긴 하지만, DOM 프로퍼티 값이 문자열이더라도 속성값과 다른 경우도 있습니다.
// href 속성이 상대 URL 이나 #hash 이더라도 href DOM 프로퍼티엔 항상 URL 전체가 저장되는 경우가 대표적인 예입니다.

// HTML 내에 명시된 href 속성의 값을 정확하게 얻고 싶다면 getAttribute 를 사용하면 됩니다.



// 비표준 속성, dataset

// HTML 을 작성할 때 우리는 대부분 표준 속성을 사용합니다.
// 하지만 표준이 아닌 속성도 존재합니다.
// 이런 비표준이 유용한 지 아닌지, 그리고 어떤 경우에 비표준 속성을 사용해야 하는지 알아봅시다.

// 비표준 속성은 사용자가 직접 지정한 데이터를 HTML 에서 자바스크립트로 넘기고 싶은 경우나 자바스크립트를 사용해 조작할 HTML 요소를 표시하기 위해 사용할 수 있습니다.

// <input id="ele7" show-info="name">

let ele8 = document.querySelector('[show-info=name]');
// let ele8 = document.querySelector('[show-info]');
console.log(ele8);
console.log(ele8.style);

// 비표준 속성은 요소에 스타일을 적용할 때도 사용되기도 합니다.

// <style>
//     [show-info="name"] {
//         color: green;
//     }
// </style>

// 물론 커스텀 속성에도 문제가 발생할 수 있습니다.
// 비표준 속성을 사용해 코드를 작성했는데 나중에 그 속성이 표준으로 등록되게 되면 문제가 발생합니다.
// HTML 은 살아있는 언어이기 때문에 개발자들의 요구를 반영하기 위해 지속해서 발전합니다.
// 따라서 이런 경우 예기치 못한 부작용이 발생할 수 있습니다.

// 이런 충돌 상황을 방지하기 위한 속성인 data-* 가 있습니다.

// 'data-' 로 시작하는 속성 전체는 개발자가 용도에 맞게 사용하도록 별도로 예약됩니다.
// dataset 프로퍼티를 사용하면 이 속성에 접근할 수 있습니다.

// <input id="ele7" show-info="name" data-about="inhui">

console.log(document.querySelector('#ele7').dataset);
console.log(document.querySelector('#ele7').dataset.about);

// data-order-state 같이 여러 단어로 구성된 속성은 카멜 표기법을 사용해 dataset.orderState 으로 변환됩니다.

// data-* 속성은 커스텀 데이터를 안전하고 유효하게 전달해줍니다.
// data-* 속성을 사용하면 읽기 뿐만 아니라 수정도 가능하다는 점에 유의해주세요.


// 요약

// 속성 - HTML 안에 쓰임
// 프로퍼티 - DOM 객체 안에 쓰임

// 속성과 함께 쓰이는 메서드

// elem.hasAttribute(name) – 속성 존재 여부 확인
// elem.getAttribute(name) – 속성값을 가져옴
// elem.setAttribute(name, value) – 속성값을 변경함
// elem.removeAttribute(name) – 속성값을 지움
// elem.attributes – 속성의 컬렉션을 반환함

// 거의 모든 상황에서 속성보다 프로퍼티를 사용하는 게 더 낫습니다.
// 다만 아래 사례같이 정확한 HTML 속성 값이 필요한 경우에는 프로퍼티가 적절치 않으므로 속성을 사용해야 합니다.

// 1. 비표준 속성이 필요한 경우, 다만 속성이 data- 로 시작하는 경우엔 dataset 을 사용해야 합니다.
// 2. HTML 에 적힌 값 '그대로' 를 읽고 싶은 경우
// href 프로퍼티에 항상 전체 URL 이 저장되는 것 같이 DOM 프로퍼티 값과 속성 값이 다른데, '원본'값을 얻고 싶은 경우엔 속성을 사용해야 합니다.



</script>

