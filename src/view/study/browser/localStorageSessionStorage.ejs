<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>

</body>
</html>

<script>

// localStorage 와 sessionStorage

// 웹 스토리 객체(web storage object) 인 localStorage 와 sessionStorage 는 브라우저 내 키-값 쌍을 저장할 수 있게 해줍니다.
// 이 둘을 사용하면 페이지를 새로 고침하고(sessionStorage 의 경우) 심지어 브라우저를 다시 실행해도 (localStorage 의 경우) 데이터가 사라지지 않고 남아있습니다.
// 그런데 "쿠키를 사용하면 브라우저에 데이터를 저장할 수 있는데, 왜 또 다른 객체를 사용해 데이터를 저장하는 걸까요?" 라는 의문이 들 수 있습니다.
// 쿠키 이외에도 다른 방식을 사용하는 이유는 다음과 같습니다.

// 1. 쿠키와 다르게 웹 스토리지 객체는 네트워크 요청 시 서버로 전송되지 않습니다.
// 이런 특징 때문에 쿠키보다 더 많은 자료를 보관할 수 있습니다.
// 대부분의 브라우저가 최소 2MB 혹은 그 이상의 웹 스토리기 객체를 저장할 수 있도록 해줍니다.
// 또한 개발자는 브라우저 내 웹 스토리지 구성 방식을 설정할 수 있습니다.

// 2. 쿠키와 또 다른 점은 서버가 HTTP 헤더를 통해 스토리지 객체를 조작할 수 없다는 것입니다.
// 웹 스토리지 객체 조작은 모두 자바스크립3트 내에서 수행됩니다.

// 3. 웹 스토리지 객체는 도메인,프로토콜,포트로 정의되는 오리진(origin) 에 묶여있습니다.
// 따라서 프로토콜과 서브도메인이 다르면 데이터에 접근할 수 없습니다.

// 두 스토리지 객체는 동일한 메서드와 프로퍼티를 제공합니다.

// setItem(key,value)
// getItem(key)
// removeItem(key)
// clear()
// key(index)
// length

// 두 스토리지 객체는 Map 과 유사합니다.

// localStorage 데모

// localStorage 의 주요 기능은 다음과 같습니다.

// 오리진이 같은 경우 데이터는 모든 탭과 창에서 공유됩니다.
// 브라우저나 OS 가 재시작하더라도 데이터가 파기되지 않습니다.

localStorage.setItem('test',1);
console.log(localStorage.getItem('test'));

// 오리진(domain/port/protocol) 만 같다면 url 경로는 달라도 동일한 결과를 볼 수 있습니다.
// localStorage 는 동일한 오리진을 가진 모든 창에서 공유되기 때문입니다.
// 따라서 한 창에 데이터를 설정하면 다른 창에서 변동 사항을 볼 수 있습니다.


// sessionStorage

// sessionStorage 객체는 localStorage 에 비해 자주 사용되진 않습니다.
// 제공하는 프로퍼티와 메서드는 같지만 훨씬 제한적이기 때문입니다.

// sessionStorage 는 현재 떠 있는 탭 내에서만 유지됩니다.
// 같은 페이지라도 다른 탭에 있으면 다른 곳에 저장되기 때문입니다.
// 그런데 하나의 탭에 여러 개의 iframe 이 있는 경우엔 동일한 오리진에서 왔다고 취급되기 때문에 sessionStorage 가 공유됩니다.
// 페이지를 새로 고침할 때 sessionStorage 에 저장된 데이터는 사라지지 않습니다. 하지만 탭을 닫고 새로 열때는 사라집니다.


// storage 이벤트

// localStorage 나 sessionStorage 의 데이터가 갱신될 때, storage 이벤트가 실행됩니다.
// storage 이벤트는 다음과 같은 프로퍼티를 지원합니다.

// key - 변경된 데이터의 키
// oldValue - 이전 값
// newVlalue - 새로운 값
// url - 갱신이 일어난 문서의 url
// storageArea - 갱신이 일어난 localStorage 나 sessionStorage 객체

// 여기서 중요한 점은 storage 이벤트가 이벤트를 발생시킨 스토리지를 제외하고 스토리지에서 접근 가능한 window 객체 전부에서 일어난다는 사실입니다.
// 좀 더 구체적으로 설명을 이어나가 보겠습니다.
// 두 개의 창에 같은 사이트를 띄워놨다고 가정해봅시다.
// 창은 다르지만 localStorage 는 서로 공유됩니다.









</script>