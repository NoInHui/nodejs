<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
    <div id="sampleConents"></div>
    <ul id="sampleUl"></ul>
</body>
</html>

<script>

// 문서 수정하기

// 요소 생성하기

// DOM 노드를 만들때 사용하는 메서드는 두 가지 입니다.

let div1 = document.createElement('div');
div1.className = 'divClass';
div1.innerHTML = '<strong>div node</strong>'

// 주어진 텍스트를 사용해 텍스트 노드를 만듦
let textNode1 = document.createTextNode('hello');


// 삽입 메서드
document.querySelector('#sampleConents').append(div1);

// 자바스크립트에서 지원하는 노드 삽입 메서드는 다음과 같습니다.

// document.body.append(노드 또는 문자열) : 노드나 문자열을 node 끝에 삽입합니다.
// document.body.prepend(노드 또는 문자열) : 노드나 문자열을 node 맨 앞에 삽입합니다.
// document.body.before(노드 또는 문자열) : 노드나 문자열을 node 이전에 삽입합니다.
// document.body.after(노드 또는 문자열) : 노드나 문자열을 node 다음에 삽입합니다.
// document.body.replaceWith(노드 또는 문자열) : node를 새로운 노드나 문자열로 대체합니다.

// 삽입 메서드에 문자열을 넘겨 텍스트 노드를 ㅁ나들 땐 인수로 넘긴 문자열이 'HTML' 이 아닌 '문자열' 그 형태로 삽입된다는 점에 주의해야 합니다.
// 특수문자는 이스케이프 처리됩니다.
document.querySelector('#sampleConents').append('<p>hello</p>');

// 삽입 메서드를 사용하면 문자열은 ele.textContent 를 사용한 것처럼 안전한 방법으로 삽입되는 것이죠.
// 따라서 노드 삽입 메서드는 DOM 노드나 문자열을 삽입할 때만 사용할 수 있습니다.

// 그런데 만약 ele.innerHTML 을 사용한 것처럼 태그가 정상적으로 동작할 수 있게 문자열 형태의 HTML 그 자체를 삽입하고 싶다면 어떻게 해야 할까요?



// insertAdjacentHTML, insertAdjacentText, insertAdjacentElement

// 또 다른 다재다능한 메서드 ele.insertAdjacentHTML(where, html) 를 사용하면 가능합니다.
// ele.insertAdjacentHTML(where, html) 에서 첫 번째 매개변수는 ele 를 기준으로 하는 상대 위치로, 다음 값 중 하나여야 합니다.

// beforebegin : ele 바로 앞에 html 을 삽입합니다.
// afterbegin : ele 의 첫 번째 자식 요소 바로 앞에 html 을 삽입합니다.
// beforeend : ele 의 마지막 자식 요소 바로 다음에 html 을 삽입합니다.
// afterend : ele 바로 다음에 html 을 삽입합니다.

document.querySelector('#sampleConents').insertAdjacentHTML('beforebegin','<p>beforebigin</p>');
document.querySelector('#sampleConents').insertAdjacentHTML('afterbegin','<p>afterbegin</p>');
document.querySelector('#sampleConents').insertAdjacentHTML('beforeend','<p>beforeend</p>');
document.querySelector('#sampleConents').insertAdjacentHTML('afterend','<p>afterend</p>');


// 노드 삭제하기

// node.remove() 를 사용하면 노드를 삭제할 수 있습니다.

document.querySelector('div.divClass').remove();


// cloneNode 로 노드 복제하기

// ele.cloneNode(true) 를 호출하면 ele 의 깊은 복제본이 만들어집니다.
// 속성 전부와 자손 요소 전부가 복사됩니다.

// ele.cloneNode(false) 를 호출하면 후손 노드 복사 없이 ele 만 복제됩니다.

let clone1 = document.querySelector('#sampleConents').cloneNode(true);
let clone2 = document.querySelector('#sampleConents').cloneNode(false);

console.log('clone1', clone1);
console.log('clone2', clone2);



// DocumentFragment

// DocumentFragment 는 특별한 DOM 노드 타입으로, 여러 노드로 구성된 그룹을 감싸 다른 곳으로 전달하게 해주는 래퍼(wrapper)처럼 동작합니다.
// 문서에 있는 다른 노드를 DocumentFragment 에 추가할 수 있는데, DocumentFragment 를 문서 어딘가에 삽입하면 DocumentFragment 는 사라지고 DocumentFragment 에 추가한 노드만 남습니다.

let fragment = new DocumentFragment();

for(let i=0;i<=3;i++) {
    let li = document.createElement('li');
    li.append(i);
    fragment.append(li);
}

document.querySelector('#sampleUl').append(fragment);
console.log(document.querySelector('#sampleUl'));

// DocumentFragment 를 직접 사용할 일은 흔치 않습니다.
// 배열을 직접 만들어 반환할수 있기 떄문입니다.

// 여기서 DocumentFragment 를 언급한 이유는 template 요소 같이 DocumentFragment 를 기반으로하는 문법이 있기 때문입니다.
// template 요소는 추후 다루도록 하겠습니다.


// 구식 삽입,삭제 메서드
// 이 정보는 개발된 지 얼마 안된 스크립트가 아닌 오래된 스크립트를 이해하는 데 필요합니다.

// 하위 호환성을 유지하기 위해 남아있는 구식 DOM 조작 메서드가 있습니다.
// 아주 오래전에 만들어진 이 메서드들은 요즘에는 잘 사용하지 않습니다.
// 앞서 배운 모던한 메서드 append, prepend, before, after, remove, replaceWith 을 사용하는 것이 좀 더 유연하기 때문입니다.

// parentElem.appendChild(node) : parentElem의 마지막 자식으로 node를 추가함
// parentElem.insertBefore(node, nextSibling) : node를 parentElem안의 nextSibling앞에 추가함
// parentElem.replaceChild(node, oldChild) : parentElem의 자식 노드 중 oldChild를 node로 교체함
// parentElem.removeChild(node) : node가 parentElem의 자식 노드라는 가정하에 parentElem에서 node를 삭제함


// document.write 에 대한 첨언

// document.write 는 웹페이지에 뭔가를 더할 때 쓰는 아주 오래된 메서드입니다.
// document.write(html) 를 호출하면 html 이 페이지 그 자리에 즉시 추가됩니다.
// html 형식의 문자열을 동적으로 만들어 사용할 수 있기 때문에 document.write(html) 는 꽤나 유연합니다.
// 날개를 단 새처럼 동적인 웹페이지를 만드는데 이 메서드를 사용할 수 있죠.

// document.write 는 DOM 도 없고 그 어떤 표준도 존재하지 않았던 과거에 만들어졌습니다.
// 표준에 정의된 메서드는 아니지만 아직 다양한 곳에서 쓰이고 있어서 살아남은 것이죠.

// 근래에 작성된 스크립트에선 이 메서드를 찾기 힘듭니다.
// 왜냐하면 document.write 는 페이지를 불러오는 도중에만 작동하기 때문입니다.

// 페이지가 다 로드되고 나서 document.write 를 호출하면 기존에 있던 문서 내용이 사라집니다.


// 요약

let node = document.body;

// 노드 생성 메서드
// document.createElement()
// document.createTextNode()
// node.cloneNode(deep)

// 노드 삽입,삭제 메서드

// node.append()
// node.prepend()
// node.before()
// node.after()
// node.replaceWith()
// node.remove()

// 구식 메서드

// node.appendChild()
// node.insertBefore()
// node.removeChild()
// node.replaceChild()

// html 에 HTML 을 넣으면 메서드 node.insertAdjacentHTML(where, html) 은 where 값에 따라 특정 위치에 HTML 을 삽입함
// "beforebegin" – elem 바로 앞에 html을 삽입
// "afterbegin" – elem의 첫 번째 자식 요소 바로 앞에 html을 삽입
// "beforeend" – elem의 마지막 자식 요소 바로 다음에 html을 삽입
// "afterend" – elem 바로 다음에 html을 삽입

// 문자열이나 요소 삽입에 쓰이는 유사 메서드 node.insertAdjacentText, node.insertAdjacentElement 도 있는데 잘 쓰이지는 않음


// 페이지 로딩이 끝나기 전에 HTML을 삽입해주는 메서드

// document.write(html)
// 문서 로딩이 끝난 상태에서 이 메서드를 호출하면 문서 내용이 지워짐
// 오래된 스크립트에서 볼 수 있음

</script>