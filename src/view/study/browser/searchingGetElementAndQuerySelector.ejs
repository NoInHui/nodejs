<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// getElement* , querySelector* 로 요소 검색하기

// 요소들이 가까이 붙어있다면 앞서 학습한 DOM 탐색 프로퍼티를 사용해 목표 요소에 쉽게 접근할 수 있습니다.
// 그런데, 요소들이 가까이 붙어있지 않은 경우도 있기 마련입니다.
// 상대 위치ㅏ를 이용하지 않으면서 웹 페이지 내에서 원하는 요소 노드에 접근하는 방법은 없는 걸까요?

// 이번 챕터에선 이를 가능하게 해주는 메서드에 대해 알아보겠습니다.


// document.getElementById 혹은 id 를 사용해 요소 검색하기

// 요소에 id 속성이 있으면 위치에 상관없이 메서드 document.getElementById(id) 를 이용해 접근할 수 있습니다.

let ele1 = document.getElementById('category');
console.log(ele1);

// 이에 더하여 id 속성값을 그대로 딴 전역 변수를 이용해 접근할 수도 있습니다.
try {
    console.log(category);
} catch (e) {
    console.log(e);
}

// 그런데 이렇게 요소 id 를 따서 자동으로 선언된 전역변수는 동일한 이름을 가진 변수가 선언되면 무용지물이 됩니다.

let category = 5;
// 위의 category 에서 오류가 발생

console.log(category);


// id 를 따서 만들어진 전역변수를 요소 접근 시 사용하지 마세요.

// id 에 대응하는 전역변수는 명세서의 내용을 구현해 만들어진 것으로 표준이긴 하지만 하위 호환성을 위해 남겨둔 동작입니다.
// 브라우저는 스크립트의 네임스페이스와 DOM 의 네임스페이스를 함께 사용할 수 있도록 해서 개발자의 편의를 도모합니다.
// 그런데 이런 방식은 스크립트가 간단할 땐 괜찮지만, 이름이 충돌할 가능성이 있기 때문에 추천하는 방식은 아닙니다.
// HTML 을 보지 않은 상황에서 코드만 보고 변수의 출처를 알기 힘들다는 단점도 있습니다.


// id 는 중복되면 안됩니다.

// id 는 유일무이해야 합니다.
// 문서 내 요소의 id 속성값은 중복되어선 안 됩니다.
// 같은 id 를 가진 요소가 여러 개 있으면 document.getElementById 같이 id 를 이용해 요소를 검색하는 메서드의 동작이 예측 불가능해집니다.
// 검색된 여러 요소 중 어떤 요소를 반환할지 판단하지 못해 임의의 요소가 반환되죠.
// 문서 내 동일 id 가 없도록 해 이런 일을 방지하도록 합시다.


// anyNode.getElementById 가 아닌 document.getElementById
// getElementById 는 document 객체를 대상으로 해당 id 를 가진 요소 노드를 찾아 줍니다.
// 문서 노드가 아닌 다른 노드엔 호출할 수 없습니다.


// querySelectorAll


// ele.querySelectorAll(css) 는 다재다능한 요소 검색 메서드입니다.
// 이 메서드는 ele 의 자식 요소 중 주어진 CSS 선택자에 대응하는 요소 모두를 반환합니다.

console.log(document.querySelectorAll('ul > li.sidebar-link '));

// querySelectorAll 은 CSS 선택자를 활용할 수 있다는 점에서 아주 유용합니다.

// 가상 클래스도 사용할 수 있습니다.
// querySelectorAll 에는 :hover 나 :active 같은 CSS 선택자의 가상 클래스도 사용할 수 있습니다.
// document.querySelectorAll(':hover') 을 사용하면 마우스 포인터가 위에 있는 요소 모두를 담은 컬렉션이 반환됩니다.
// 이때 컬렉션은 DOM 트리 최상단에 위치한 <html> 부터 가장 하단의 요소 순으로 채워집니다.


// querySelector
// ele.querySelector(css) 는 주어진 CSS 선택자에 대응하는 요소 중 첫 번째 요소를 반환합니다.
// ele.querySelectorAll(css)[0] 과 동일하죠.


// matches
// 지금까지 소개한 모든 메서드는 DOM 검색에 쓰입니다.
// ele.matches(css) 는 DOM 을 검색하는 일이 아닌 조금 다른 일을 합니다.
// 이 메서드는 요소 ele 이 주어진 CSS 선택자와 일치하는지 여부를 판단해줍니다.
// 요소에 담겨있는 배열 등을 순회해 원하는 요소만 걸러내고자 할 때 유용합니다.

for(let ele of document.body.children) {
    if(ele.matches('div')) {
        console.log(ele);
    }
}


// closest
// 부모 요소, 부모 요소의 부모 요소 등 DOM 트리에서 특정 요소의 사우이에 있는 요소들의 조상요소라고 합니다.
// 메서드 ele.closest(css) 는 ele 자기 자신을 포함하여 CSS 선택자와 일치하는 가장 가까운 조상 요소를 찾을 수 있게 도와줍니다.
// closest 메서드는 해당 요소부터 시작해 DOM 트리를 한 단계식 거슬러 올라가면서 원하는 요소를 찾습니다.
// CSS 선택자와 일치하는 요소를 찾으면, 검색을 중단하고 해당 요소를 반환합니다.

console.log(document.querySelector('.contents-section').closest('div'));


// getElementsBy*

// 태그나 클래스 등을 이용해 원하는 노드를 찾아주는 메서드도 있습니다.
// querySelector 를 이용하는 게 더 편리하고 문법도 짧아서 요즘은 이런 메서드들을 잘 쓰진 않습니다.

// 튜토리얼의 완성도를 높이고 오래된 스크립트에서 해당 메서드들을 만날 때 당황하지 않으시길 바라면서 이 메서드들을 잠시 언급하도록 하겠습니다.

// ele.getElementsByTagName(tag) : 주어진 태그에 해당하는 요소를 찾고 대응하는 요소를 담은 컬렉션을 반환합니다. 매개변수 tag 에 * 이 들어가면 모든 태그가 검색됩니다.
// ele.getElementsByClassName(className) : class 속성값을 기준으로 요소를 찾고 대응하는 요소를 담은 컬렉션을 반환합니다.
// document.getElementsByName(name) : 아주 드물게 쓰이는 메서드로, 문서 전체를 대상으로 검색을 수행합니다. 검색 기준은 name 속성값이고 이 메서드 역시 검색 결과를 담은 컬렉션을 반환합니다.


// 요소 하나가 아닌 컬렉션을 반환합니다.
// 초보자들이 자주 저지르는 실수가 있습니다.

document.getElementsByTagName('input').value = 5;
// input 요소 전체를 담은 컬렉션에 5를 할당하는 위 코드는 동작하지 않습니다.
// 컬렉션을 순회하거나 인덱스를 사용해 요소를 얻고 그 요소에 값을 할당하면 기존 의도대로 동작합니다.
// document.getElementsByTagName('input')[0].value = 5;


// 살아있는 컬렉션

// getElementsBy 로 시작하는 모든 메서드는 살아있는 컬렉션을 반환합니다.
// 문서에 변경이 있을 때마다 컬렉션이 자동 갱신 되어 최신 상태를 유지합니다.

// 반면 querySelectorAll 은 정적인 컬렉션을 반환합니다.
// 컬렉션이 한번 확정되면 더는 늘어나지 않습니다.



// 요약

// DOM 에서 원하는 노드를 검색하게 해주는 주요 메서드 6가지는 다음과 같습니다.

// 메서드	                검색    기준    호출 대상이 요소가 될 수 있는지에 대한 여부	    컬렉션 갱신 여부
// querySelector	        CSS 선택자	    ✔	                                        -
// querySelectorAll	        CSS 선택자	    ✔	                                        -
// getElementById	        id	            -	                                        -
// getElementsByName	    name	        -	                                        ✔
// getElementsByTagName	    태그나'*'	    ✔	                                        ✔
// getElementsByClassName	class	        ✔	                                        ✔


// 아마 실무에선 querySelector 나 querySelectorAll 를 가장 많이 사용하실 겁니다.
// getElementBy 로 시작하는 메서드는 대개 오래된 스크립트에서 만날 수 있는데, 일부 이 메서드가 꼭 필요한 상황에서 쓰이는 경우도 있습니다.

// 이 외에 알아두면 좋을 만한 메서드는 아래와 같습니다.

// elem.matches(css)는 elem이 해당 CSS 선택자와 일치하는지 여부를 검사합니다.
// elem.closest(css)는 해당 CSS 선택자와 일치하는 가장 가까운 조상 요소를 탐색합니다. 이때, elem 자기 자신도 검색 대상에 포함됩니다.

// 위에선 언급하지 않았지만, 노드의 부모-자식 관계를 확인할 수 있도록 도와주는 유용한 메서드 하나를 더 소개해 드리고 마무리하겠습니다.
// elemA.contains(elemB)는 elemB가 elemA에 속하거나(elemB가 elemA의 후손인 경우) elemA==elemB일 때, 참을 반환합니다.

</script>