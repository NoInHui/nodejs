<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>

    <div id="ele1" class="sample1 sample2">ele1</div>
    <button id="ele2" onclick="alert(this.innerHTML)">ele2</button>
    <button id="ele3" value="ele3value">ele3</button>
    <button id="ele4" value="" onclick="console.log(event)">ele4</button>

</body>
</html>

<script>

// 브라우저 이벤트 소개

// 이벤트(event) 는 무언가 일어났다는 신호입니다.
// 모든 DOM 노드는 이런 신호를 만들어 냅니다.

// 자주 사용되는 유용한 DOM 이벤트는 무엇이 있는지 잠시 살펴봅시다.

// 마우스 이벤트
// click
// contextmenu : 요소 위에서 마우스 오른쪽 버튼을 눌렀을 때 발생합니다.
// mouseover, mouseout
// mousedown, mouseup
// mousemove

// 폼 요소 이벤트
// submit : 사용자가 form 을 제출할 때 발생합니다.
// focus : 사용자가 input 과 같은 요소에 포커스 할 때 발생합니다.

// 키보드 이벤트
// keydown, keyup

// 문서 이벤트
// DOMContentLoaded : HTML 이 전부 로드 및 처리되어 DOM 생성이 완료되었을 때 발생합니다.

// CSS 이벤트
// transitionend : CSS 애니메이션이 종료되었을 때 발생합니다.

// 이 외에도 다양한 이벤트가 있는데, 몇몇 이벤트는 다음 챕터에서 다룰 예정입니다.


// 이벤트 핸들러

// 이벤트에 반응하려면 이벤트가 발생했을 때 실행되는 함수인 핸들러(handler) 를 할당해야 합니다.
// 핸들러는 사용자의 행동에 어떻게 반응할지를 자바스크립트 코드로 표현한 것입니다.
// 핸들러는 여러 가지 방법으로 할당할 수 있습니다.

// 1. HTML 속성
// HTML 안의 on<event> 속성에 핸들러를 할당할 수 있습니다.
// 아래 같이 input 태그에 onclick 속성에 click 핸들러를 할당하는 것 같이 말이죠.
// <input value="클릭해 주세요." onclick="alert('클릭!')" type="button">

// HTML 속성은 대,소문자를 구분하지 않기 때문에 ONCLICK 은 onClick, onCLICK 과 동일하게 동작합니다.
// 하지만 속성값은 대개 onclick 같이 소문자로만 작성합니다.


// 2. DOM 프로퍼티
// DOM 프로퍼티 on<event> 을 할당해도 핸들러를 할당할 수 있습니다.

// document.querySelector('#ele1').onclick = function() {
//     alert('click');
// }

document.querySelector('#ele1').onclick = () => alert('click');

// 핸들러를 HTML 속성을 사용해 할당하면, 브라우저는 속성값을 이용해 새로운 함수를 만듭니다.
// 그리고 생성된 함수를 DOM 프로퍼티에 할당합니다.
// 따라서 위 두 예제는 동일하게 동작합니다.

// 핸들러를 제거하고 싶다면 document.querySelector('#ele1').onclick = null 같이 null 을 할당하면 됩니다.
document.querySelector('#ele1').onclick = null;



// this 로 요소에 접근하기

// 핸들러 내부에 쓰인 this 의 값은 핸들러가 할당된 요소입니다.
// 아래 예시의 this.innerHTML 에서 this 는 button 이므로 버튼을 클릭하면 콘텐츠가 출력됩니다.

// <button id="ele2" onclick="alert(this.innerHTML)">ele2</button>


// addEventListener

// HTML 속성과 DOM 프로퍼티를 이용한 이벤트 핸들러 방식엔 근본적인 문제가 있습니다.
// 하나의 이벤트에 복수의 핸들러를 할당할 수 없다는 문제이죠.
// 버튼을 클릭하면 버튼을 강조하면서 메시지를 보여주고 싶다고 가정해 봅시다.
// 두 개의 이벤트 핸들러가 필요할 겁니다. 하지만 기존 방식으로는 프로퍼티가 덮어씌워 진다는 문제가 있습니다.

// ele.onclick = function() {};
// ele.onclick = function() {};

// 웹 표준에 관여하는 개발자들은 오래전부터 이 문제를 인지하고 addEventListener 와 removeEventListner 라는 특별한 메서드를 이용해 핸들러를 관리하자는 대안을 제시했습니다.
// 핸들러를 여러개 할당할 수 있도록 말이죠.

// 문법은 다음과 같습니다.

// element.addEventListener(event, handler, [options]);

// event : 이벤트 이름(예: click)

// handler : 핸들러 함수

// options : 아래 프로퍼티를 갖는 객체

// once - true 이면 이벤트가 트리거 될 때 리스너가 자동으로 삭제됩니다.

// capture - 어느 단계에서 이벤트를 다뤄야 하는지를 알려주는 프로퍼티로, 관련 내용은 버블링과 캡처링 챕터에서 자세히 다룰 예정입니다.
// 호환성 유지를 위해 options 를 객체가 아닌 false/true 로 할당하는 것도 가능한데, 이는 {capture: false/true} 와 동일합니다.

// passive - true 이면 리스너에서 지정한 함수가 preventDefault() 를 호출하지 않습니다. 자세한 내용은 브라우저 기본 동작에서 다루겠습니다.


// 핸들러 삭제는 removeEventListener 로 합니다.

// element.removeEventListener(event, handler, [options])

// 삭제는 동일한 함수만 할 수 있습니다.

// 핸들러를 삭제하려면 핸들러 할당 시 사용한 함수를 그대로 전달해줘야 합니다.
// 아래와 같이 이벤트를 할당하고 삭제하면 원하는 대로 동작하지 않습니다.

// document.querySelector('#ele1').addEventListener('click', () => alert('ele1'));
// document.querySelector('#ele1').removeEventListener('click', () => alert('ele1'));

// removeEventListener 를 썼지만 핸들러는 지워지지 않았습니다.
// 함수는 똑같이 생겼지만 그럼에도 불구하고 다른 함수이기 때문에 이런 문제가 발생합ㄴ디ㅏ.

// 위 예시를 제대로 고치면 다음과 같습니다.

function handler1() {
    alert('handler1');
}

document.querySelector('#ele1').addEventListener('click', handler1);
document.querySelector('#ele1').removeEventListener('click', handler1);

// 변수에 핸들러 함수를 저장해 놓지 않으면 핸들러를 지울 수 없다는 것을 항상 기억해 높으셔야 합니다.
// 이렇게 하지 않으면 addEventListener 로 할당한 핸들러를 불러올수 없습니다.

// addEventListener 를 여러 번 호출하면 아래와 같이 핸들러를 여러 개 붙일 수 있습니다.

function handler2() {
    alert('handler2');
}

document.querySelector('#ele1').addEventListener('click', handler1);
document.querySelector('#ele1').addEventListener('click', handler2);

// 어떤 이벤트는 addEventListener 를 써야만 동작합니다.

// DOM 프로퍼티에 할당할 수 없는 이벤트가 몆몆 있습니다.
// 이런 이벤트는 무조건 addEventListener 를 써야 합니다.
// 문서를 읽고 DOM 트리 생성이 완료되었을 때 트리거되는 이벤트인 DOMContentLoaded 가 대표적인 예입니다.

document.onDOMContentLoaded = function() {
    console.log('onDOMContentLoaded1');
}

document.addEventListener('DOMContentLoaded', () => console.log('onDOMContentLoaded2'));



// 이벤트 객체

// 이벤트를 제대로 다루려면 어떤 일이 일어났는지 상세히 알아야 합니다.
// click 이벤트가 발생했다면 마우스 포인터가 어디에 있는지, keydown 이벤트가 발생했다면 어떤 키가 눌렸는지 등에 대한 상세한 정보가 필요합니다.

// 이벤트가 발생하면 브라우저는 이벤트 객체(event object) 라는 것을 만듭니다.
// 여기에 이벤트에 관한상세한 정보를 넣은 다음, 핸들러에 인수 형태로 전달합니다.

document.querySelector('#ele3').onclick = function(event) {
    console.log(event);
    console.log(event.type + " 이벤트가 " + event.currentTarget + "에서 발생했습니다.");
    console.log("이벤트가 발생한 곳의 좌표는 " + event.clientX + ":" + event.clientY +"입니다.");
}

// 이벤트 객체에서 지원하는 프로퍼티 중 일부는 다음과 같습니다.

// event.type
// 이벤트 타입, click 등

// event.currentTarget
// 이벤트를 처리하는 요소
// 화살표 함수를 사용해 핸들러를 만들거나 다른 곳에서 바인딩하지 않은 경우엔 this 가 가리키는 값과 같음
// 화살표 함수를 사용했거나 함수를 다른 곳에서 바인딩한 경우엔 event.currentTarget 를 사용해 이벤트가 처리되는 요소 정보를 얻을 수 있음

// event.clientX, event.clientY
// 포인터 관련 이벤트로서 커서의 상대 좌표(모니터 기준 좌표가 아닌, 브라우저 화면 기준 좌표)

// 이 외에도 다양한 프로퍼티가 있습니다.
// 이벤트 타입에 따라 이벤트 객체에서 제공하는 프로퍼티는 다릅니다.
// 추후 다양한 종류의 이벤트를 학습하면서 이벤트별 프로퍼티에 대해서도 상세히 알아보겠습니다.


// 이벤트 객체는 HTML 핸들러 안에서도 접근할 수 있습니다.
// HTML 에서 핸들러를 할당한 경우에도 아래와 같이 event 객체를 사용할 수 있습니다.

// <button id="ele4" value="" onclick="console.log(event)">ele4</button>

// 브라우저는 속성을 읽고 function(event) {console.log(event)} 같은 핸들러를 만들어 내기 때문입니다.
// 생성된 핸들러 함수의 첫 번째 인수는 'event' 로 불리고, 함수 본문은 속성값을 가져옵니다.



// 객체 형태의 핸들러와 handleEvent

// addEventListener 를 사용하면 함수뿐만 아니라 객체를 이벤트 핸들러로 할당할 수 있습니다.
// 이벤트가 발생하면 객체에 구현한 handleEvent 메서드가 호출됩니다.









</script>