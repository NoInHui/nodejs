<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>

    <div id="ele1" class="sample1 sample2">123</div>
</body>
</html>

<script>

// 스타일과 클래스

// 자바스크립트를 사용해 어떻게 스타일과 클래스를 다룰 수 있는지 알아보기 전에, 중요한 규칙을 하나 집고 넘어가야 할 것 같습니다.

// 요소에 스타일을 적용할 수 있는 방법은 두 가지가 있습니다.

// 1. CSS 에 클래스를 만들고, 요소에 <div class="..."> 처럼 클래스 추가하기
// 2. <div style="..."> 처럼 프로퍼티를 style 에 바로 써주기

// 자바스크립트를 사용하면 클래스와 style 프로퍼티 둘 다를 수정할 수 있습니다.

// 두 방법 중 하나를 택하라면 style 보다 CSS 클래스를 구성하는 것을 더 우선시해야 합니다.
// style 은 클래스를 다룰 수 없을 때만 사용해야 합니다.

// style은 아래와 같이 자바스크립트를 사용해 요소의 좌표를 동적으로 계산하고, 계산한 좌표를 설정해주고자 할 때 사용하면 좋습니다.

// ele.style.left = '123px';
// ele.style.top = '100px';

// 텍스트를 빨간색으로 만든다거나 배경에 이미지를 추가하는 등의 작업은 CSS 에 관련 스타일을 명시한 클래스를 ㅁ나들고, 자바스크립트를 사용해 이 클래스를 요소에 추가해 주는 방식이 좋습니다.
// 이렇게 하면 유연성이 확보돼 유지보수가 쉬워집니다.


// className 과 classList

// 클래스 변경은 스크립트를 통해 자주 하게 되는 동작 중 하나입니다.

// 아주 오래전 자바스크립트엔 'class' 같은 예약어는 객체의 프로퍼티가 될 수 없다는 제약사항이 있었습니다.
// 지금은 이런 제약사항이 사라졌지만 과거엔 class 프로퍼티를 사용할 수 없었기 때문에 ele.class 를 사용하는 것 역시 불가능했습니다.

// 이런 배경 때문에 클래스를 위한 프로퍼티 'className' 가 도입되게 되었습니다.
// ele.className 은 'class' 속성에 대응합니다.

console.log(document.querySelector('#ele1').className);

// ele.className 에 문언가를 대입하면 클래스 문자열 전체가 바뀝니다.
// 그런데 이렇게 속성값 전체를 바꾸는게 아니고 클래스 하나만 추가하거나 제거하고 싶은 경우도 있기 마련입니다.

// 이럴 때 ele.classList 라는 프로퍼티를 사용할 수 있습니다.
console.log(document.querySelector('#ele1').classList);

// classList 엔 클래스 하나만 조작하게 해주는 메서드인 add, remove, toggle 이 구현되어 있습니다.

document.querySelector('#ele1').classList.add('sample3');
console.log(document.querySelector('#ele1').classList);
document.querySelector('#ele1').classList.remove('sample2');
console.log(document.querySelector('#ele1').classList);

// 이렇게 클래스 속성 값 전체를 바꾸고 싶을 때는 className 으로, 개별 클래스를 조작하고 싶을 때는 classList 를 사용하면 됩니다.

// ele.classList.add/remove('class') : class 를 추가하거나 제거
// ele.classList.toggle('class') : class 가 존재할 경우 class 를 제거하고 그렇지 않은 경우엔 추가
// ele.classList.contains('class') : class 존재 여부에 따라 true/false 를 반환

document.querySelector('#ele1').classList.toggle('sample1');
console.log(document.querySelector('#ele1').classList.contains('sample1'));

// 이 외에 classList 는 이터러블 객체이기 때문에 for..of 를 사용해 클래스를 나열 할 수 있다는 특징이 있습니다.


// 요소의 스타일

// 프로퍼티 ele.style 은 속성 style 에 쓰인 값에 대응되는 객체입니다.
// ele.style.width = '100px' 은 style 속성값을 문자열 width:100px 로 설정한 것과 같죠.

// 여러 단어를 이어서 만든 프로퍼티는 다음과 같이 카멜 표기법을 사용해 이름 짓습니다.

// background-color -> ele.style.backgroundColor
// z-index -> ele.style.zIndex
// border-left-width -> ele.style.borderLeftWidth

// 특정 브라우저 전용 프로퍼티

// -moz-border-radius , -webkit-border-radius 같이 브라우저 관련 접두사가 붙은 프로퍼티 역시 카멜 표기법을 사용합니다.
// 대시(-) 는 대문자를 의미합니다.

// ele.style.MozBorderRadius = '';
// ele.style.WebkitBorderRadius = '';



// style 프로퍼티 재지정하기

// style 프로퍼티에 값을 할당했다가 시간이 지나 이를 제거해야 할 때가 종종 있습니다.
// 요소를 숨기기 위해 ele.style.display = 'none' 를 적용했다고 가정해봅시다.
// 시간이 지나 처음부터 style.display 를 설정하지 않았던 것처럼 되돌리고 싶어 졌습니다.
// 이럴 땐 delete ele.stylke.display 를 사용해 프로퍼티를 삭제하는 대신 ele.style.display = '' 같이 빈 문자열을 할당해주어야 합니다.

document.querySelector('#ele1').style.display = 'none';
setTimeout(() => document.querySelector('#ele1').style.display = '', 1000);

// 이렇게 style.display 에 빈 문자열을 할당하면 브라우저는 마치 처음부터 style.display 프로퍼티가 없었던 것처럼 CSS 클래스와 브라우저 내장 스타일을 페이지에 적용합니다.


// style.cssText 로 완전히 다시 쓰기

// 개별 스타일 프로퍼티를 적용할 때는 보통 style.* 를 사용합니다.
// 그런데 div.style 은 객체이고 읽기 전용이기 때문에 div.style = 'color:red; width: 100px' 같은 방식으론 전체 스타일을 설정할 수 없습니다.
// 문자열을 사용해 전체 스타일을 설정하려면 프로퍼티 style.cssText 를 사용해야 합니다.


document.querySelector('#ele1').style.cssText = `color:red; font-size:20px`;

// style.cssText 를 사용하면 기존 스타일에 스타일을 추가하는 게 아니라 전체를 교체해버리기 떄문에 잘 쓰이지 않습니다.
// 잘 사용하고 있는 스타일이 실수로 지워진다는 위험이 있죠.
// 그렇지만 요소를 새로 만들고, 여기에 스타일을 적용할 때는 기존 스타일이 없기 때문에 style.cssText 를 사용할 수 있습니다.

document.querySelector('#ele1').setAttribute('style', 'color:black; font-size:12px');
// 를 사용해 속성을 설정해도 style.cssText 와 같은 효과를 볼 수 있습니다.



// 단위에 주의하기

// 자바스크립트를 사용해 스타일 값을 설정할 때는 단위를 붙여주는 걸 잊지 말아야 합니다.
// ele.style.top 에 값을 설정할 때 10px 이 아닌 10 을 설정하면 제대로 동작하지 않습니다.



// 요약

// 클래스를 관리할 수 있게 해주는 DOM 프로퍼티
// className - 클래스 전체를 문자열 형태로 반환해주는 프로퍼티로 클래스 전체를 관리할 때 유용합니다.
// classList - 클래스 하나를 관리할 수 있게 해주는 메서드입니다. add/remove/toggle/conatins 가 구현된 객체를 반환합니다. 개별 클래스를 조작할 때 유용합니다.

// 스타일 변경 방법
// style 프로퍼티 - 카멜 표기법을 이용해 변경한 스타일이 있는 객체로, 이 객체를 조작하는 것은 style 속성과 대응하는 개별 프로퍼티를 조작하는 것과 같습니다.
// style.cssText 프로퍼티는 style 속성 전체에 대응하므로 스타일 전체에 대한 문자열이 저장됩니다.ㅣ



</script>