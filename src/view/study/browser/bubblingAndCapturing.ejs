<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>

    <div id="ele1" onclick="alert('ele1')">
        <em><code>EM</code>을 클릭했는데도 <code>DIV</code>에 할당한 핸들러가 동작합니다.</em>
    </div>

    <form id="ele2" onclick="alert('form')">
        <div onclick="alert('div')">
            <p onclick="alert('p')">feaw</p>
        </div>
    </form>

    <form id="ele3">
        <div id="ele4">
            <p id="ele5">ele5</p>
        </div>
    </form>
</body>
</html>

<script>

// 버블링과 캡처링

// 먼저 예시부터 살펴봅시다.
// 아래 핸들러는 <div> 에 할당되어 있지만, <em> 이나 <code> 같은 중첩 태그를 클릭해도 동작합니다.

// <div id="ele1" onclick="alert('ele1')">
//     <em><code>EM</code>을 클릭했는데도 <code>DIV</code>에 할당한 핸들러가 동작합니다.</em>
// </div>

// 이상하지 않나요? <em> 을 클릭했는데 왜 <div> 에 할당한 핸들러가 동작할까요?


// 버블링

// 버블링(bubbling)의 원리는 간단합니다.

// 한 요소에 이벤트가 발생하면, 이 요소에 할당된 핸들러가 동작하고, 이어서 부모 요소의 핸들러가 동작합니다.
// 가장 최상단의 조상 요소를 만날 때까지 이 과정이 반복되면서 요소 각각에 할당된 핸들러가 동작합니다.

// 3개 요소가 form > div > p 형태로 중첩된 구조를 살펴봅시다. 요소 각각에 핸들러가 할당되어 있습니다.

// <form onclick="alert('form')">
//     <div onclick="alert('div')">
//         <p onclick="alert('p')">feaw</p>
//     </div>
// </form>

// 가장 안쪽의 <p> 를 클릭하면 순서대로 다음과 같은 일이 벌어집니다.

// 1. <p> 에 할당된 onclick 핸들러가 동작합니다.
// 2. 바깥의 <div> 에 할당된 핸들러가 동작합니다.
// 3. 그 바깥의 <form> 에 할당된 핸들러가 동작합니다.
// 4. document 객체를 만날 때까지, 각 요소에 할당된 onclick 핸들러가 동작합니다.

// 이런 동작 방식 때문에 <p> 요소를 클릭하면 p -> div -> form 순서로 3개의 얼럿 창이 뜨는것이죠.
// 이런 흐름을 '이벤트 버블링' 이라고 부릅니다.
// 이벤트가 제일 깊은 곳에 있는 요소에서 시작해 부모 요소를 거슬러 올라가며 발생하는 모양이 마치 물속 거품(bubble) 과 닮았기 때문입니다.


// 거의 모든 이벤트는 버블링 됩니다.

// 키워드는 '거의' 입니다.
// focus 이벤트와 같이 버블링 되지 않는 이벤트도 있습니다.
// 버블링 되지 않는 이벤트의 종류에 대해선 조금 후에 알아보겠습니다.
// 몆몆 이벤트를 제외하곤 대부분의 이벤트는 버블링 됩니다.


// event.target

// 부모 요소의 핸들러는 이벤트가 정확히 어디서 발생했는지 등에 대한 자세한 정보를 얻을 수 있습니다.
// 이벤트가 발생한 가장 안쪽의 요소는 타깃(target)요소라고 불리고, event.target 을 사용해 접근할 수 있습니다.

// event.target 과 this(= event.currentTarget) 는 다음과 같은 차이점이 있습니다.

// 1. event.target 은 실제 이벤트가 시작된 타깃 요소입니다. 버블링이 진행되어도 변하지 않습니다.
// 2. this 는 현재 요소로, 현재 실행 중인 핸들러가 할당된 요소를 참조합니다.

document.querySelector('#ele3').addEventListener('click', eventHandler1);
document.querySelector('#ele4').addEventListener('click', eventHandler1);
document.querySelector('#ele5').addEventListener('click', eventHandler1);

function eventHandler1(e) {
    console.log(`currentTarget(this) : ${this}`, `target : ${e.target}`);
}


// 버블링 중단하기

// 이벤트 버블링은 타깃 이벤트에서 시작해서 <html> 요소를 거쳐 document 객체를 만날 때까지 각 노드에서 모두 발생합니다.
// 몆몆 이벤트는 window 객체까지 거슬러 올라가기도 합니다.
// 이 때도 모든 핸들러가 호출됩니다.

// 그런데 핸들러에게 이벤트를 완전히 처리하고 난 후 버블링을 중단하도록 명령할 수도 있습니다.
// 이벤트 객체의 메서드인 event.stopPropagation() 을 사용하면 됩니다.

function eventHandler2(e) {
    console.log(`currentTarget(this) : ${this}`, `target : ${e.target}`);
    e.stopPropagation();
}

document.querySelector('#ele5').removeEventListener('click', eventHandler1);
document.querySelector('#ele5').addEventListener('click', eventHandler2);


// event.stopImmediatePropagation()

// 한 요소의 특정 이벤트를 처리하는 핸들러가 여러 개인 상황에서, 핸들러 중 하나가 버블링을 멈추더라도 나머지 핸들러는 여전히 동작합니다.
// event.stopPropagation() 은 위쪽으로 일어나는 버블링은 막아주지만, 다른 핸들러들이 동작하는 건 막지 못합니다.
// 버블링을 멈추고, 요소에 할당된 다른 핸들러의 동작도 막으려면
// event.stopImmediatePropagation() 을 사용해야 합니다.
// 이 메서드를 사용하면 요소에 할당된 특정 이벤트를 처리하는 핸들러 모두가 동작하지 않습니다.



// 꼭 필요한 경우를 제외하곤 버블링을 막지 마세요.

// 버블링은 유용합니다.
// 버블링을 꼭 멈춰야 하는 명백한 상황이 아니라면 버블링을 막지 마세요.
// 아키텍처를 잘 고려해 진짜 막아야 하는 상황에서만 버블링을 막으세요.

// event.stopPropagation() 은 추후 문제가 될 수 있는 상황을 만들어낼 수 있습니다.

// 문제가 발생할만한 시나리오를 살펴봅시다.

// 1. 중첩 메뉴를 만들었다 가정합시다.
// 각 서브메뉴에 해당하는 요소에서 클릭 이벤트를 처리하도록 하고, 상위 메뉴의 클릭 이벤트 핸들러는 동작하지 않도록 stopPropagation 을 적용합시다.

// 2. 사람들이 페이지에서 어디를 클릭했는지 등의 행동 패턴을 분석하기 위해 window 내에서 발생하는 클릭 이벤트 전부를 감지하기로 결정합니다.
// 일부 분석 시스템은 그렇게 분석합니다.
// 이런 분석 시스템의 코드는 클릭 이벤트를 감지하기 위해 document.addEventListener('click'...) 을 사용합니다.

// 3. stopPropagation 로 버블링을 막아놓은 영역에선 분석 시스템의 코드가 동작하지 않기 때문에, 분석이 제대로 되지 않습니다.
// 안타깝게도 stopPropagation 을 사용한 영역은 죽은 영역(dead zone)이 되어버립니다.

// 이벤트 버블링을 막아야 하는 경우는 거의 없습니다.
// 버블링을 막아야 해결되는 문제라면 커스텀 이벤트등을 사용해 문제를 해결할 수 있습니다.
// 커스텀 이벤트 사용 방법은 추후 다루겠습니다.
// 핸들러의 event 객체에 데이터를 저장해 다른 핸들러에서 읽을 수 있게 하면, 아래쪽에서 무슨 일이 일어나는지를 부모 요소의 핸들러에게 전달할 수 있으므로, 이 방법으로도 이벤트 버블링을 통제할 수 있습니다.



// 캡처링

// 이벤트엔 버블링 이외에도 캡처링(capturing) 이라는 흐름이 존재합니다.
// 실제 코드에서 자주 쓰이진 않지만, 종종 유용한 경우가 있으므로 알아봅시다.

// 표준 DOM 이벤트에서 정의한 이벤트 흐름엔 3가지 단계가 있습니다.

// 1. 캡처링 단계 - 이벤트가 하위 요소로 전파되는 단계
// 2. 타깃 단계 - 이벤트가 실제 타깃 요소로 전달되는 단계
// 3. 버블링 단계 - 이벤트가 상위 요소로 전파되는 단계

// 테이블 안의 td 를 클릭하면 어떻게 이벤트가 흐르는지 아래 그림을 보고 이해해 봅시다.



// <td> 를 클릭하면 이벤트가 최상위 조상에서 시작해 아래로 전파되고(캡처링 단계)
// 이벤트 타깃 요소에 도착해서 실행된 후(타깃 단계)
// 다시 위로 전파됩니다.(버블링 단계)

// 이런 과정을 통해 요소에 할당된 이벤트 핸들러가 호출됩니다.

// 캡처링 단계를 이용해야 하는 경우는 흔치 않기 때문에, 이전까진 주로 버블링만 설명했습니다.
// 캡처링에 관한 코드를 발견하는 일은 거의 없을 겁니다.

// on<event> 프로퍼티나 HTML 속성, addEventListener(event, handler) 를 이용해 할당된 핸들러는 캡처링에 대해 전혀 알 수 없습니다.
// 이 핸들러들은 두 번째 혹은 세 번째 단계의 이벤트 흐름(타깃 단계와 버블링 단계)에서만 동작합니다.

// 캡처링 단계에서 이벤트를 잡아내려면 addEventListener 의 capture 옵션을 true 로 설정해야 합니다.

// ele.addEventListener(..., {capture: true}); 
// ele.addEventListener(..., true); // {capture: true} 대신, true 를 써줘도 됩니다.

// capture 옵션은 두 가지 값을 가질 수 있습니다.
// false 이면(default 값) 핸들러는 버블링 단계에서 동작합니다.
// true 이면 핸들러는 캡처링 단계에서 동작합니다.

// 공식적으론 총 3개의 이벤트 흐름이 있지만, 이벤트가 실제 타깃 요소에 전달되는 단계인 타깃 단계는 별도로 처리되지 않습니다.
// 캡처링과 버블링 단계의 핸들러는 타깃 단계에서 트리거 됩니다.
// 핸들러를 제거할 때 removeEventListener 가 같은 단계에 있어야 합니다.
// addEventListener(..., true) 로 핸들러를 할당해 줬다면, 핸들러를 지울 때 removeEventListener(...,true) 를 사용해 지워야합니다.
// 같은 단계에 있어야 핸들러가 지워집니다.


</script>