<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
    <!-- 주석 노드 -->
    텍스트 노드
    <span id="ele1">test1</span>

    <span id="ele2"></span>
    <span id="ele3"></span>
</body>
</html>

<script>

// 주요 노드 프로퍼티

// DOM 노드에 대해 좀 더 알아봅시다.
// 이번 챕터에서 DOM 노드란 무엇인지, DOM 노드의 주요 프로퍼티는 무엇이 있는지 학습하겠습니다.

// DOM 노드 클래스
// DOM 노드는 종류에 따라 각각 다른 프로퍼티를 지원합니다.
// 태그 <a> 에 대응하는 요소 노드엔 링크 관련된 프로퍼티를, <input> 에 대응하는 요소 노드엔 입력 관련 프로퍼티를 제공하죠.
// 텍스트 노드는 요소 노드와 다른 프로퍼티를 지원하는 것은 말할 필요도 없습니다.
// 그런데 모든 DOM 노드는 공통 조상으로부터 만들어지기 때문에 노드 종류는 다르지만, 모든 DOM 노드는 공통된 프로퍼티와 메서드를 지원합니다.

// DOM 노드는 종류에 따라 대응하는 내장 클래스가 다릅니다.

// 계층 구조 꼭대기엔 EventTarget 이 있는데, Node 는 EventTarget 을, 다른 DOM 노드들은 Node 클래스를 상속받습니다.

// 이런 관계를 그림으로 나타내면 다음과 같습니다.



// 각 클래스는 다음과 같은 특징을 지닙니다.

// EventTarget : 루트에 있는 '추상(abstract)' 클래스로, 이 클래스에 대응하는 객체는 실제로 만들어지지 않습니다.
// EventTarget 이 모든 DOM 노드의 베이스에 있기 때문에 DOM 노드에서 이벤트를 사용할 수 있습니다.

// Node : 역시 추상 클래스로, DOM 노드의 베이스 역할을 합니다.
// getter 역할을 하는 parentNode, nextSibiling, childNodes 등의 주요 트리 탐색 기능을 제공합니다.
// Node 클래스의 객체는 절대 생성되지 않습니다.
// 하지만 이 클래스를 상속받는 클래스는 여럿 있습니다.
// 텍스트 노드를 위한 Text 클래스와 요소 노드를 위한 Element 클래스, 주석 노드를 위한 Comment 클래스는 Node 클래스를 상속받습니다.

// Element : DOM 요소를 위한 베이스 클래스입니다.
// nextElementSibling, children 이나 getElementsByTagName, querySelector 같이 요소 전용 탐색을 도와주는 프로퍼티나 메서드가 이를 기반으로 합니다.
// 브라우저는 HTML 뿐만 아니라 XML, SVG 도 지원하는데 Element 클래스는 이와 관련된 SVGElement, XMLElement, HTMLElement 클래스의 베이스 역할을 합니다.

// HTMLElement : HTML 요소 노드의 베이스 역할을 하는 클래스입니다.
// 아래 나열한 클래스 들은 실제 HTML 요소에 대응하고 HTMLElement 를 상속받습니다.

// HTMLInputElement : <input> 요소에 대응하는 클래스
// HTMLBodyElement : <body> 요소에 대응하는 클래스
// HTMLAnchorElement : <a> 요소에 대응하는 클래스

// 이외에도 다른 클래스가 많은데, 각 태그에 해당하는 클래스는 고유한 프로퍼티와 메서드를 지원합니다.

// 이렇게 특정 노드에서 사용할 수 있는 프로퍼티와 메서드는 상속을 기반으로 결정됩니다.

// <input> 요소에 대응하는 DOM 객체를 예로 들어봅시다.
// 이 객체는 HTMLInputElement 클래스를 기반으로 만들어집니다.
// 객체엔 아래에 나열한 클래스에서 상속받은 프로퍼티와 메서드가 있을 겁니다.

// HTMLInputElement : 입력 관련 프로퍼티를 제공하는 클래스
// HTMLElement : HTML 요소 메서드와 getter, setter를 제공하는 클래스
// Element : 요소 노드 메서드를 제공하는 클래스
// Node : 공통 DOM 노드 프로퍼티를 제공하는 클래스
// EventTarget : 이벤트 관련 기능을 제공하는 클래스
// Object : hasOwnProperty같이 ‘일반 객체’ 메서드를 제공하는 클래스

// 우리는 앞서 객체는 constructor 프로퍼티를 가진다는 걸 배운 바 있습니다.
// 이런 특징을 이용하면 DOM 노드 클래스 이름을 확인할 수 있습니다.
// constructor 프로퍼티는 클래스 생성자를 참조하고 이름은 constructor.name 에 저장되어있다는 점을 이요하면 되죠.

console.log(document.body.constructor.name);
console.log(document.body.toString());

// 상속 여부는 instanceof 를 사용해 확인할 수 있습니다.

console.log('document.body instanceof HTMLBodyElement', document.body instanceof HTMLBodyElement);
console.log('document.body instanceof HTMLElement', document.body instanceof HTMLElement);
console.log('document.body instanceof Element', document.body instanceof Element);
console.log('document.body instanceof Node', document.body instanceof Node);
console.log('document.body instanceof EventTarget', document.body instanceof EventTarget);

// 지금까지 살펴본 바와 같이 DOM 노드는 프로토타입 기반으로 상속 관계를 갖는 일반 자바스크립트 객체입니다.

// 브라우저 콘솔에 console.dir(ele) 를 입력하면 이런 관계를 쉽게 확인할 수 있습니다.

console.dir(document.body);


// nodeType 프로퍼티

// nodeType 프로퍼티는 DOM 노드의 타입을 알아내고자 할 때 쓰이는 구식 프로퍼티입니다.
// 각 노드 타입은 상숫값을 가집니다.

// ele.nodeType == 1 : 요소 노드
// ele.nodeType == 3 : 텍스트 노드
// ele.nodeType == 9 : 문서 객체

console.log('document.body.nodeType', document.body.nodeType);

// 모던 자바스크립트에선 노드의 타입을 instanceof 나 클래스 기반의 테스트를 이용해 확인하는데, 가끔 nodeType 을 쓰는게 간단할 때도 있습니다.
// nodeType 은 확인하는데만 쓰일 수 있고 바꾸지는 못합니다.


// nodeName 과 tagName 으로 태그 이름 확인하기
// nodeName 이나 tagName 프로퍼티를 사용하면 DOM 노드의 태그 이름을 알아낼 수 있습니다.

console.log(document.body.nodeName);
console.log(document.body.tagName);

// tagName 과 nodeName 의 차이는 없는 걸까요?
// 물론 있습니다. 미묘하지만 이름에서 그 차이를 유추할 수 있죠.

// tagName 프로퍼티는 요소 노드에만 존재합3니다.
// nodeName 은 모든 Node 에 있습니다.
// - 요소 노드를 대상으로 호출하면 tagName 과 같은 역할을 합니다.
// - 텍스트 노드, 주석 노드 등에선 노드 타입을 나타내는 문자열을 반환합니다.

// nodeName 은 모든 노드에서 지원되지만, tagName 은 Element 클래스로부터 유래되었기 때문에 요소 노드에서만 지원됩니다.

// document 와 주석 노드를 사용해 tagName 과 nodeName 의 차이점을 확인해 봅시다.

let commentEle = document.querySelector('section.body-section').childNodes[15];

console.log(commentEle.nodeName); // #comment
console.log(commentEle.tagName); // undefined

// 요소 노드만 다루고 있다면 tagName, nodeName 에는 차이가 없으므로 둘 다 사용할 수 있습니다.


// 태그 이름은 XML 모드를 제외하고 항상 대문자입니다.

// 브라우저에서 HTML 과 XML 을 처리하는 모드는 다릅니다.
// 웹페이지는 대개 HTML 모드로 처리됩니다.
// 헤더가 Content-Type: application/xml+xhtml 인 XML 문서를 받으면 XML 모드로 문서를 처리합니다.
// HTML 모드에선 tagName 과 nodeName 이 모두 대문자로 변경됩니다.
// <body> 이든 <BoDy> 이든 BODY 가 되죠.
// XML 모드에선 케이스가 '그대로' 유지됩니다.
// XML 모드는 요즘엔 거의 사용되지 않습니다.


// innerHTML 로 내용 조작하기

// innerHTML 프로퍼티를 사용하면 요소 안의 HTML을 문자열 형태로 받아올 수 있습니다.
// 요소 안 HTML 을 수정하는 것도 가능합니다. innerHTML 은 페이지를 수정하는 데 쓰이는 강력한 방법의 하나입니다.

console.log(document.querySelector('#ele1').innerHTML);
document.querySelector('#ele1').innerHTML = 'test2';
console.log(document.querySelector('#ele1').innerHTML);

// 문법이 틀린 HTML을 넣으면 브라우저가 자동으로 고쳐줍니다.
document.querySelector('#ele1').innerHTML = '<b>test2';
console.log(document.querySelector('#ele1').innerHTML);

// innerHTML 을 사용해 문서에 <script> 태그를 삽입하면 해당 태그는 HTML 의 일부가 되긴 하지만 실행은 되지 않습니다.

// innerHTMLK += 사용 시 주의점

// ele.innerHTML += '추가 html' 을 사용하면 요소에 HTML 을 추가할 수 있습니다.

document.querySelector('#ele1').innerHTML += '<b>test3</b>';
console.log(document.querySelector('#ele1').innerHTML);

// 그런데 innerHTML += 는 추가가 아니라 내용을 덮어쓰기 때문에 주의해서 사용해야 합니다.

// 즉 innerHTML += 는 아래와 같은 일을 합니다.
// 1. 기존 내용 삭제
// 2. 기존 내용과 새로운 내용을 합친 새로운 내용을 씀

// 기존 내용이 완전히 삭제된 후 밑바닥부터 다시 내용이 쓰여지기 때문에 이미지 등의 리소스 전부가 다시 로딩됩니다.
// 리소스 전부가 다시 로딩되기 때문에 버벅임이 생기거나 바인딩된 이벤트가 해제되는 부작용 사례가 생깁니다.
// innerHTML 말고 HTML 을 추가하는 방법을 사용하면 이런 부작용 없이 원하는 HTML 을 추가할 수 있는데 이 방법은 곧 배우도록 하겠습니다.

// outerHTML 로 요소의 전체 HTML 보기

// outerHTML 프로퍼티엔 요소 전체 HTML 이 담겨있습니다.
// outerHTML 은 innerHTML 에 요소 자체를 더한 것이라고 생각하시면 됩니다.

console.log(document.querySelector('#ele1').outerHTML);

// innerHTML 과 달리 outerHTML 을 사용해서 HTML 을 쓸땐 요소 전체가 바뀌지 않습니다.
// 대신 outerHTMLK 은 DOM 안의 요소를 교체합니다.

// 네. 뭔가 이상하게 들리실 겁니다.
// 실제로도 이상하고요.
// 그럴 것을 예상하고 구체적인 예시를 준비해 놓았습니다.

let ele2 = document.querySelector('#ele1');
ele2.outerHTML = '<div id="ele1">test5<h1>test6</h1></div>';
console.log(ele2.outerHTML); // span

// 이런 결과가 나타난 이유는 outerHTML 에 하는 할당 연산이 DOM 요소를 수정하지 않기 때문입니다.
// 할당 연산은 요소를 DOM 에서 제거하고 새로운 HTML 조각을 넣습니다.

// 즉 ele.outerHTML = ... 은 아래와 같은 일을 합니다.
// 1. 문서에서 기존 ele 를 삭제
// 2. 새로운 HTML 조각인 ele2 를 삭제 후 생긴 공간에 삽입
// 3. ele 엔 여전히 기존 값이 저장되어 있고 새로운 HTML 조각은 어디에도 저장되어있지 않음

// outerHTML 의 이런 동작 방식 때문에 outerHTML 을 사용할 땐 실수 할 여지가 많습니다.
// div.outerHTML 을 수정한 후 div 에 새로운 내용이 들어갔다고 착각하며 작업하는 경우가 많죠.
// 정리하자면 이렇습니다.
// innerHTML 은 div 를 수정하지만 outerHTML 은 div 를 수정하지 않습니다.

// 그렇기 때문에 ele.outerHTML 에 무언가를 쓸 떄는 ele 이 수정되지 않는다는 점을 꼭 명심하고 있어야 합니다.
// 할당받은 HTML 은 ele 이 있던 공간에 들어갑니다.
// 새롭게 만들어진 요소를 참조하려면 DOM 쿼리 메서드를 사용합시다.


// nodeValue/data 로 텍스트 노드 내용 조작하기

// innerHTML 프로퍼티는 요소 노드에만 사용할 수 있습니다.

// 텍스트 노드 같은 다른 타입의 노드에는 innerHTML 과 유사한 역할을 해주는 프로퍼티인 nodeValue 와 data 를 사용해야 합니다.
// 이 두 프로퍼티는 아주 유사하고 일무에서도 구분 없이 쓰긴 하지만 명세서상에 작은 차이가 있긴 합니다만 data 가 좀 더 짧기 때문에 여기선 data 를 사용하겠습니다.

let commentEle2 = document.querySelector('section.body-section').childNodes[15];
let textEle1 = document.querySelector('section.body-section').childNodes[16];

console.log(commentEle2.data);
console.log(textEle1.data);

// 그런데 이쯤되면 이런 의문이 들 수 있습니다.
// 텍스트 노드의 내용을 읽거나 수정하는 일은 일어날 법 한데 주석 노드는 왜 이런 기능이 필요한건지 라는 의문이죠.

// 개발자들은 종종 아래와 같은 방식으로 정보나 지시사항을 HTML 에 삽입합니다.

// <!-- if isAdmin -->
//   <div>관리자로 로그인하였습니다!</div>
// <!-- /if -->

// 이럴 때 data 프로퍼티 기능을 사용해 주석 노드의 내용을 읽고 삽입된 지시사항을 처리하면 유용합니다.



// textContent 로 순수한 텍스트만

// textContent 를 사용하면 요소 내의 텍스트에 접근할 수 있습니다.
// 태그는 제외하고 오로지 텍스트만 추출할수 있죠.

let ele3 = document.querySelector('#ele1');
console.log(ele3.textContent);

// 그런데 실무에선 텍스트 읽기를 단독으로 쓰는 경우는 흔치 않습니다.

// textContent 를 사용하면 텍스트를 안전한 방법으로 쓸 수 있기 때문에 실무에선 textContent 를 쓰기 용으로 유용하게 사용합니다.

// 사용자가 입력한 임의의 문자열을 다시 출력해주는 경우를 생각해봅시다.
// 1. innerHTML 을 사용하면 사용자가 입력한 문자열이 HTML 형태로 태그와 함께 저장됩니다.
// 2. textContent 를 사용하면 사용자가 입력한 문자열이 순수 텍스트 형태로 저장되기 때문에 태그를 구성하는 특수문자들이 문자열로 처리됩니다.

document.querySelector('#ele2').innerHTML = '<div>test1</div>';
// HTML 형태로 저장됩니다.

document.querySelector('#ele3').textContent = '<div>test1</div>';
// 텍스트 형태로 저장됩니다.

// 개발을 하다보면 사용자의 입력값을 받아 처리해야 하는 경우가 많습니다.
// 이때 사용자가 입력한 값은 텍스트로 처리되어야 합니다.
// 예상치 못한 HTML 이 사이트에 침투하는 것을 막으려면 textContent 를 사용합시다.


// hidden 프로퍼티

// hidden 속성과 hidden 프로퍼티는 요소를 보여줄지 말지 지정할 때 사용할 수 있습니다.
// hidden 은 HTML 안에서 쓸 수도 있고 자바스크립트에서도 쓸 수 있습니다.

// <div id="ele1" hidden>HTML의 hidden 속성 사용하기</div>
document.querySelector('#ele1').hidden = true;

// hidden 은 기술적으로 style="display:none" 와 동일합니다. 짧다는 점만 다르죠.
// hidden 을 사용해 요소를 깜빡이게 해봅시다.

let hiddenEle = document.querySelector('#ele1');

// setInterval(() => hiddenEle.hidden ? hiddenEle.hidden = false : hiddenEle.hidden = true, 1000);


// 기타 프로퍼티

// 지금까지 소개한 프로퍼티 외에도 DOM 요소엔 다양한 프로퍼티가 있는데, 클래스 마다 특징적인 프로퍼티 몆 가지를 소개해드리겠습니다.

// value : <input> 과 <select>, <textarea> 의 값이 저장됩니다. 대응하는 클래스는 HTMLInputElement, HTMLSelectElement 등입니다.
// href : <a href="..."> 의 href 속성 값이 저장됩니다. 대응하는 클래스는 HTMLAnchorElement 입니다.
// id : id 속성 값이 저장됩니다. 모든 요소 노드에서 사용할 수 있으며, 대응하는 클래스는 HTMLElement 입니다.
// 기타 등등

// 대부분의 표준 HTML 속성은 그에 대응하는 DOM 프로퍼티를 가지고 있는데, 위 예시와 같은 방식으로 프로퍼티에 접근할 수 있습니다.
// 특정 클래스에서 지원하는 프로퍼티 전체를 보고 싶다면 명세서를 읽어보면 됩니다.
// 예를 들어 HTMLInputElement에서 지원하는 프로퍼티 목록은 https://html.spec.whatwg.org/#htmlinputelement에서 찾아볼 수 있습니다.
// 명세서를 읽지 않아도 prototype 을 통해 목록을 확인할 수 있습니다.

</script>