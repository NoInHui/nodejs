<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>

    <a href="/" onclick="return false">link1</a>
    <a href="/" onclick="event.preventDefault()">link2</a>
    <input onmousedown="console.log('mousedown'); return false;" onfocus="console.log('focus')" value="input1"/>
</body>
</html>

<script>

// 브라우저 기본 동작

// 상당수 이벤트는 발생 즉시 브라우저에 의해 특정 동작을 자동으로 수행합니다.

// 예시 : 
// 링크를 클릭하면 해당 URL 로 이동합니다.
// 폼 전송 버튼을 클릭하면 서버에 폼이 전송됩니다.
// 마우스 버튼을 누른 채로 글자 위에서 커서를 움직이면 글자가 선택됩니다.

// 그런데 어떨 때는 이런 브라우저 기본 동작 대신 자바스크립트를 사용해 직접 동작을 구현해야 하는 경우가 생깁니다.


// 브라우저 기본 동작 막기

// 브라우저 기본 동작을 취소할 수 있는 방법은 두 가지가 있습니다.

// 첫 번째 방법은 event 객체를 사용하는 것입니다. 이때 event 객체에 구현된 event.preventDefault() 메서드를 사용합니다.
// 핸들러가 addEventListener 가 아닌 on<event> 를 사용해 할당되었다면 false 를 반환하게 해 기본 동작을 막을 수도 있습니다.

// 아래 HTML 에선 링크를 클릭해도 해당 URL 로 이동하지 않습니다.

// <a href="/" onclick="return false">link1</a>
// <a href="/" onclick="event.preventDefault()">link2</a>

// 핸들러에서 false 를 반환하는 것은 예외 상황입니다.
// 이벤트 핸들러에서 반환된 값은 대개 무시됩니다.
// 하나의 예외사항이 있는데 on<event> 를 사용해 할당한 핸들러에서 false 를 반환하는 것입니다.
// 이 외의 값들은 return 되어도 무시됩니다. true 역시 무시되죠.


// 후속 이벤트
// 어떤 이벤트들은 순차적으로 발생합니다.
// 이런 이벤트들은 첫 번째 이벤트를 막으면 두 번째 이벤트가 일어나지 않습니다.
// <input onmousedown="console.log('mousedown'); return false;" onfocus="console.log('focus')" value="input1"/>
// 두번째 focus 이벤트가 발생하지 않는 이유는 mousedown 이벤트의 브라우저 기본 동작이 취소되었기 때문입니다.


// addEventListener 의 passive 옵션

// addEventListener 의 passive: true 옵션은 브라우저에게 preventDefault() 를 호출하지 않겠다고 알리는 역할을 합니다.
// 이 옵션은 왜 필요한 걸까요?
// 모바일 기기에는 사용자가 스크린에 손가락을 대고 움직일 때 발생하는 touchmove 와 같은 이벤트가 있습니다.
// 이런 이벤트는 기본적으로 스크롤링을 발생시킵니다.
// 그런데 핸들러의 preventDefault() 를 사용하면 스크롤링을 막을 수 있습니다.
// 브라우저는 스크롤링을 발생시키는 이벤트를 감지했을 때 먼저 모든 핸들러를 처리하는데, 이때 preventDefault 가 어디에서도 호출되지 않았다고 판단되면 그제야 스크롤링을 진행합니다.
// 이 과정에서 불필요한 지연이 생기고, 화면이 '덜덜 떨리는' 현상이 발생합니다.
// passive: true 옵션은 핸들러가 스크롤링을 취소하지 않을 것이라는 정보를 브라우저에게 알려주는 역할을 합니다.
// 이 정보를 바탕으로 브라우저는 화면을 최대한 자연스럽게 스크롤링 할 수 있게 하고 이벤트는 적절하게 처리됩니다.
// FireFox, Chrome 같은 몆몆 브라우저에서 touchstart 와 touchmover 이벤트의 passive 는 기본값이 true 입니다.


// event.defaultPrevented
// 기본 동작을 막는 경우 event.defaultPrevented 값이 true 이고, 그렇지 않은 경우는 false 입니다.



// 요약

// 각 이벤트에 대응하는 브라우저 기본 동작은 다음과 같습니다.

// mousedown - 마우스가 움직인 곳에서 선택을 시작합니다.
// <input type="checkbox"> 를 click - input 을 선택/선택해제 합니다.
// submit - 폼 안에서 <input type="submit"> 을 클릭하거나 Enter 를 누르면 이 이벤트가 발생하고, 브라우저는 폼을 서버로 전송합니다.
// keydown - 키를 누르면 텍스트 박스에 글자를 추가하거나 그 외의 다른 동작을 수행합니다.
// contextmenu - 마우스 오른쪽 버튼을 클릭하면 발생하는 이벤트로, 브라우저 컨텍스트 메뉴를 보여줍니다.
// 이 외의 다양한 기본 동작이 있습니다.

// 자바스크립트를 사용하면 기본동작을 명시적으로 막을 수 있습니다.

// event.preventDefault() 나 return false 를 사용하면 이벤트를 막을 수 있습니다.
// return false 를 사용하는 방법은 on<event> 를 통해 할당한 핸들러에서만 동작합니다.

// addEventListener 의 passive: true 옵션은 브라우제엑 기본동작을 막지 않을 것이라는 정보를 전달합니다.
// 이 옵션은 모바일에서 발생하는 touchstart 와 touchmove 를 다룰 때 유용합니다.
// 브라우저는 모든 핸들러를 처리하지 않아도 스크롤링을 시작할 수 있기 떄문입니다.

// 기본동작을 막은 경우 event.defaultPrevented 값이 true 이고 그렇지 않은 경우는 false 입니다.


// 기본 동작 막기를 너무 남용하지 마세요.

// 기본 동작을 막는 자바스크립트 코드를 추가하면 제약 없이 요소의 동작을 원하는 대로 바꿀 수 있습니다.
// 링크 <a> 를 버튼처럼 만들 수 있고, 버튼 <button> 을 다른 URL 로 이동시켜주는 링크처럼 동작하게 할수도 있습니다.
// 하지만 HTML 요소의 의미를 지키면서 동작을 바꿔야 합니다.
// <a> 는 페이지를 돌아다니는 동작을 해야하지 버튼처럼 동작해선 안 됩니다.
// 이렇게 요소가 가진 의미를 해치지 않으면서 코드를 작성하면 좋은 코드가 될 뿐만 아니라 접근성 측면에서도 도움이 됩니다.

// <a> 와 기본동작 막기를 조합한 코드를 구상할 때 주의할 것이 있습니다.
// 사용자는 브라우저 기본 동작을 사용해 마우스 우클릭 등의 방법으로 새 창에서 링크를 열수 있습니다.
// 이 기능은 인기가 많죠.
// 하지만 자바스크립트로 버튼을 조작해 링크처럼 동작하게 만들고 CSS 를 이용해 버튼을 링크처럼 꾸미더라도 브라우저에서 제공하는 <a> 관련 기능은 버튼에선 작동하지 않습니다.


</script>