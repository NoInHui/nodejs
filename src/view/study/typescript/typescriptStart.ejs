<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
    <script src="/script/typescript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// TypeScript for JavaScript Programmers

// 현대 프로그래밍 언어에서 Typescript 와 Javascript 의 관계는 다소 독특합니다.
// Typescript 는 Javascript 위에 레이어로서 자리잡고 있는데, Javascript 의 기능들을 제공하면서 그 위에 자체 레이어를 추가합니다.
// 이 레이어가 Typescript 타입 시스템입니다.

// JavaScript 는 이미 string, number, object, undefined 같은 원시 타입을 가지고 있지만, 전체 코드베이스에 일관되게 할당되어있는지 미리 확인해 주지 않습니다.
// Typescript 는 이 레이어로서 동작합니다.

// 이는 이미 존재하고 잘 동작하는 Javascript 코드는 동시에 Typescript 코드라는 의미지만, Typescript 의 타입 검사기는 사용자가 생각한 일과 Javascript 가 실제로 하는 일 사이의 불일치를 강조할 수 있습니다.

// 이 튜토리얼은 Typescript 가 추가하는 타입 시스템 언어 확장을 이해하는데 중점을 두고 타입 시스템에 대한 5분 개요를 제공합니다.



// 타입 추론 (Types by Inference)

// Typescript 는 Javascript 언어를 알고 있으며 대부분의 경우 타입을 생성해줄 것입니다.
// 예를 들어 변수를 생성하면서 동시에 특정 값에 할당하는 경우, Typescript 는 그 값을 해당 변수의 타입으로 사용할 것입니다.

let helloworld = 'Hello World';

// Javascript 가 동작하는 방식을 이해함으로써 Typescript 는 Javascript 코드를 받아들이면서 타입을 가지는 타입 시스템을 구축할 수 있습니다.
// 이는 코드에서 타입을 명시하기 위해 추가로 문자를 사용할  필요가 없는 타입 시스템을 제공합니다.
// 이것이 위의 예제에서 Typescript 가 helloworld 가 string 임을 알게 되는 방식입니다.

// Javascript 와 함께 VS Code 를 사용하고 작업을 할 때 편집기의 자동 완성 기능을 사용해왔을 것입니다.
// 이는 Typescript 에 필수불가결한 Javascript 에 대한 이해가 Javascript 작업을 개선하기 위해 내부적으로 사용되었기 때문입니다.



// 타입 정의하기 (Defining Types)

// Javascript 는 다양한 디자인 패턴을 가능하게 하는 동적 언어입니다.
// 몆몆 디자인 패턴은 자동으로 타입을 제공하기 힘들 수 있는데(동적 프로그래밍을 사용하고 있을 것이기 때문에) 이러한 경우 Typescript 는 Typescript 에게 타입이 무엇이 되어야 하는지 명시 가능한 Javascript 언어의 확장을 지원합니다.

// 다음은 name: string 과 id: number 를 포함하는 추론 타입을 가진 객체를 생성하는 예제입니다.

const user = {
    name: 'Hayes',
    id: 0
};

// 이 객체의 형태를 명시적으로 나타내기 위해서는 interface 로 선언합니다.

// interface User {
//     name: string;
//     id: number;
// }

</script>