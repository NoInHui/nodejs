<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 맵과 셋

// 지금까지 아래와 같은 복잡한 자료구조를 학습해 보았습니다.

// 객체 - 키가 있는 컬렉션을 저장함
// 배열 - 순서가 있는 컬렉션을 저장함

// 하지만 현실 세계를 반영하기엔 이 두 자료구조 만으로 부족해서 맵(Map) 과 셋(Set) 이 등종하게 되었습니다.

// 맵

// 맵(Map) 은 키가 있는 데이터를 저장한다는 점에서 객체와 유사합니다.
// 다만, 맵은 키에 다양한 자료형을 허용한다는 점에서 차이가 있습니다.

// 맵에는 다음과 같은 주요 메서드와 프로퍼티가 있습니다.

// let map = new Map() - 맵을 만듭니다.
// map.set(key, value) - key 를 이용해 value 를 저장합니다.
// map.get(key) - key 에 해당하는 값을 반환합니다. key 가 존재하지 않으면 undefined 를 반환합니다.
// map.has(key) - key 가 존재한다면 true, 존재하지 않으면 false 를 반환합니다.
// map.delete(key) - key 에 해당하는 값을 삭제합니다.
// map.clear() - 맵 안의 모든 요소를 제거합니다.
// map.size - 요소의 개수를 반환합니다.

let map1 = new Map();

map1.set('1', 'str1');
map1.set(1, 'num1');
map1.set(true, 'bool1');

console.log(map1);

// 맵은 키의 타입을 변환하지 않고 그대로 유지합니다.
console.log(map1.get('1'));
console.log(map1.get(1));
console.log(map1.get(true));

// map[key] 는 Map 을 쓰는 바른 방법이 아닙니다.

// map[key] = 2 로 값을 설정하는 것 같이 map[key] 를 사용할 수 있긴 합니다.
// 하지만 이 방법은 map 을 일반 객체처럼 취급하게 됩니다. 따라서 여러 제약이 생기게 되죠.
// map 을 사용할 땐 map 전용 메서드 set, get 등을 사용해야만 합니다.

// 맵은 키로 객체를 허용합니다.

let obj1 = {name: 'inhui'};
map1.set(obj1, 123);
console.log(map1);
console.log(map1.get(obj1));

// 객체를 키로 사용할 수 있다는 점은 맵의 가장 중요한 기능 중 하나입니다.
// 객체에는 문자열 키를 사용할 수 있습니다. 하지만 객체 키는 사용할 수 없습니다.

// 객체형 키를 객체에 써봅시다.

let obj2 = {};
obj2[obj1] = 1234;
console.log(obj2);
console.log(obj2[obj1]); // 가능한데? ...
console.log(obj2["[object Object]"]);

// obj2 는 객체이기 때문에 모든 키를 문자형으로 변환시킵니다.
// 이 과정에서 obj1은 문자형으로 변환되어 "[object Object]" 가 됩니다.


// 맵이 키를 비교하는 방식

// 맵은 SameValueZero 라 불리는 알고리즘을 사용해 값의 등가 여부를 확인합니다.
// 이 알고리즘은 일치 연산자 === 와 거의 유사하지만 NaN 과 NaN 을 같다고 취급하는 것에서 일치 연산자와 차이가 있습니다.
// 따라서 맵에선 NaN 도 키로 쓸 수 있습니다.
// 이 알고리즘은 수정하거나 커스터마이징 하는 것이 불가능합니다.


// 체이닝

// map.set 을 호출할 때마다 맵 자신이 반환됩니다.
// 이를 이용하면 map.set 을 체이닝 할 수 있습니다.

map1.set('2',2).set('3',3).set('4',4);
map1.set([1,2,3], '1234');
console.log(map1);

// 맵의 요소에 반복 작업하기

// 다음 세 가지 메서드를 사용해 맵의 각 요소에 반복 작업을 할 수 있습니다.

// map.keys() - 각 요소의 키를 모은 반복 가능한(iterable) 객체를 반환합니다.
// map.values() - 각 요소의 값을 모은 이터러블 객체를 반환합니다.
// map.entries() - 요소의 [키,값] 을 한 쌍으로 하는 이터러블 객체를 반환합니다. 이 이터러블 객체는 for..of 반복문의 기초로 쓰입니다.

console.log(map1.keys());
console.log(map1.values());
console.log(map1.entries());

for(let obj of map1.entries()) {
    console.log(obj);
}

for(let obj of map1) { // map1.entries() 와 동일합니다.
    console.log(obj);
}

// 맵은 삽입 순서를 기억합니다.

// 맵은 값이 삽입된 순서대로 순회를 실시합니다.
// 객체가 프로퍼티 순서를 기억하지 못하는 것과는 다릅니다.

// 여기에 더하여 맵은 배열과 유사하게 내장 메서드 forEach 도 지원합니다.

map1.forEach((value, key, map) => {
    console.log(map);
    console.log(`${key} : ${value}`);
});

// Object.entries : 객체를 맵으로 바꾸기

// 각 요소가 키-값 쌍인 배열이나 이터러블 객체를 초기화 용도로 맵에 전달해 새로운 맵을 만들 수 있습니다.

// 평범한 객체를 가지고 맵을 만들고 싶다면 내장 메서드 Object.entries(obj) 를 활용해야 합니다.
// 이 메서드는 객체의 키-값 쌍을 요소로 가지는 배열을 반환합니다.

let obj3 = {
    name: 'inhui',
    age: 30
};

let map2 = new Map(Object.entries(obj3));
console.log(map2);

// Object.entries 를 사용해 객체 obj 를 배열 [ ['name','inhui'], ['age', 30] ] 로 바꾸고 이 배열을 이용해 새로운 맵을 만들어보았습니다.


// Object.fromEntries : 맵을 객체로 바꾸기

// 방금까진 Object.entries(obj) 를 사용해 평범한 객체를 맵으로 바꾸는 방법에 대해 알아보았습니다.
// 이젠 이 반대인 맵을 객체로 바꾸는 방법에 대해 알아보겠습니다.
// Object.formEntries 를 사용하면 가능합니다.
// 이 메서드는 각 요소가 [키,값] 쌍인 배열을 객체로 바꿔줍니다.

let obj4 = Object.fromEntries(
    [
        [1,1],
        [2,2],
        [3,3],
    ]
);

console.log(obj4);

// 자료가 맵에 저장되어있는데, 서드파티 코드에서 자료를 객체형태로 넘겨받길 원할 때 이 방법을 사용할 수 있습니다.
let obj5 = Object.fromEntries(map2.entries());
console.log(obj5);

// map.entries() 를 호출하면 맵의 [키,값] 을 요소로 가지는 이터러블을 반환합니다.

let obj6 = Object.fromEntries(map2);
console.log(obj6);

// Object.fromEntries 는 인수로 이터러블 객체를 받기 때문에 짧게 줄인 코드도 이전 코드와 동일하게 동작합니다.
// 꼭 배열을 전달해줄 필요는 없습니다. 그리고 map에서의 일반적인 반복은 map.entries() 를 사용했을 때와 같은 키-값 쌍을 반환합니다.
// 따라서 map 과 동일한 키-값을 가진 일반 객체를 얻게 됩니다.



// 셋(set)

// 셋(set) 은 중복을 허용하지 않는 값을 모아놓은 특별한 컬렉션입니다.
// 셋에 키가 없는 값이 저장됩니다.

// 주요 메서드는 다음과 같습니다.

// new Set(iterable) - 셋을 만듭니다. 이터러블 객체를 전달받으면 그 안의 값을 복사해 셋에 넣어줍니다.
// set.add(value) - 값을 추가하고 셋 자신을 반환합니다.ㅣ
// set.delete(value) - 값을 제거합니다. 호출 시점에 셋 내 값이 있어서 제거에 성공하면 true, 아니면 false 를 반환합니다.
// set.has(value) - 셋 내 값이 존재하면 true, 아니면 false 를 반환합니다.
// set.clear() - 셋을 비웁니다.
// set.size - 셋에 몆 개의 값이 있는지 세줍니다.

// 셋 내에 동일한 값이 있다면 set.add(value) 를 아무리 많이 하더라도 아무런 반응이 없을 겁니다.
// 셋 내의 값에 중복이 없는 이유가 바로 이 때문이죠.

// 방문자 방명록을 만든다고 가정해 봅시다. 한 방문자가 여러 번 방문해도 방문자를 중복해서 기록하지 않겠다고 결정 내린 상황입니다.
// 즉, 한 방문자는 단 한번만 기록 되어야 합니다.

// 이때 적합한 자료구조가 바로 셋 입니다.

let set1 = new Set();

let obj7 = {name:'inhui1'};
let obj8 = {name:'inhui1'};

set1.add(obj7);
set1.add(obj8);

set1.add('inhui1');
set1.add('inhui1');

console.log(set1);

// 객체의 내부 값까지 중복 값 체크를 하는건 아님, 객체 그 자체의 중복만 체크함

// 셋 대신 배열을 사용하여 방문자 정보를 저장한 후, 중복 값 여부는 배열 메서드인 arr.find 를 이용해 확인할 수도 있습니다.
// 하지만 arr.find 는 배열 내 요소 전체를 뒤져 중복 값을 찾기 때문에, 셋 보다 성능 면에서 떨어집니다.
// 반면, 셋은 값의 유일무이함을 확인하는데 최적화되어있습니다.


// 셋의 값에 반복 작업하기

// for..of 나 forEach 를 사용하면 셋의 값을 대상으로 반복 작업을 수행할 수 있습니다.

let set2 = new Set(['4','2','3','1']);

for(let setVal of set2) {
    console.log(setVal);
}

// forEach 를 사용해도 동일하게 동작합니다.

set2.forEach((setVal, valueAgain, set) => {
    console.log(setVal, valueAgain, set);
});

// forEach 에 쓰인 콜백 함수는 세 개의 인수를 받는데, 첫 번째는 값, 두 번째도 같은 값인 valueAgain 을 받고 있습니다. 세 번째는 목표하는 객체(셋) 이고요.
// 동일한 값이 인수에 두 번 등장하고 있습니다.

// 이렇게 구현된 이유는 맵 과의 호환성 때문입니다.
// 맵의 forEach 에 쓰인 콜백이 세 개의 인수를 받을 떄를 위해 서죠.
// 이상해 보이겠지만 이렇게 구현해 놓았기 때문에 맵을 셋으로 혹은 셋을 맵으로 교체하기 쉽습니다.

// 셋에도 맵과 마찬가지로 반복 작업을 위한 메서드가 있습니다.

// set.keys() - 셋 내의 모든 값을 포함하는 이터러블 객체를 반환합니다.
// set.values() - set.keys 와 동일한 작업을 합니다. 맵과의 호환성을 위해 만들어진 메서드입니다.
// set.entries() - 셋 내의 각 값을 이용해 만든 [value, value] 배열을 포함하는 이터러블 객체를 반환합니다. 맵과의 호환성을 위해 만들어졌습니다.

// 요약

// 맵은 키가 있는 값이 저장된 컬렉션 입니다.

// 주요 메서드와 프로퍼티:

// new Map([iterable]) – 맵을 만듭니다. [key,value]쌍이 있는 iterable(예: 배열)을 선택적으로 넘길 수 있는데, 이때 넘긴 이터러블 객체는 맵 초기화에 사용됩니다.
// map.set(key, value) – 키를 이용해 값을 저장합니다.
// map.get(key) – 키에 해당하는 값을 반환합니다. key가 존재하지 않으면 undefined를 반환합니다.
// map.has(key) – 키가 있으면 true, 없으면 false를 반환합니다.
// map.delete(key) – 키에 해당하는 값을 삭제합니다.
// map.clear() – 맵 안의 모든 요소를 제거합니다.
// map.size – 요소의 개수를 반환합니다.

// 맵과 일반적인 객체의 차이점
// 1. 객체는 키를 문자열로만 저장하지만 맵은 키를 제약없이 저장할수있음(Object,Array,boolean,number 등)
// 2. 객체는 프로퍼티 순서를 기억하지 못하지만 맵은 값이 삽입된 순서대로 기억(순회)함

// 셋은 중복이 없는 값을 저장할 떄 쓰이는 컬렉션입니다.

// 주요 메서드와 프로퍼티:

// new Set([iterable]) – 셋을 만듭니다. iterable 객체를 선택적으로 전달받을 수 있는데(대개 배열을 전달받음), 이터러블 객체 안의 요소는 셋을 초기화하는데 쓰입니다.
// set.add(value) – 값을 추가하고 셋 자신을 반환합니다. 셋 내에 이미 value가 있는 경우 아무런 작업을 하지 않습니다.
// set.delete(value) – 값을 제거합니다. 호출 시점에 셋 내에 값이 있어서 제거에 성공하면 true, 아니면 false를 반환합니다.
// set.has(value) – 셋 내에 값이 존재하면 true, 아니면 false를 반환합니다.
// set.clear() – 셋을 비웁니다.
// set.size – 셋에 몇 개의 값이 있는지 세줍니다.

// Map 과 Set 에 반복 작업을 할 땐, 해당 컬렉션에 요소나 값을 추가한 순서대로 반복 작업이 수행됩니다.
// 따라서 이 두 컬렉션은 정렬이 되어있지 않다고 할 수 없습니다.
// 그렇지만 컬렉션 내 요소나 값을 재 정렬하거나 숫자를 이용해 특정 요소나 값을 가지고 오는 것은 불가능합니다.



</script>