<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 프라미스화

// 콜백을 받는 함수를 프라미스를 반환하는 함수로 바꾸는 것을 프라미스화(promisification) 라고 합니다.
// 기능을 구현하다 보면 콜백보다는 프라미스가 더 편리하기 때문에 콜백 기반 함수와 라이브러리를 프라미스를 반환하는 함수로 바꾸는 게 좋은 경우가 종종 생길 겁니다.
// 콜백 챕터에서 사용했던 loadScript(src, callback) 예시를 사용해 프라미스화에 대해 좀 더 자세히 알아봅시다.

function loadScript(src, callback) {
    let script = document.createElement('script');
    script.src = src;
    script.onload = () => callback(null, script);
    script.onerror = () => callback(new Error('error'));
    document.head.append(script);
}

// loadScript(src,callback) 를 이제 프라미스화해봅시다.
// 새로운 함수 loadScriptPromise(src) 는 loadScript 와 동일하게 동작하지만 callback 을 제외한 src 만 인수로 받아야 하고, 프라미스를 반환해야 합니다.

let loadScriptPromise1 = function(src) {
    return new Promise((resolve, reject) => {
        loadScript(src, (error, script) => {
            if(error) reject(error);
            else resolve(script);
        });
    })
}

loadScriptPromise1('/test/testScript1.js')
.then(result => {
    testScript1();
}).catch(e => console.log(e));

// 새롭게 구현한 loadScriptPromise 는 프라미스 기반 코드와 잘 융화됩니다.

// 예시에서 볼 수 있듯이, loadScriptPromise 는 기존 함수 loadScript 에 모든 일을 위임합니다.
// loadScript 의 콜백은 스크립트 로딩 상태에 따라 이행 혹은 거부 상태의 프라미스를 반환합니다.

// 그런데 실무에선 함수 하나가 아닌 여러 개의 함수를 프라미스화 해야 할 겁니다.
// 헬퍼 함수를 만드는 게 좋을 것 같네요.
// 프라미스화를 적용 할 함수 f 를 받고 래퍼 함수를 반환하는 함수 promisfy(f) 를 만들어 봅시다.

// promisfy(f) 가 반환하는 래퍼 함수는 위 예시와 동일하게 동작할 겁니다.
// 프라미스를 반환하고 호출을 기존 함수 f 에 전달하여 커스텀 콜백 내의 결과를 추적해야 하죠.

function promisfy1(f) {
    return function(...args) { // 래퍼 함수를 반환함
        return new Promise((resolve, reject) => {
            function callback(error, result) { // f 에 사용할 커스텀 콜백
                if(error) reject(error);
                else resolve(result);
            };

            args.push(callback); // 위에서 만든 커스텀 콜백을 함수 f 의 인수 끝에 추가합니다.
            f.call(this, ...args); // 기존 함수를 호출합니다.
        })
    }
}

let loadScriptPromise2 = promisfy1(loadScript);
loadScriptPromise2('/test/testScript2.js')
.then(result => {
    testScript2();
}).catch(e => console.log(e));

// 위 예시는 프라미스화 할 함수가 인수가 두개(err, result) 인 콜백을 받을 것이라 가정하고 작성되었습니다.

// 그런데 함수 f 가 두 개를 초과하는 인수를 가진 콜백, callback(err, res1, res2, res3 ... ) 을 받는다면 어떤 일이 발생할까요?
// 이런 경우를 대비하여 좀 더 진화한 헬퍼 함수, promisfy 를 만들어 봅시다.
// 새롭게 만든 함수를 promisfy(f, true) 형태로 호출하면, 프라미스 결과는 콜백의 성공 케이스(results) 를 담은 배열, [res1,res2,...] 이 됩니다.

function promisfy2(f, manyArgs = false) {
    return function(...args) {
        return new Promise((resolve, reject) => {
            function callback(err, ...results) {
                if(err) reject(err);
                else resolve(manyArgs ? results : results[0]);
            }

            args.push(callback);
            f.call(this, ...args);
        })
    }
}

// callback(result) 같이 err 이 없는 형태나 지금까지 언급하지 않은 형태의 이색적인 콜백도 있을 수 있는데, 이런 경우 헬퍼 함수를 사용하지 않고 직접 프라미스화 하면 됩니다.
// 본 챕터에서 설명한 헬퍼 함수보다 더 유용한 형태의 프라미스화를 도와주는 함수를 제공하는 모듈도 많습니다.
// es6-promisfy가 대표적인 예입니다. (https://github.com/mikehall314/es6-promisify)
// Node.js 에선 내장 함수 util.promisfy 를 사용해 프라미스화를 할 수 있습니다.

</script>