<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>
// 화살표 함수 기본

// 함수 표현식 보다 단순하고 간결한 문법으로 함수를 만들 수 있는 방법이 있습니다.
// 바로 화살표 함수(arrow function)를 사용하는 것입니다.
// 화살표 함수라는 이름은 문법의 생김새ㅑ를 차용해 지어졌습니다.

// let func = (arg1,arg2,...argN) => expression

// 이렇게 코드를 작성하면 인자 arg1..argN를 받는 함수 func 이 만들어집니다.
// 함수 func 는 화살표 => 우측의 표현식(expression)을 평가하고, 평가 결과를 반환합니다.

let sum1 = (a,b) => a+b;

let sum2 = function(a,b) {
    return a+b;
}

console.log('sum1(1,2)', sum1(1,2));
console.log('sum2(1,2)', sum2(1,2));

// 보시는 바와 같이 (a,b) => a+b 는 인수 a,b 를 받는 함수입니다. 실행되는 순간 표현식 a+b 를 평가하고 그 결과를 반환합니다.

// 인수가 하나밖에 없다면 인수를 감싸는 괄호를 생략할 수 있습니다.

let sum3 = n => n*2;
console.log('sum3(3)',sum3(3));

// 인수가 하나도 없을 땐 괄호를 비워놓으면 됩니다. 이 때 괄호는 생략할 수 없습니다.

let sum4 = () => console.log('sum4');
sum4();

// 화살표 함수는 함수 표현식과 같은 방법으로 사용할 수 있습니다.

let sum5 = true ? () => console.log('sum5', 'true') : () => console.log('sum5', 'false');
sum5();

// 화살표 함수를 처음 접하면 가독성이 떨어집니다. 익숙지 않기 때문입니다.
// 하지만 문법이 눈에 익기 시작하면 적응은 식은 죽 먹기가 됩니다.

// 함수 본문이 한 줄인 간단한 함수는 화살표 함수를 사용해서 만드는 게 편리합니다. 

// 본문이 여러 줄인 화살표 함수

// 위에서 소개해 드린 화살표 함수들은 => 왼쪽에 있는 인수를 이용해 => 오른쪽에 있는 표현식을 평가하는 함수들이었습니다.
// 그런데 평가해야 할 표현식이나 구문이 여러 개인 함수가 있을 수도 있습니다.
// 이 경우 역시 화살표 함수 문법을 사용해 함수를 만들 수 있습니다.
// 다만, 이때는 중괄호 안에 평가해야 할 코드를 넣어주어야 합니다.
// 그리고 return 지시자를 사용해 명시적 결괏값을 반환해 주어야 합니다.

let sum6 = (a,b) => {
    let result = a+b;
    return result;
}

console.log('sum6(6,9)', sum6(6,9));

// 결과적으로 화살표 함수의 오른쪽 expression 이 중괄호 {} 로 감싸져있으면 return 지시자를 넣어야하고 중괄호 {} 가 없다면 return 지시자를 안넣어도 자동으로 결과값이 반환됨

// 요약

// 화살표 함수는 한 줄인 함수를 작성할 때 유용합니다. 본문이 한 줄이 아니라면 다른 방법으로 화살표 함수를 작성해야 합니다.
// 1. 중괄호 없이 작성 : (...args) => expression : 화살표 오른쪽에 표현식을 둡니다. 함수는 이 표현식을 평가하고 평과 결과를 반환합니다.
// 2. 중괄호와 함께 작성 : (...args) => {body} : 본문이 여러 줄로 구성되어있다면 중괄호를 사용해야 합니다. 다만 이 경우는 반드시 return 지시자를 사용해 반환 값을 명기해 주어야 합니다.

</script>