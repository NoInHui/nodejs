<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>
// Promise Chaining

// 스크립트를 불러오는 것과 같이 순차적으로 처리해야 하는 비동기 작업이 여러 개 있다고 가정해 봅시다.
// 어떻게 해야 이런 상황을 코드로 풀어낼 수 있을까요?

// 프라미스를 사용하면 여러 가지 해결책을 만들 수 있습니다.
// 이번 챕터에선 프라미스 체이닝을 이용한 비동기 처리에 대해 다루도록 하겠습니다.

// 프라미스 체이닝은 아래와 같이 생겼습니다.

new Promise(function(resolve, reject) {
    setTimeout(() => resolve(1), 1000);
}).then(
    // function(result) {
    //     console.log(result);
    //     return result * 2;
    // }
    (result) => result * 2
).then(
    (result) => result * 2
).then(
    (result) => result * 2
).then(
    (result) => console.log('result', result)
);

// 프라미스 체이닝은 result 가 .then 핸들러의 체인을 통해 전달된다는 점에서 착안한 아이디어입니다.

// 위 예시는 아래와 같은 순서로 실행됩니다.

// 1. 1초 후 최초 프라미스가 이행됩니다.
// 2. 이후 첫번째 .then 핸들러가 호출됩니다.
// 3. 2에서 반환한 값은 다음 .then 핸들러에 전달됩니다.
// 4. 이런 과정이 계속 이어집니다.

// result 가 핸들러 체인을 전달됩니다.

// new Promise -> resolve(1) -> .then -> return 2 -> .then -> return 4 -> .then -> return 8

// 프라미스 체이닝이 가능한 이유는 promise.then 을 호출하면 프라미스가 반환되기 때문입니다.
// 반환된 프라미스엔 당연히 .then 을 호출할 수 있습니다.

// 한편 핸들러가 값을 반환할 때엔 이 값이 프라미스의 result 가 됩니다.
// 따라서 다음 .then 은 이 값을 이용해 호출됩니다.

// 초보자는 프라미스 하나에 .then 을 여러 개 추가한 후, 이를 체이닝이라고 착각하는 경우가 있습니다.
// 하지만 이는 체이닝이 아닙니다.

let promise1 = new Promise(function(resolve, reject) {
    setTimeout(() => resolve(1), 1000);
});

promise1.then(function(result) {
    console.log('promise1', result);
    return result*2;
});

promise1.then(function(result) {
    console.log('promise1', result);
    return result*2;
});

promise1.then(function(result) {
    console.log('promise1', result);
    return result*2;
});

// 예시의 프라미스는 하나인데 여기에 등록된 핸들러는 여러 개 입니다.
// 이 핸들러들은 result 를 순차적으로 전달하지 않고 독립적으로 처리합니다.

// 동일한 프라미스에 등록된 .then 모두는 동일한 결과를 받습니다.
// 따라서 위 예시를 실행하면 모두 1이 출력됩니다.
// 이런 식으로 한 프라미스에 여러 개의 핸들러를 등록해서 사용하는 경우는 거의 없습니다.
// 프라미스는 주로 체이닝을 해서 씁니다.


// 프라미스 반환하기

// .then(handler) 에 사용된 핸들러가 프라미스를 생성하거나 반환하는 경우도 있습니다.
// 이 경우 이어지는 핸들러는 프라미스가 처리될 때까지 기다리다가 처리가 완료되면 그 결과를 받습니다.

let promise3 = new Promise(function(resolve, reject) {
    setTimeout(() => resolve(1), 1000);
});

promise3.then(
    function(result) {
        console.log('promise3', result);

        return new Promise((resolve, reject) => {
            setTimeout(() => resolve(result * 2),  1000);
        });
    }
).then(
    function(result) {
        console.log('promise3', result);

        return new Promise((resolve, reject) => {
            setTimeout(() => resolve(result * 2),  1000);
        });
    }
).then(
    function(result) {
        console.log('promise3', result);
    }
);

// 예시에서 첫 번째 .then 은 1을 출력하고 new Promise() 를 반환합니다.
// 1초 후 이 프라미스가 이행되고 그 결과는 두번째 .then 으로 전달됩니다.
// 두번째 핸들러는 2를 출력하고 동일한 과정이 반복됩니다.

// 따라서 1,2,4 가 차례대로 출력됩니다. 다만 출력 사이에 1초 딜레이가 생깁니다.
// 이렇게 핸들러 안에서 프라미스를 반환하는 것도 비동기 작업 체이닝을 가능하게 해줍니다.

// loadScript 예시 개선하기

function loadScript(src) {
    return new Promise(function(resolve, reject) {
        let script = document.createElement('script');
        script.src = src;

        script.onload = () => resolve(script);
        script.onerror = (e) => reject(new Error(e));

        document.head.append(script);
    });
}

loadScript('/test/testScript1.js')
    .then(
        script => loadScript('/test/testScript2.js')
    ).then(
        script => {
            testScript1();
            testScript2();
        }
    );

// loadScript 를 호출할 때마다 프라미스가 반환되고 다음 .then 은 이 프라미스가 이행되었을 때 실행됩니다.
// 이후에 다음 스크립트를 로딩하기 위한 초기화가 진행됩니다.
// 스크립트는 이런 과정을 거쳐 순차적으로 로드됩니다.

// 체인에 더 많은 비동기 동작을 추가할 수도 있는데, 추가 작업이 많아져도 코드가 오른쪽으로 길어지지 않고 아래로만 증가해서 멸망의 피라미드가 만들어지지 않습니다.


// fetch 와 체이닝 함께 응용하기

// 프론트 단에선, 네트워크 요청 시 프라미스를 자주 사용합니다.
// 이와 관련된 예시를 살펴봅시다.

// 예시에선 메서드 fetch 를 사용해 원격 서버에서 사용자 정보를 가져오겠습니다.
// fetch 엔 다양한 선택 매개변수가 있는데 자세한 내용은 별도의 챕터에서 다루기로 하고, 여기선 기본 문법만 사용해 보겠습니다.

// let promise = fetch(url);

// 위 코드를 실행하면 url 에 네트워크 요청을 보내고 프라미스를 반환합니다.
// 원격 서버가 헤더와 함께 응답을 보내면, 프라미스는 response 객체와 함께 이행됩니다.
// 그런데 이때 response 전체가 완전히 다운로드되기 전에 프라미스는 이행 상태가 되어버립니다.

// 응답이 완전히 종료되고, 응답 전체를 읽으려면 메서드 response.text() 를 호출해야 합니다.
// response.text() 는 원격 서버에서 전송한 텍스트 전체가 다운로드되면, 이 텍스트를 result 값으로 갖는 이행된 프라미스를 반환합니다.

fetch('/test/fetchTest')
        .then(
            function(response) {
                console.log(response);
                // response.text().then(body => console.log(body))
                return response.text();
            }
        )
        .then(
            function(body) {
                console.log(body);
            }
        );

// 메서드 response.json() 를 쓰면 원격에서 받아온 데이터를 읽고 JSON 으로 파싱할 수 있습니다.
// 예시엔 이 메서드가 더 적합하므로 기존에 작성한 코드를 약간 변경해 보겠습니다.

fetch('/test/fetchTest')
            .then(
                response => response.json()
            ).then(
                body => console.log(body)
            );

// 요약

// .then 또는 .catch, .finally 의 핸들러가 프라미스를 반환하면, 나머지 체인은 프라미스가 처리될 때까지 대기합니다.
// 처리가 완료되면 프라미스의 result 가 다음 체인으로 전달됩니다.

// 이를 그림으로 나타내면 아래와 같습니다.

</script>