<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// JSON과 메서드

// 복잡한 객체를 다루고 있다고 가정해 봅시다.
// 네트워크를 통해 객체를 어딘가에 보내거나 로깅 목적으로 객체를 출력해야 한다면 객체를 문자열로 전환해야 할겁니다.

// 이때 전환된 문자열엔 원하는 정보가 있는 객체 프로퍼티 모두가 포함되어야만 합니다.
// 아래와 같은 메서드를 구현해 객체를 문자열로 전환해봅시다.

let obj1 = {
    name: 'inhui',
    age: 32,
    toString() {
        return `{name : "${this.name}", age: : ${this.age}}`
    }
}

console.log(obj1);

// 그런데 개발 과정에서 프로퍼티가 추가되거나 삭제,수정될 수 있습니다.
// 이렇게 되면 위에서 구현한 toString 을 매번 수정해야 하는데 이는 아주 고통스러운 작업이 될 겁니다.
// 프로퍼티에 반복문을 돌리는 방법을 대안으로 사용 할 수 있는데, 중첩 객체 등으로 인해 객체가 복잡한 경우 이를 문자열로 변경하는 건 까다로운 작업이라 이마저도 쉽지 않을 겁니다.

// 다행히 자바스크립트엔 이런 문제를 해결해주는 방법이 있습니다.
// 관련 기능이 이미 구현되어 있어서 우리가 직접 코드를 짤 필요가 없습니다.

// JSON.stringfy

// JSON (JavaScript Object Notation) 은 값이나 객체를 나타내주는 범용 포맷으로, RFC 4327 표준에 정의되어 있습니다.
// JSON 은 본래 자바스크립트에서 사용할 목적으로 만들어진 포맷입니다.
// 그런데 라이브러리를 사용하면 자바스크립트가 아닌 언어에서도 JSON 을 충분히 다룰 수 있어서, JSON 을 데이터 교롼 목적으로 사용하는 경우가 많습니다.
// 특히 클라이언트 측 언어가 자바스크립트일 때 말이죠.
// 서버 측 언어는 무엇이든 상관없습니다.

// 자바스크립트가 제공하는 JSON 관련 메서드는 아래와 같습니다.

// JSON.stringify : 객체를 JSON 으로 바꿔줍니다.
// JSON.parse : JSON 을 객체로 바꿔줍니다.

let obj2 = {
    name: 'inhui',
    age: 32,
    isAdmin: true,
    course: ['1','2','3'],
    wife: null
};

let json1 = JSON.stringify(obj2);
console.log(json1);
console.log(Object.getPrototypeOf(json1)); // String

// JSON.stringfy(obj) 를 호출하자 obj 가 문자열로 바뀌었습니다.

// 이렇게 변경된 문자열은 JSON 으로 인코딩된(JSON-encoded), 직렬화 처리된(serialized), 문자열로 변환된(stringfied), 결집된(marshalled) 객체라고 부릅니다.
// 객체는 이렇게 문자열로 변환된 후에야 비로소 네트워크를 통해 전송하거나 저장소에 저장할 수 있습니다.

// JSON 으로 인코딩된 객체는 일반 객체와 다른 특징을 보입니다.

// 문자열은 큰따움표로 감싸야 합니다. JSON에선 작은따옴표나 백틱을 사용할 수 없습니다.("name": "inhui")
// 객체 프로퍼티 이름은 큰따옴표로 감싸야 합니다.("age": 30)

// JSON.stringfy 는 객체뿐만 아니라 원시값에도 적용할 수 있습니다.

// 적용할 수 있는 자료형은 아래와 같습니다.

// 객체 {...}
// 배열 [...]
// 원시형 : 문자형,숫자형,불린형,null

console.log('JSON.stringify(1)', JSON.stringify(1));
console.log(`JSON.stringify('test')`, JSON.stringify('test'));
console.log('JSON.stringify(true)', JSON.stringify(true));
console.log('JSON.stringify([1,2,3])', JSON.stringify([1,2,3]));

// JSON 은 데이터 교환을 목적으로 만들어진 언어에 종속되지 않은 포맷입니다.
// 따라서 자바스크립트 특유의 객체 프로퍼티는 JSON.stringfy 가 처리할 수 없습니다.

// JSON.stringfy 호출 시 무시되는 프로퍼티는 아래와 같습니다.

// 함수 프로퍼티(메서드)
// 심볼형 프로퍼티(키가 심볼인 프로퍼티)
// 값이 undefined 인 프로퍼티

let obj3 = {
    sayHi() {
        console.log('sayHi')
    },
    [Symbol('id')] : 123,
    something: undefined
}

console.log('JSON.stringify(obj3)', JSON.stringify(obj3));

// 대개 이 프로퍼티들은 무시 되어도 괜찮습니다.
// 그런데 이들도 문자열에 포함시켜야 하는 경우가 생기곤 하는데 이에 대해선 아래에서 다루도록 하겠습니다.

// JSON.stringfy 의 장점 중 하나는 중첩 객체도 알아서 문자열로 바꿔준다는 점입니다.

let obj4 = {
    title: 'test title',
    obj: {
        name: 'inhui',
        age: 32,
    }
};

console.log('JSON.stringify(obj4)',  JSON.stringify(obj4));

// JSON.stringfy 를 사용할 때 주의하셔야 할 점이 하나 있습니다.
// 순환 참조가 있으면 원하는 대로 객체를 문자열로 바꾸는 게 불가능합니다.

let obj5 = {
    number: 32
};

let obj6 = {
    array: [1,2,3]
};

obj5.array = obj6;
obj6.obj = obj5;

try {
    console.log(JSON.stringify(obj5));
} catch(e) {
    console.log(e);
}

// obj5 와 obj6 은 서로 참조하고 있기 때문에 JSON 으로의 변환이 실패했습니다.



// replacer 로 원하는 프로퍼티만 직렬화하기

// JSON.stringfy 의 전체 문법은 아래와 같습니다.

// let json = JSON.stringify(value[, replacer, space])

// value : 인코딩 하려는 값
// replacer : JSON 으로 인코딩 하길 원하는 프로퍼티가 담긴 배열 또는 매핑 함수
// space : 서식 변경 목적으로 사용할 공백 문자 수

// 대다수의 경우 JSON.stringfy 엔 인수를 하나만 넘겨서 사용합니다.
// 그런데 순환 참조를 다뤄야 하는 경우 같이 전환 프로세스를 정교하게 조정하려면 두 번째 인수를 사용해야 합니다.

// JSON 으로 변환하길 원하는 프로퍼티가 담긴 배열을 두 번째 인수로 넘겨주면 이 프로퍼티들만 인코딩할 수 있습니다.

let obj7 = {
    number: 23
};

let obj8 = {
    title: 'title',
    participants: [{name: 'inhui'}, {name: 'alice'}],
    place: obj7,
};

obj7.occupiedBy = obj8;

console.log(JSON.stringify(obj8, ['title', 'participants']));

// 배열에 넣어준 프로퍼티가 잘 출력된 것을 확인할 수 있습니다.
// 그런데 배열에 name 을 넣지 않아서 출력된 문자열의 participants 가 텅 비어버렸네요.
// 규칙이 너무 까다로워서 발생한 문제입니다.

// 순환 참조를 발생시키는 프로퍼티 obj7.occupiedBy 만 제외하고 모든 프로퍼티를 배열에 넣어봅시다.

console.log(JSON.stringify(obj8, ['title', 'participants', 'place', 'name', 'number']));

// occupiedBy 를 제외한 모든 프로퍼티가 직렬화되었습니다.
// 그런데 배열이 좀 길다는 느낌이 듭니다.

// replacer 자리에 배열 대신 함수를 전달해 이 문제를 해결해 봅시다.
// replacer 에 전달되는 함수는 프로퍼티 (키,값) 쌍 전체를 대상으로 호출되는데, 반드시 기존 프로퍼티 값을 대신하여 사용할 값을 반환해야 합니다.
// 특정 프로퍼티를 직렬화에서 누락시키려면 반환 값을 undefined 로 만들면 됩니다.

// 아래 예시는 occupiedBy 를 제외한 모든 프로퍼티의 값을 변경 없이 '그대로' 직렬화하고 있습니다.
// occupiedBy 는 undefined 를 반환하게 해 직렬화에 포함하지 않은 것도 확인해 보시길 바랍니다.

console.log(
    JSON.stringify(obj8, function replacer(key, value) {
        console.log(key, value);
        return (key == 'occupiedBy') ? undefined : value;
    })
);

// replacer 함수가 중첩 객체와 배열의 요소까지 포함한 모든 키-값 쌍을 처리하고 있다는 점에 주목해주시기 바랍니다.
// replacer 함수는 재귀적으로 키-값 쌍을 처리하는데, 함수 내에서 this 는 현재 처리하고 있는 프로퍼티가 위치한 객체를 가리킵니다.

// 이렇게 replacer 함수를 사용하면 중첩 객체 등을 포함한 객체 전체에서 원하는 프로퍼티만 선택해 직렬화 할 수 있습니다.


// space 로 가독성 높이기

// JSON.stringfy(value, replacer, space) 의 세 번째 인수 space 는 가독성을 높이기 위해 중간에 삽입해 줄 공백 문자 수를 나타냅니다.

// 지금까진 space 없이 메서드를 호출했기 때문에 인코딩된 JSON 에 들여쓰기나 여분의 공백문자가 하나도 없었습니다.
// space 는 가독성을 높이기 위한 용도로 만들어졌기 때문에 단순 전달 목적이라면 space 없이 직렬화하는편입니다.

// 아래 예시처럼 space 에 2를 넘겨주면 자바스크립트는 중첩 객체를 별도의 줄에 출력해주고 공백 문자 두 개를 써 들여쓰기해 줍니다.

let obj9 = {
    name: 'inhui',
    age: 32,
    roles : {
        isAdmin : false,
        isEditor : true,
    }
};
console.log('JSON.stringify(obj9, null, 0)', JSON.stringify(obj9, null, 0));
console.log('JSON.stringify(obj9, null, 1)', JSON.stringify(obj9, null, 2));
console.log('JSON.stringify(obj9, null, 2)', JSON.stringify(obj9, null, 4));

// 이처럼 매개변수 space 는 로깅이나 가독성을 높이는 목적으로 사용됩니다.


// 커스텀 'toJSON'

// toString 을 사용해 객체를 문자형으로 변환시키는 것처럼, 객체에 toJSON 이라는 메서드가 구현되어 있으면 객체를 JSON 으로 바꿀 수 있을 겁니다.
// JSON.stringfy 는 이런 경우를 감지하고 toJSON 을 자동으로 호출해줍니다.

let obj10 = {
    number: 23
};

let obj11 = {
    title: 'test',
    date: new Date(),
    obj10,
};

console.log(obj11);

// Date 객체의 내장 메서드 toJSON 이 호출되면서 date 의 값이 문자열로 변환된 걸 확인할 수 있습니다.
// 이번엔 obj10 에 직접 커스텀 메서드 toJSON 을 추가해 봅시다. 그리고 어떻게 변경되는지 확인해 봅시다.

let obj12 = {
    number: 23,
    toJSON() {
        return this.number;
    }
};

let obj13 = {
    title: 'test',
    date: new Date(),
    obj10,
};

console.log(JSON.stringify(obj12));
console.log(JSON.stringify(obj13));

// 위와 같이 toJSON 은 JSON.stringfy(obj) 를 직접 호출할 때도 사용할 수 있고, obj 과 같은 중첩객체에도 구현하여 사용할 수 있습니다.


// JSON.parse

// JSON.parse 를 사용하면 JSON 으로 인코딩된 객체를 다시 객체로 디코딩 할 수 있습니다.

// let obj = JSON.parse(str, [reviver]);

// str : JSON 형식의 문자열
// reviver : 모든 (key, value) 쌍을 대상으로 호출되는 function(key,value) 형태의 함수로 값을 변경시킬 수 있습니다.

let numbers = '[0,1,2,3]';
console.log(JSON.parse(numbers));

// JSON.parse 는 아래와 같이 중첩 객체에도 사용할 수 있습니다.

let userData = '{ "name": "John", "age": 35, "isAdmin": false, "friends": [0,1,2,3] }';
console.log(JSON.parse(userData));

// 중첩 객체나 중첩 배열이 있다면 JSON 도 복잡해지기 마련인데, 그렇더라도 결국엔 JSON 포맷을 지켜야 합니다.

// JSON 은 주석을 지원하지 않는다는 점도 기억해 놓으시기 바랍니다.
// 주석을 추가하면 유효하지 않은 형식이 됩니다.
// 키를 큰따옴표로 감싸지 않아도 되고 주석도 지원해주는 JSON5 라는 포맷도 있는데, 이 포맷은 자바스크립트 명세서에서 저읭하지 않은 독자적인 라이브러리 입니다.
// JSON 포맷이 까다로운 규칙을 가지게 된 이유는 개발자의 귀차니즘 때문이 아니고, 쉽고 빠르며 신뢰할 수 있을 만한 파싱 알고리즘을 구현하기 위해서 입니다.


// reviver 사용하기

// 서버로부터 문자열로 변환된 obj 객체를 전송받았다고 가정해봅시다.

// 전송받은 문자열은 아마 아래와 같이 생겼을 겁니다.

let obj14 = '{"title":"Conference","date":"2017-11-30T12:00:00.000Z"}';

// 이제 이 문자열을 역 직렬화해서 자바스크립트 객체를 만들어봅시다.

// JSON.parse 를 호출해보죠.

let obj15 = JSON.parse(obj14);
console.log(obj15);
try {
    obj15.date.getDate();
} catch(e) {
    console.log(e);
}

// obj15.date 의 값은 Date 객체가 아니고 문자열이기 때문에 발생한 에러입니다.
// 그렇다면 문자열을 Date 로 전환해줘야 한다는 걸 어떻게 JSON.parse 에게 알릴 수 있을까요?

// 이럴 때 JSON.parse 의 두 번째 인수 reviver 를 사용하면 됩니다.
// 모든 값은 '그대로', 하지만 date 만큼은 Date 객체를 반환하도록 함수를 구현해 봅시다.

let obj16 = JSON.parse(obj14, function(key, value) {
    if(key == 'date') return new Date(value);
    return value;
});

console.log(obj16.date.getDate());

// 참고로 이 방식은 중첩 객체에도 적용할 수 있습니다.

let obj17 = `{
  "meetups": [
    {"title":"Conference","date":"2017-11-30T12:00:00.000Z"},
    {"title":"Birthday","date":"2017-04-18T12:00:00.000Z"}
  ]
}`;

let obj18 = JSON.parse(obj17, function(key, value) {
    if(key == 'date') return new Date(value);
    return value
});

console.log(obj18);
console.log(obj18.meetups[0].date.getDate());


// 요약

// JSON 은 독자적인 표준을 가진 데이터 형식으로, 대부분의 언어엔 JSON 을 쉽게 다룰 수 있게 해주는 라이브러리가 있습니다.
// JSON 은 일반 객체, 배열, 문자열, 숫자, 불린값, null 을 지원합니다.
// JSON.stringfy 를 사용하면 원하는 값을 JSON 으로 직렬화 할 수 있고, JSON.parse 를 사용하면 JSON 을 본래 값으로 역 직렬화 할 수 있습니다.
// 위 두 메서드에 함수를 인수로 넘겨주면 원하는 값만 읽거나 쓰는 게 가능합니다.
// JSON.stringfy 는 객체에 toJSON 메서드가 있으면 이를 자동으로 호출해줍니다.



</script>