<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>
// 콜백

// 자바스크립트 호스트 환경이 제공하는 여러 함수를 사용하면 비동기(asynchronous) 동작을 스케줄링 할 수 있습니다.
// setTimeout 은 스케줄링에 사용되는 가장 대표적인 함수입니다.
// 실무에서 맞닥뜨리는 비동기 동작은 아주 다양합니다.
// 스크립트나 모듈을 로딩하는 것 또한 비동기 동작입니다.
// src 에 있는 스크립트를 읽어오는 함수 loadScript(src) 를 예시로 비동기 동작 처리가 어떻게 일어나는지 살펴봅시다.

function loadScript1(src) {
    let script = document.createElement('script');
    script.src = src;
    document.head.append(script);
}

// 함수 loadScript(src) 는 <script src="..."> 를 동적으로 만들고 이를 문서에 추가합니다.
// 브라우저는 자동으로 태그에 있는 스크립트를 불러오고, 로딩이 완료되면 스크립트를 실행합니다.

// loadScript(src) 사용법은 다음과 같습니다.

// loadScript1('/test/testScript1.js');

// 그런데 이 때 스크립트는 비동기적으로 실행됩니다.
// 로딩은 지금 당장 시작되더라도 실행은 함수가 끝난 후에야 되기 때문입니다.
// 따라서 loadScript(...) 아래에 있는 코드들은 스크립트 로딩이 종료되는 걸 기다리지 않습니다.

// 스크립트 로딩이 끝나자마자 이 스크립트를 사용해 무언가를 해야만 한다고 가정해 봅시다.
// 스크립트 안에 다양한 함수가 정의되어 있고, 우리는 이 함수를 실행하길 원하는 상황입니다.

// 그런데 loadScript(...) 를 호출하자마자 내부 함수를 호출하면 원하는 대로 작동하지 않습니다.


// loadScript1('/test/testScript1.js');
// testScript1(); // error

// 에러는 브라우저가 스크립트를 읽어올 수 있는 시간을 충분히 확보하지 못했기 때문에 발생합니다.
// 그런데 현재로서는 loadScript 에서 스크립트 로딩이 완료되었는지 알 방법이 없습니다.
// 언젠가 스크립트가 로드되고 실행도 되겠지만, 그게 다 입니다.
// 원하는 대로 스크립트 안의 함수나 변수를 사용하려면 스크립트 로딩이 끝났는지 여부를 알 수 있어야 합니다.

// loadScript 의 두 번째 인수로 스크립트 로딩이 끝난 후 실행될 함수인 콜백(callback) 함수를 추가해 봅시다.

function loadScript2(src, callback) {
    let script = document.createElement('script');
    script.src = src;
    script.onload = () => callback();

    document.head.append(script);
}

// loadScript2('/test/testScript1.js', function() {
//     testScript1();
// });

// 새롭게 불러온 스크립트에 있는 함수를 콜백 함수 안에서 호출하면 원하는 대로 외부 스크립트 안의 함수를 사용할 수 있습니다.

// 이런 방식을 '콜백 기반(callback-based)' 비동기 프로그래밍이라고 합니다.
// 무언가를 비동기적으로 수행하는 함수는 함수 내 동작이 모두 처리된 후 실행되어야 하는 함수가 들어갈 콜백을 인수로 반드시 제공해야 합니다.


// 콜백 속 콜백
// 스크립트가 두 개 있는 경우, 어떻게 하면 두 스크립트를 순차적으로 불러올 수 있을까요?
// 두 번째 스크립트 로딩은 첫 번째 스크립트의 로딩이 끝난 이후가 되길 원한다면 말이죠.

// 가장 자연스러운 해결 방법은 아래와 같이 콜백 함수 안에서 두 번째 loadScript 를 호출하는 것입니다.

// loadScript2('/test/testScript1.js', function() {
//     testScript1();
//     loadScript2('/test/testScript2.js', function() {
//         testScript2();
//     });
// });

// 이렇게 중첩 콜백을 만들면 바깥에 위치한 loadScript 가 완료된 후 완쪽 loadScript 가 실행됩니다.
// 이렇게 콜백 안에 콜백을 넣는 것은 수행하려는 동작이 단 몆 개뿐이라면 괜찮지만, 동작이 많은 경우엔 좋지 않습니다.


// 에러 핸들링

// 지금까지 살펴본 예시들은 스크립트 로딩이 실패하는 경우 등의 에러를 고려하지 않고 작성되었습니다.
// 그런데 스크립트 로딩이 실패할 가능성은 언제나 있습니다.
// 물론 콜백 함수는 이런 에러를 핸들링할 수 있어야 하죠.

function loadScript3(src, callback) {
    let script = document.createElement('script');
    script.src = src;

    script.onload = () => callback(null, script);
    script.onerror = () => callback(new Error(`${src} load error`), script);

    document.head.append(script);
}

loadScript3('/test/testScript3.js', function(error, script) {
    if(error) {
        console.log(error);
    } else {
        testScript1();
    }
});

// 이렇게 에러를 처리하는 방식은 흔히 사용되는 패턴입니다.
// 이런 패턴은 '오류 우선 콜백(error-first callback)' 이라고 불립니다.

// 오류 우선 콜백은 다음 관례를 따릅니다.

// 1. callback 의 첫 번째 인수는 에러를 위해 남겨둡니다. 에러가 발생하면 이 인수를 이용해 callback(err) 이 호출됩니다.
// 2. 두 번째 인수(필요하면 인수를 더 추가할 수 있음)는 에러가 발생하지 않았을 때를 위해 남겨둡니다.

// 오류 우선 콜백 스타일을 사용하면, 단일 콜백 함수에서 에러 케이스와 성공 케이스 모두를 처리할 수 있습니다.



</script>