<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>
// 옵셔널 체이닝 '?.'

// 스펙에 추가된 지 얼마 안 된 문법입니다. 구식 브라우저는 폴리필이 필요합니다.

// 옵셔널 체이닝(optional chaining) ?. 을 사용하면 프로퍼티가 없는 중첩 객체를 에러 없이 안전하게 접근할 수 있습니다.

// 옵셔널 체이닝이 필요한 이유

// 사용자가 여러 명 있는데 그중 몆 명은 주소 정보를 가지고 있지 않다고 가정해봅시다.
// 이럴 때 user.address.street 를 사용해 주소 정보에 접근하면 에러가 발생할 수 있습니다.

let user1 = {};
try {
    console.log('user1.address.street', user1.address.street);
} catch(e) {
    console.log(e);
}

// 또 다른 사례론 브라우저에서 동작하는 코드를 개발할 때 발생할 수 있는 문제가 있습니다.
// 자바스크립트를 사용해 페이지에 존재하지 않는 요소에 접근해 요소의 정보를 가져오려 하면 문제가 발생하죠.

try {
    let html1 = document.querySelector('.html1').innerHTML;
} catch(e) {
    console.log(e);
}

// 명세서에 ?. 이 추가되기 전엔 이런 문제들을 해결하기 위해 && 연산자를 사용하곤 했습니다.

let user2 = {};

if(user2 && user2.address && user2.address.street) {
    console.log('user2.address.street', user2.address.street);
}

// 중첩 객체의  특정 프로퍼티에 접근하기 위해 거쳐야 할 구성요소들을 and 로 연결해 실제 해당 객체나 프로퍼티가 있는지 확인하는 방법을 사용했었죠.
// 그런데 이렇게 and를 연결해ㅑ서 사용하면 코드가 아주 길어진다는 단점이 있습니다.


// 옵셔널 체이닝의 등장

// ?. 은 ?.  '앞'의 평가 대상이 undefined, null 이면 평가를 멈추고 undefined 를 반환합니다.

let user3 = {};
console.log('user3?.address?.street',user3?.address?.street);


// 옵셔널 체이닝을 남용하지 마세요.
// ?. 는 존재하지 않아도 괜찮은 대상에게 사용해야 합니다.
// 사용자 주소를 다루는 위 예시에서 논리상 user 는 반드시 있어야 하는데 address 는 필수값이 아닙니다.
// 그러니 user.address?.street 를 사용하는 것이 바람직합니다.
// 실수로 인해 user 에 값을 할당하지 않았다면 바로 알아낼 수 있도록 해야 합니다.
// 그렇지 않으면 에러를 조기에 발견하지 못하고 디버깅이 어려워집니다.


// 단락 평가

// ?.는 왼쪽 평가대상에 값이 없으면 즉기 평가를 멈춥니다.
// 참고로 이런 평가 방법을 단락 평가라고 부릅니다.
// 그렇기 때문에 함수 호출을 비롯한 ?. 오른쪽에 있는 부가 동작은 ?. 의 평가가 멈췄을 때 더는 일어나지 않습니다 .

let user4 = null;
let x1 = 0;

user4?.func(x1++);
console.log('x1',x1);



// ?.() 와 ?.[]

// ?. 은 연산자가 아닙니다.
// ?. 은 함수나 대괄호와 함께 동작하는 특별한 문법 구조체 입니다.
// 함수 관련 예시와 함께 존재 여부가 확실치 않은 함수를 호출할 때 ?.() 를 어떻게 쓸 수 있는지 알아봅시다.

let user5 = {
    admin() {
        return 'user5 admin';
    }
}

let user6 = {};

console.log('user5.admin?.()', user5.admin?.());
console.log('user6.admin?.()', user6.admin?.());

// 두 상황 모두 user 객체는 존재하기 때문에 admin 프로퍼티는 . 만 사용해 접근했습니다.
// 그리고 난 후 ?.() 를 사용해 admin 의 존재 여부를 확인했습니다.
// user5엔 admin이 정의되어 있기 때문에 메서드가 제대로 호출되었습니다.
// 반면 user6엔 admin이 정의되어 있지 않았음에도 불구하고 메서드를 호출하면 에러 없이 그냥 평가가 멈추는 것을 확인할 수 있습니다.

// . 대신 대괄호 [] 를 사용해 객체 프로퍼티에 접근하는 경우엔 ?.[] 를 사용할 수도 있습니다.
// 위 예시와 마찬가지로 ?.[] 를 사용하면 객체 존재 여부가 확실치 않은 경우에도 안전하게 프로퍼티를 읽을 수 있습니다.

let user7 = {
    name: 'inHui'
};

let user8 = null;

console.log(`user7?.['name']`, user7?.['name']);
console.log(`user8?.['name']`, user8?.['name']);
console.log(`user7?.['name']?.something?.not?.existing`, user7?.['name']?.something?.not?.existing);

// ?. 은 delete 와 조합해 사용할 수도 있습니다.

delete user7?.name;

// ?. 은 읽기나 삭제하기에는 사용할 수 있지만 쓰기에는 사용할 수 없습니다.
try {
    user7?.name = 'inHui';
} catch(e) {
    console.log(e);
}


</script>