<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// call / apply 와 데코리에터, 포워딩

// 자바스크립트는 함수를 다룰 때 탁월한 유연성을 제공합니다.
// 함수는 이곳저곳 전달될 수 있고, 객체로도 사용될 수 있습니다.
// 이번 챕터에선 함수 간에 호출을 어떻게 포워딩(Fowarding) 하는지, 함수를 어떻게 데코레이팅(decorating) 하는지에 대해 알아보겠습니다.

// 코드 변경 없이 캐싱 기능 추가하기

// CPU 를 많이 잡아먹지만 결과는 안정적인 함수 slow(x) 가 있다고 가정해 봅시다.
// 결과가 안정적이라는 말은 x 가 같으면 호출 결과도 같다는 것을 의미합니다.
// slow(x) 가 자주 호출된다면, 결과를 어딘가에 저장(캐싱)해 재연산에 걸리는 시간을 줄이고 싶을 겁니다.
// 아래 예시에선 slow() 안에 캐싱 관련 코드를 추가하는 대신, 래퍼 함수를 만들어 캐싱 기능을 추가할 예정입니다.
// 곧 정리하겠지만, 이렇게 래퍼 함수를 만들면 여러 가지 이점이 있습니다.

function func1(x) {
    return `func1 ${x} 호출`;
}

function cachingDecorator(func) {
    let cache = new Map();

    return function(x) {
        if(cache.has(x)) {
            console.log('cache');
            return cache.get(x);
        } else {
            let result = func(x);
            cache.set(x, result);
            return result;
        }
    }
}

func1 = cachingDecorator(func1);
console.log(func1(1));
console.log(func1(2));
console.log(func1(1));

// cachingDecorator 같이 인수로 받은 함수의 행동을 변경시켜주는 함수를 데코레이터(decorator) 라고 부릅니다.
// 모든 함수를 대상으로 cachingDecorator 를 호출 할 수 있는데, 이때 반환되는 것은 캐싱 래퍼입니다.
// 함수에 cachingDecorator 를 적용하기만 하면 캐싱이 가능한 함수를 원하는 만큼 구현할 수 있기 때문에 데코레이터 함수는 아주 유용하게 사용됩니다.
// 캐싱 관련 코드를 함수 코드와 분리할 수 있기 때문에 함수의 코드가 간결해진다는 장점도 있습니다.

// 아래 그림에서 볼 수 있듯이 cachingDecorator(func) 를 호출하면 '래퍼(wrapper)' function(x) 이 반환됩니다.
// 래퍼 function(x) 는 func(x) 의 호출 결과를 캐싱 로직으로 감쌉니다.

// 바깥 코드에서 봤을 때, 함수 func 는 래퍼로 감싼 이전이나 이후나 동일한 일을 수행합니다.
// 행동 양식에 캐싱 기능이 추가된 것뿐입니다.

// func 본문을 수정하는 것 보다 독립된 래퍼 함수 cachingDecorator 를 사용할 때 생기는 이점을 정리하면 다음과 같습니다.
// - cachingDecorator 를 재사용 할 수 있습니다. 원하는 함수 어디에든 cachingDecorator 를 적용할 수 있습니다.
// - 캐싱 로직이 분리되어 func 자체의 복잡성이 증가하지 않습니다.
// - 필요하다면 여러 개의 데코레이터를 조합해서 사용할 수도 있습니다.


// func.call 를 사용해 컨텍스트 지정하기

// 위에서 구현한 캐싱 데코레이터는 객체 메서드에 사용하기엔 적합하지 않습니다.
// 객체 메서드 obj.func2() 는 데코레이터 적용 후 제대로 동작하지 않죠.

let obj1 = {
    func2() {
        return 1;
    },

    func3(x) {
        return x * this.func2();
    }
}

// obj1.func3 = cachingDecorator(obj1.func3);

// console.log(obj1.func3(2)); // error : this.func2 is not a function 

// 에러가 발생합니다.
// 래퍼가 기존 함수 func(x) 를 호출하면 this 가 undefined 가 되기 떄문입니다.
// 래퍼가 기존 메서드 호출 결과를 전달하려 했지만 this 의 컨텍스트가 사라졌기 때문에 에러가 발생하는 것이죠.
// 에러가 발생하지 않게 코드를 수정해 봅시다.
// 먼저, this 를 명시적으로 고정해 함수를 호출할 수 있게 해주는 특별한 내장 함수 메서드 func.call(context, ...args) 에 대해 알아봅시다.

// 문법은 다음과 같습니다.
// func.call(context, arg1, arg2, ...);
// 메서드를 호출하면 메서드의 첫 번째 인수가 this, 이어지는 인수가 func 의 인수가 된 후, func 가 호출됩니다.

// 아래 함수와 메서드를 호출하면 거의 동일한 일이 발생합니다.
// console.log(obj1.func3(3))
// console.log(obj1.func3.call(obj1, 3));

// 둘의 유일한 차이점은 func.call 에선 this 가 obj 로 고정된다는 점입니다.

function sayHi(phrase) {
    console.log(this.name + ' ' + phrase);
}

let obj2 = {name: 'inhui'};
let obj3 = {name: 'john'};

sayHi.call(obj2, 'Hello');
sayHi.call(obj3, 'Good Bye');

// 래퍼 안에서 call 을 사용해 컨텍스트를 원본 함수로 전달하면 에러가 발생하지 않습니다.

function cachingDecorator2(func) {
    let cache = new Map();

    return function(x) {
        if(cache.has(x)) {
            console.log('cache');
            return cache.get(x);
        } else {
            let result = func.call(this,x); // 이젠 this 가 제대로 전달됩니다.
            cache.set(x, result);
            return result;
        }
    }
}

obj1.func3 = cachingDecorator2(obj1.func3);
console.log(obj1.func3(5));
console.log(obj1.func3(5));

// 이제 에러 없이 모든 게 정상적으로 동작합니다.

// 명확한 이해를 위해 this 가 어떤 과정을 거쳐 전달되는지 자세히 살펴보겠습니다.

// 1. 데코레이터를 적용한 후에 obj1.func3 은 래퍼 function(x) {...} 가 됩니다.
// 2. obj1.func3(2) 를 실행하면 래퍼는 2를 인수로 받고, this=obj1 이 됩니다.(점 앞의 객체)
// 3. 결과가 캐시되지 않은 상황이라면 func.call(this,x) 에서 현재 this(=obj1)와 인수를 원본 메서드에 전달합니다.


// 여러 인수 전달하기

// cachingDecorator 를 좀 더 다채롭게 해봅시다.
// 지금 상태론 인수가 하나뿐인 함수에만 cachingDecorator 를 적용할 수 있습니다.
// 복수 인수를 가진 메서드를 캐싱하려면 어떻게 해야 할지 생각해 봅시다.

let obj4 = {
    func1(min,max) {
        return min+max;
    }
}

// 지금까진 인수가 x 하나뿐이었기 때문에 cache.set(x,result) 으로 결과를 저장하고 catch.get(x) 으로 저장된 결과를 불러오기만 하면 됐습니다.
// 그런데 이제부턴 (min,max) 같이 인수가 여러 개이고, 이 인수들을 넘겨 호출한 결과를 기억해야 합니다.
// 네이티브 맵은 단일 키만 받지만 말이죠.

// 해결 방법은 여러 가지입니다.
// 1. 복수 키를 지원하는 맵과 유사한 자료 구조 구현하기
// 2. 중첩 맵을 사용하기
// 3. 두 값을 하나로 합치기, 맵의 키로 문자열 'min,max' 를 사용합ㄴ디ㅏ. 여러 값을 하나로 합치는 코드는 해싱 함수에 구현해 유연성을 높입니다.

// 여기에 더하여 func.call(this, x) 를 func.call(this, ...arguments) 로 교체해, 래퍼 함수로 감싼 함수가 호출될 떄 복수 인수를 넘길 수 있도록 하겠습니다.

function hash(args) {
    return `${args[0],args[1]}`;
}

function cachingDecorator3(func, hash) {
    let cache = new Map();
    return function() {
        let key = hash(arguments);
        if(cache.has(key)) {
            return cache.get(key);
        }

        let result = func.call(this, ...arguments);
        cache.set(key, result);
        return result;
    }
}

obj4.func1 = cachingDecorator3(obj4.func1, hash);
console.log(obj4.func1(4,5));
console.log(obj4.func1(4,5));

// 이제 인수의 개수에 관계없이 래퍼가 잘 동작합니다.
// 해시 함수가 복수의 인수를 자유자재로 처리할 수 있도록 수정을 해야 하긴 하지만 말이죠.
// 이를 가능하게 해주는 흥미로운 방법은 아래에서 소개해 드리겠습니다.


// func.apply

// 그런데 여기서 func.call(this, ...arguments) 대신, func.apply(this, arguments) 를 사용해도 됩니다.
// 내장 메서드 func.apply 의 문법은 다음과 같습니다.

// func.apply(context, args)

// apply 는 func 의 this 를 context 로 고정해주고, 유사 배열 객체인 args 를 인수로 사용할 수 있게 해줍니다.
// call 과 apply 의 문법적 차이는 call 이 복수 인수를 따로따로 받는 대신 apply 는 인수를 유사 배열 객체로 받는다는 점뿐입니다.

// 따라서 아래 코드 두 줄은 거의 같은 역할을 합니다.

// func.call(context, ...args);
// func.apply(contetxt, args);

// 그런데 약간의 차이가 있긴 합니다.

// 전개 문법 ... 은 이터러블 args 을 분해 해 call 에 전달할 수 있도록 해줍니다.
// apply 는 오직 유사 배열 형태의 args 만 받습니다.

// 이 차이를 빼면 두 메서드는 완전히 동일하게 동작합니다.
// 인수가 이터러블 형태라면 call 을, 유사 배열 형태라면 apply 를 사용하면 됩니다.

// 배열같이 이터러블이면서 유사 배열인 객체엔 둘 다를 사용할 수 있는데, 대부분의 자바스크립트 엔진은 내부에서 apply 를 최적화 하기 때문에 apply 를 사용하는 게 좀 더 빠르긴 합니다.

// 이렇게 컨텍스트와 함께 인수 전체를 다른 함수에 전달하는 것을 콜 포워딩(call forwarding) 이라고 합니다.

// 가장 간단한 형태의 콜 포워딩은 다음과 같습니다.

let wrapper = function() {
    return func.apply(this, arguments);
}

// 이런 식으로 외부에서 wrapper 를 호출하면, 기존 함수인 func 를 호출하는 것과 명확하게 구분할 수 없습니다.


// 메서드 빌리기

// 위에서 구현한 해싱 함수를 개선해봅시다.

function hash2(args) {
    return `${args[0],args[1]}`;
}

// 지금 상태에선 인수 두 개만 다룰 수 있습니다.
// args 의 요소 개수에 상관없이 요소들을 합칠 수 있으면 더 좋겠네요.
// 가장 자연스러운 해결책은 배열 메서드 join 을 사용하는 것입니다.

function hash3(...args) {
    console.log(args);
    return [args].join(',');
}

console.log(hash3(1,2));

function hash4() {
    console.log('arguments', arguments);
    console.log([].join.call(arguments));
    console.log([].join.apply(arguments));
}

hash4(3,4)

// 데코레이터와 함수 프로퍼티

// 함수 또는 메서드를 데코레이터로 감싸 대체하는 것은 대체적으로 안전합니다.
// 그런데 원본 함수에 func.calledCount 등의 프로퍼티가 있으면 데코레이터를 적용한 함수에선 프로퍼티를 사용할 수 없으므로 안전하지 않습니다.
// 함수에 프로퍼티가 있는 경우엔 데코레이터 사용에 주의해야 합니다.
// 위 예시에서함수 slow 에 프로퍼티가 있었다면 cachingDecorator(slow) 호출 결과인 래퍼엔 프로퍼티가 없겠죠.
// 몇몇 데코레이터는 자신만의 프로퍼티를 갖기도 합니다.
// 데코레이터는 함수가 얼마나 ㅁ낳이 호출되었는지 세거나 호출 시 얼마나 많은 시간이 소모되었는지 등의 정보를 래퍼의 프로퍼티에 저장할 수 있습니다.
// 함수 프로퍼티에 접근할 수 있게 해주는 데코레이터를 만드는 방법도 있습니다.
// 그런데 이걸 구현하려면 proxy 라는 특별한 객체를 사용해 함수를 감싸야 합니다.


</script>