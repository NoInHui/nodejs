<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// call/apply 와 데코레이터, 포워딩

// 자바스크립트는 함수를 다룰 때 탁월한 유연성을 제공합니다.
// 함수는 이곳저곳 전달될 수 있고, 객체로도 사용될 수 있습니다.
// 이번 챕터에선 함수 간에 호출을 어떻게 포워딩하는지, 함수를 어떻게 데코레이팅 하는지에 대해 알아보겠습니다.

// 코드 변경 없이 캐싱 기능 추가하기

// CPU 를 많이 잡아먹지만 결과는 안정적인 함수 slow(x) 가 있다고 가정해 봅시다.
// 결과가 안정적이라는 말은 x 가 같으면 호출 결과도 같다는 것을 의미합니다.

// slow(x) 가 자주 호출된다면, 결과를 어딘가에 저장(캐싱)해 재연산에 걸리는 시간을 줄이고 싶을 겁니다.

// 아래 예시에선 slow() 안에 캐싱 관련 코드를 추가하는 대신, 래퍼 함수를 만들어 캐싱 기능을 추가할 예정입니다.
// 곧 정리하겠지만, 이렇게 래퍼 함수를 만들면 여러 가지 이점이 있습니다.






</script>