<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 구조 분해 할당

// 객체와 배열은 자바스크립트에서 가장 많이 쓰이는 자료 구조입니다.

// 키를 가진 데이터 여러 개를 하나의 엔티티에 저장할 땐 객체를, 컬렉션에 데이터를 순서대로 저장할 땐 배열을 사용하죠.

// 개발을 하다 보면 함수에 객체나 배열을 전달해야 하는 경우가 생기곤 합니다.
// 가끔은 객체나 배열에 저장된 데이터 전체가 아닌 일부만 필요한 경우가 생기기도 하죠.

// 이럴 때 객체나 배열을 변수로 분해할 수 있게 해주는 특별한 문법인 구조 분해 할당(destructuring assignment) 을 사용할 수 있습니다.
// 이 외에도 함수의 매개변수가 많거나 매개변수 기본값이 필요한 경우 등에서 구조 분해는 그 진가를 발휘합니다.


// 배열 분해하기

// 배열이 어떻게 변수로 분해되는지 예제를 통해 살펴봅시다.

let arr1 = ['1','2'];

let [str1, str2] = arr1;

console.log(str1, str2);

// 이제 인덱스를 이용해 배열에 접근하지 않고도 변수로 사용할 수 있게 되었습니다.

// 아래 예시처럼 split 같은 반환 값이 배열인 메서드를 함께 사용해도 좋습니다.

let [str3, str4] = '3 4'.split(' ');

console.log(str3, str4);

// 분해(destructuring) 는 파괴(destructive) 를 의미하지 않습니다.

// 구조 분해 할당이란 명칭은 어떤 것을 복사한 이후에 변수로 분해해준다는 의미 때문에 붙여졌습니다.
// 이 과정에서 분해 대상은 수정 또는 파괴되지 않습니다.
// 배열의 요소를 직접 변수에 할당하는 것보다 코드 양이 줄어든다는 점만 다릅니다.


// 쉼표를 사용하여 요소 무시하기

// 쉼표를 사용하면 필요하지 않은 배열 요소를 버릴 수 있습니다.

let [str5, ,str6] = ['5','6','7','8'];

console.log(str5, str6);


// 할당 연산자 우측엔 모든 이터러블이 올 수 있습니다.

// 배열뿐만 아니라 모든 이터러블(iterable, 반복 가능한 객체)에 구조 분해 할당을 적용할 수 있습니다.

let [a,b,c] = 'abc';
let [d,e,f] = new Set(['d','e','f']);

console.log(a,b,c);
console.log(d,e,f);


// 할당 연산자 좌측엔 뭐든지 올 수 있습니다.

// 할당 연산자 좌측엔 할당할 수 있는 것이라면 어떤 것이든 올 수 있습니다.
// 아래와 같이 객체 프로퍼티도 가능합니다.

let obj1 = {};
[obj1.name, obj1.surname] = 'inhui Noh'.split(' ');
console.log(obj1);


// .entries() 로 반복하기

// Object.entries(obj) 는 이전 챕터에서 학습한 바 있습니다.
// 이 메서드와 구조 분해를 조합하면 객체의 키와 값을 순회해 변수로 분해 할당할 수 있습니다.

let obj2 = {
    name: 'inhui',
    age: 32,
};

for(let [key,value] of Object.entries(obj2)) {
    console.log(`${key}, ${value}`);
}


// 변수 교환 트릭

// 두 변수에 저장된 값을 교환할 때 구조 분해 할당을 사용할 수 있습니다.

let str7 = 'Jane';
let str8 = 'Pete';

[str7, str8] = [str8, str7];

console.log(str7, str8);

// 예시에선 임시 배열을 만들어 두 변수를 담고, 요소 순서를 교체해 배열을 분해하는 방식을 사용했습니다.
// 이 방식을 사용하면 두 개뿐만 아니라 그 이상의 변수에 담긴 값도 교환할 수 있습니다.


// '...' 로 나머지 요소 가져오기

// 배열 앞쪽에 위치한 값 몆 개만 필요하고 그 이후 이어지는 나머지 값들은 한데 모아서 저장하고 싶을 때가 있습니다.
// 이럴 때 점 세개 ... 를 붙인 매개변수 하나를 추가하면 '나머지(rest)' 요소를 가져올 수 있습니다.

let [str9, str10, ...arr2] = ['1','2','3','4','5'];

console.log(str9, str10, arr2);

// arr2 는 나머지 배열 요소들이 저장된 새로운 배열이 됩니다.
// arr2 대신에 다른 이름을 사용해도 되는데, 변수 앞의 점 세 개(...) 와 변수가 가장 마지막에 위치해야 한다는 점은 지켜주시기 바랍니다.


// 기본값

// 할당하고자 하는 변수의 개수가 분해하고자 하는 배열의 길이보다 크더라도 에러가 발생하지 않습니다.
// 할당할 값이 없으면 undefined 취급되기 때문입니다.

let [str11, str12, str13] = [];

console.log(str11, str12, str13);

// = 를 이용하면 할당할 값이 없을 때 기본으로 할당해 줄 값인 기본값(default value) 을 설정할 수 있습니다.

let [str14="2", str15="3"] = ['1'];

console.log(str14,str15);

// 복잡한 표현식이나 함수 호출도 기본값이 될 수 있습니다.
// 이렇게 기본식으로 표현식이나 함수를 설정하면 할당할 값이 없을 때 표현식이 평가되거나 함수가 호출됩니다.

// 기본값으로 두 개의 prompt 함수를 할당한 예시를 살펴봅시다. 값이 제공되지 않았을 때만 함수가 호출되므로, prompt 는 한 번만 호출됩니다.

// let [str16=prompt('test1'), str17=prompt('test2')] = ['1'];
// str17 은 prompt 에서 받아온 값
// console.log(str16, str17); 


// 객체 분해하기

// 구조 분해 할당으로 객체도 분해할 수 있습니다.
// 기본 문법은 다음과 같습니다.

// let {var1, var2} = {var1:..., var2:...}

// 할당 연산자 우측엔 분해하고자 하는 객체를, 좌측엔 상응하는 객체 프로퍼티의 '패턴' 을 넣습니다.
// 분해하려는 객체 프로퍼티의 키 목록을 패턴으로 사용하는 예시를 살펴봅시다.

let obj4 = {
    title: 'menu',
    width: 1e2,
    height: 2e2,
};

let {title, width, height} = obj4;

console.log(title, width, height);

// 프로퍼티 obj4.title, obj4.width, obj4.height 에 저장된 값이 상응하는 변수에 할당된 것을 확인할 수 있습니다.
// 참고로 순서는 중요하지 않습니다.

// 할당 연산자 좌측엔 좀 더 복잡한 패턴이 올 수도 있습니다.
// 분해하려는 객체의 프로퍼티와 변수의 연결을 원하는대로 조정할 수도 있습니다.

// 객체 프로퍼티를 프로퍼티 키와 다른 이름을 가진 변수에 저장해봅시다.
// obj4.width 를 w 라는 변수에 저장하는 식으로 말이죠.
// 좌측 패턴에 클론(:) 을 사용하면 원하는 목표를 달성할 수 있습니다.

let {title: t, width: w, height: h}  = obj4;
console.log(t,w,h);

// 콜론은 '분해하려는 객체의 프로퍼티 : 목표 변수' 와 같은 형태로 사용합니다.
// 위 예시에선 프로퍼티 width 를 변수 w 에, height 를 변수 h에 저장했습니다.
// 프로퍼티가 없는 경우를 대비하여 = 를 사용해 기본값을 설정하는 것도 가능합니다.

let {title: t1 ='menu2', title2: t2='menu3'} = obj4;
console.log(t1,t2);

// 배열 혹은 함수의 매개변수에서 했던 것처럼 객체에도 표현식이나 함수 호출을 기본값으로 할당할 수 있습니다.
// 물론 표현식이나 함수는 값이 제공되지 않았을 때 평가 혹은 실행되겠죠.



// 나머지 패턴 '...'

// 분해하려는 객체의 프로퍼티 개수가 할당하려는 변수의 개수보다 많다면 어떨까요?
// '나머지'를 어딘가에 할당하면 되지 않겠냐는 생각이 들지 않으시나요?

// 나머지 패턴(rest pattern)을 사용하면 배열에서 했던 것처럼 나머지 프로퍼티를 어딘가에 할당하는 게 가능합니다.
// 참고로 모던 브라우저는 나머지 패턴을 지원하지만, IE 를 비롯한 몆몆 구식 브라우저는 나머지 패턴을 지원하지 않으므로 주의해서 사용해야 합니다.
// 물론 바벨(Babel)을 이요하면 되지만요.

let {title:t3, ...rest1} = obj4;
console.log(t3, rest1);

// let 없이 사용하기

// 지금까진 할당 연산 let {...} = {...} 안에서 변수들을 선언했습니다.
// let 으로 새로운 변수를 선언하지 않고 기존에 있던 변수에 분해한 값을 할당할 수도 있는데, 이때는 주의할 점이 있습니다.

// 잘못된 코드
let str18, str19, str20;
// SyntaxError: Unexpected token '=' 이라는 에러가 아랫발에 발생합니다.
// {str18, str19, str20} = {str18: '1', str19: '2', str20: '3'};

// 자바스크립트는 표현식 안에 있지 않으면서 주요 코드 흐름 상에 있는 {...} 를 코드 블록으로 인식합니다.
// 코드 블록의 본래 용도는 아래와 같이 문(statement) 을 묶는 것입니다.
{
    let message = 'hello';
    console.log(message);
}

// 위쪽 예시에선 구조 분해 할당을 위해 사용한 {...} 를 자바스크립트가 코드 블록으로 인식해서 에러가 발생하였습니다.

// 에러를 해결하려면 할당문을 괄호(...) 로 감싸 자바스크립트가 {...} 를 코드 블록이 아닌 표현식으로 해석하게 하면 됩니다.

({str18, str19, str20} = {str18: '1', str19: '2', str20: '3'});

console.log(str18, str19, str20);


// 중첩 구조 분해

// 객체나 배열이 다른 객체나 배열을 포함하는 경우, 좀 더 복잡한 패턴을 사용하면 중첩 배열이나 객체의 정보를 추출할 수 있습니다.
// 이를 중첩 구조 분해라고 부릅니다.

let obj5 = {
    size: {
        width3: 100,
        height3: 200
    },
    items: ['1','2'],
    extra: true
};

let {
    size: {
        width3,
        height3
    },
    items: [item1, item2],
    extra,
} = obj5;

console.log(width3, height3, item1, item2, extra);


// 똑똑한 함수 매개변수

// 함수에 매개변수가 많은데 이중 상당수는 선택적으로 쓰이는 경우가 종종 있습니다.
// 사용자 인터페이스와 연관된 함수에서 이런 상황을 자주 볼 수 있죠.
// 메뉴 생성에 관여하는 함수가 있다고 해 봅시다.
// 메뉴엔 너비, 높이, 제목, 항목 리스트 등이 필요하기 때문에 이 정보는 매개변수로 받습니다.

function showMenu1(title = 'Untitled', width = 200, height = 100, items = []) {
    //...
}

// 이렇게 함수를 작성하면 넘겨주는 인수의 순서가 틀려 문제가 발생할 수 있습니다.
// 문서화가 잘 되어있다면 IDE 가 순서를 틀리지 않게 도움을 주긴 하겠지만 말이죠.
// 이 외에도 대부분의 매개변수에 기본값이 설정되어 있어 굳이 인수를 넘겨주지 않아도 되는 경우에 문제가 발생합니다.

// 아래 코드를 살펴보시죠. 어떤 느낌이 드시나요?
showMenu1("My Menu", undefined, undefined, ["Item1", "Item2"]);

// 꽤 지저분해 보이네요. 매개변수가 많아질수록 가독성은 더 떨어질 겁니다.

// 구조 분해는 이럴 떄 구세주가 됩니다.

// 매개변수 모두를 객체에 모아 함수에 전달해, 함수가 전달받은 객체를 분해하여 이 변수에 할당하고 원하는 작업을 수행할 수 있도록 함수를 리팩토링해 봅시다.

let option1 = {
    title: 'My Menu',
    items: ['Item1', 'Item2']
};

function showMenu2({title = 'Untitled', width = 200, height = 100, items = []}) {

}


showMenu2(option1);

// 중첩 객체와 콜론을 조합하면 좀 더 복잡한 구조 분해도 가능합니다.

function showMenu3({
    title = 'Untitled',
    width : w = 200,
    height : h = 100,
    items = []
}) {

}

showMenu3(option1);

// 이렇게 똑똑한 함수 매개변수 문법은 구조 분해 할당 문법과 동일합니다.

// 참고로 이렇게 함수 매개변수를 구조 분해할 땐, 반드시 인수가 전달된다고 가정되고 사용된다는 점에 유의하시기 바랍니다.
// 모든 인수에 기본값을 할당해 주려면 빈 객체를 명시적으로 전달해야 합니다.

showMenu3({}); // 모든 인수에 기본값이 할당됩니다.

try {
    showMenu3(); // 에러가 발생할 수 있습니다.
} catch(e) {
    console.log(e);
}

// 이 문제를 예방하려면 빈 객체 {} 를 인수 전체의 기본값으로 만들면 됩니다.

function showMenu4({
    title = 'Untitled',
    width : w = 200,
    height : h = 100,
    items = []
} = {}) {

}

// 인수를 전달하지 않아도 에러가 발생하지 않음
showMenu4();

// 이렇게 인수 객체의 기본값을 빈 객체 {} 로 설정하면 어떤 경우든 분해할 것이 생겨서 함수에 인수를 하나도 전달하지 않아도 에러가 발생하지 않습니다.


</script>