<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 웹 개발자가 알아야 할 7가지 디자인 패턴

// 1. Constructor Pattern

// 구체적인 속성과 메서드가 객체로 구성되어 있는 함수인 생성자는 매우 친근할 것입니다.
// Constructor Pattern 은 우리가 알고있는 정의와 비슷합니다.
// 이 패턴을 사용함으로써 같은 객체의 여러 인스턴스화를 할 수 있습니다.

function Func1(name, age) {
    this.name = name;
    this.age = age;
    this.showName = () => console.log(`${this.name} : ${this.age}`);
}

let obj1 = new Func1('inhui',32);
obj1.showName();


// 2. Prototype Pattern

// Prototype Pattern 은 객체 기반 창조 디자인 패턴입니다.
// 이 패턴은 객체의 새로운 인스턴스를 프로토타입에서 복제를 통해 만듭니다.
// Prototype Pattern 에서 중요한 점은 각 객체 생성자에 대한 청사진으로 사용되는 객체를 생성하는 것입니다.
// 만약 새로운 객체의 생성자를 직접적으로 만든다면 복잡하고, 비효율적일 수 있으니 Prototype Pattern 에서는 이를 커버할 수 있습니다.

function Func2(title, price) {
    this.title = title;
    this.price = price;
    this.printTitle = () => console.log(this.title);
}

function Func2Prototype(prototype) {
    this.prototype = prototype;
    this.clone = () => {
        let obj = new Func2();
        obj.title = prototype.title;
        obj.price = prototype.price;
        return obj;
    }
}

let obj2 = new Func2('Javascript', 15);



</script>