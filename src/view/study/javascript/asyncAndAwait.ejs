<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// async 와 await

// async 와 await 라는 특별한 문법을 사용하면 프라미스를 좀 더 편하게 사용할 수 있습니다.
// async, await 는 놀라울 정도로 이해하기 쉽고 사용법도 어렵지 않습니다.

// async 함수

// async 키워드부터 알아봅시다. async 는 function 앞에 위치합니다.

async function f1() {
    return 1;
}

// function 앞에 async 를 붙이면 해당 함수는 항상 프라미스를 반환합니다.
// 프라미스가 아닌 값을 반환하더라도 이행 상태의 프라미스(resolved promise)로 값을 감싸 이행된 프라미스가 반환되도록 합니다.

// 아래 예시의 함수를 호출하면 result 가 1인 이행 프라미스가 반환됩니다.

async function f2() {
    return 1;
}

console.log('f2()', f2());
f2().then(result => console.log('f2',result));

// 명시적으로 프라미스를 반환하는 것도 가능한데, 결과는 동일합니다.

async function f3() {
    return Promise.resolve(1);
}

f3().then(result => console.log('f3', result));

// async 가 붙은 함수는 반드시 프라미스를 반환하고, 프라미스가 아닌 것은 프라미스로 감싸 반환합니다.
// 그런데 async 가 제공하는 기능은 이뿐만 아닙니다.
// 또 다른 키워드 await 는 async 함수 안에서만 동작합니다.

// await

// await 문법은 다음과 같습니다.

// let value = await promise;

// 자바스크립트는 await 키워드를 만나면 프라미스가 처리될 때까지 기다립니다.

async function f4() {
    let promise = new Promise((resolve, reject) => {
        setTimeout(() => resolve('done1'), 1000);
    });

    let result = await promise;
    console.log('f4', result);
}

f4();

// 함수를 호출하고, 함수 본문이 실행되는 도중 await 줄에서 실행이 잠시 '중단' 되었다가 프라미스가 처리되면 실행이 재개됩니다.
// 이때 프라미스 객체의 result 값이 변수 result 에 할당됩니다. 

// await 는 말 그대로 프라미스가 처리될 때까지 함수 실행을 기다리게 만듭니다.
// 프라미스가 처리되면 그 결과와 함께 실행이 재개되죠.
// 프라미스가 처리되길 기다리는 동안엔 엔진이 다른 일을 할 수 있기 때문에, CPU 리소스가 낭비되지 않습니다.

// await 는 promise.then 보다 좀 더 세련되게 프라미스의 result 값을 얻을 수 있도록 해주는 문법입니다.
// promise.then 보다 가독서 좋고 쓰기도 쉽습니다.


// 일반 함수엔 await 를 사용할 수 없습니다.

// async 함수가 아닌데 await 을 사용하면 문법 에러가 발생합니다.

// function f5() {
//     let promise = Promise.resolve(1);
//     let result = await promise;
// }

// function 앞에 async 를 붙이지 않으면 이런 에러가 발생할 수 있습니다.
// 앞서 설명해 드린 바와 같이 await 는 async 함수 안에서만 동작합니다.




</script>