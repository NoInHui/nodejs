<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// async 와 await

// async 와 await 라는 특별한 문법을 사용하면 프라미스를 좀 더 편하게 사용할 수 있습니다.
// async, await 는 놀라울 정도로 이해하기 쉽고 사용법도 어렵지 않습니다.

// async 함수

// async 키워드부터 알아봅시다. async 는 function 앞에 위치합니다.

async function func1() {
    return 1;
}

// function 앞에 async 를 붙이면 해당 함수는 항상 프라미스를 반환합니다.
// 프라미스가 아닌 값을 반환하더라도 이행 상태의 프라미스(resolved promise) 로 감싸 이행된 프라미스가 반환되도록 합니다.

func1().then(result => console.log(result));

// 명시적으로 프라미스를 반환하는 것도 가능한데 결과는 동일합니다.

function func2() {
    return new Promise((resolve, reject) => resolve(1));
}

func2().then(result => console.log(result));

// async 가 붙은 함수는 반드시 프라미스를 반환하고, 프라미스가 아닌 것은 프라미스로 감싸 반환합니다.
// 그런데 async 가 제공하는 기능은 이뿐만이 아닙니다.
// 또 다른 키워드 await 는 async 함수 안에서만 동작합니다.

// await

// await 문법은 다음과 같습니다.
// let value = await promise;

// 자바스크립트는 await 키워드를 만나면 프라미스가 처리될 때까지 기다립니다. 결과는 그 이후 반환됩니다.


async function func3() {
    let promise = new Promise((resolve, reject) => {
        setTimeout(() => resolve('func3'), 2000);
    });

    let result = await promise;
    console.log(result);
}

func3();

// 함수를 호출하고, 함수 본문이 실행되는 도중에 await 에서 실행이 잠시 중단되었다가 프라미스가 처리되면 실행이 재개됩니다.
// 이때 프라미스 객체의 result 값이 변수 result 에 할당됩니다.

// await 는 말 그대로 프라미스가 처리될 때까지 함수 실행을 기다리게 만듭니다.
// 프라미스가 처리되면 그 결과와 함께 실행이 재개되죠.
// 프라미스가 처리되길 기다리는 동안엔 엔진이 다른 일을 할 수 있기 때문에, CPU 리소스가 낭비되지 않습니다.

// await 는 promise.then 보다 좀 더 세련되게 프라미스의 result 값을 얻을 수 있도록 해주는 문법입니다.
// promise.then 보다 가독성 좋고 쓰기도 쉽습니다.


async function func4() {
    // JSON 읽기
    let response = await fetch('/save/jsonData.json');
    let data = await response.json();

    // 3초 대기
    await new Promise((resolve, reject) => setTimeout(resolve, 3000));
    console.log(data);
}

func4();

// await 는 최상위 레벨 코드에서 작동하지 않습니다.

// await 을 이제 막 시작하기 시작한 분들은 최상위 레벨 코드에 await 을 사용할 수 없다는 사실을 잊곤 합니다.
// 아래와 같은 코드는 동작하지 않습니다.

let response = await fetch('/save/jsonData.json');

// 하지만 익명 async 함수로 코드를 감싸면 최상위 레벨 코드에도 await 를 작성할 수 있습니다.

(async () => {
    let response = await fetch('/save/jsonData.json');
    console.log(await response.json());
})();

// async 클래스 메서드

// 메서드 이름 앞에 async 를 추가하면 async 클래스 메서드를 선언할 수 있습니다.

class Class1 {
    async func1() {
        return await Promise.resolve('Class1')
    }
}
new Class1().func1().then(result => console.log(result));


// 에러 핸들링

// 프라미스가 정상적으로 이행되면 await promise 는 프라미스 객체의 result 에 저장된 값을 반환합니다.
// 반면 프라미스가 거부되면 마치 throw 문을 작성한 것처럼 에러가 던져집니다.

async function func5() {
    await Promise.reject(new Error('error'));
}

// 위 코드는 아래 코드와 동일합니다.

async function func6() {
    throw new Error('error');
}

// 실제 상황에선 프라미스가 거부 되기 전에 약간의 시간이 지체되는 경우가 있습니다.
// 이런 경우엔 await 가 에러를 던지기 전에 지연이 발생합니다.

// await 가 던진 에러는 throw 가 던진 에러를 잡을 때처럼 try..catch 를 사용해 잡을 수 있습니다.

async function func7() {
    try {
        let response = await fetch('http://blabla');
    } catch(e) {
        console.log(e);
    }
}

func7();

// try..catch 가 없으면 아래 예시의 async 함수를 호출해 만든 프라미스가 거부 상태가 됩니다.
// .catch 를 추가하면 거부된 프라미스를 처리할 수 있습니다.

async function func8() {
    let response = await fetch('http://blabla');
}

func8().catch(e => console.log(e));

// .catch 를 추가하는 걸 잊으면 처리되지 않은 프라미스 에러가 발생합니다.
// 이런 에러는 프라미스와 에러 핸들링 챕터에서 설명한 전역 이벤트 핸들러 unhandledrejection 을 사용해 잡을 수 있습니다.


// async / await 와 promise.then / catch

// async/await 을 사용하면 await 가 대기를 처리해주기 때문에 .then 이 거의 필요하지 않습니다.
// 여기에 더하여 .catch 대신 일반 try..catch 를 사용할 수 있다는 장점도 생깁니다.
// 항상 그러한 것은 아니지만, promise.then 을 사용하는 것보다 async / await 를 사용하는 것이 대개는 더 편리합니다.
// 그런데 문법 제약 때문에 async 함수 바깥의 최상위 레벨 코드에선 await 를 사용할 수 없습니다.
// 그렇기 때문에 관행처럼 .then/catch 를 추가해 최종 결과나 처리되지 못한 에러를 다룹니다.


// async / await 는 Promise.all 과도 함께 쓸 수 있습니다.

// 여러 개의 프라미스가 모두 처리되길 기다려야 하는 상황이라면 이 프라미스들은 Promise.all 로 감싸고 여기에 await 를 붙여 사용할 수 있습니다.

(
    async () => {
        try {
            let results = await Promise.all([
                fetch('/save/jsonData.json')
                , fetch('/save/jsonData.json')
                , new Promise((resolve, reject) => setTimeout(() => resolve('test'), 2000))
                , new Promise((resolve, reject) => resolve(1)),
            ]);

            console.log(results);
        } catch(e) {
            console.log(e);
        }
    }
)();

// 실패한 프라미스에서 발생한 에러는 보통 에러와 마찬가지로 Promise.all 로 전파됩니다.
// 에러 떄문에 생긴 예외는 try..catch 로 감싸 잡을 수 있습니다.


// 요약

// function 앞에 async 키워드를 추가하면 두 가지 효과가 있습니다.

// 1. 함수는 언제나 프라미스를 반환합니다.
// 2. 함수 안에서 await 를 사용할 수 있습니다.

// 프라미스 앞에 await 키워드를 붙이면 자바스크립트는 프라미스가 처리될 때까지 대기합니다.
// 처리가 완료되면 조건에 따라 아래와 같은 동작이 이어집니다.

// 1. 에러 발생 - 예외가 생성됨(에러가 발생한 장소에서 throw error 를 호출한 것과 동일함)
// 2. 에러 미발생 - 프라미스 객체의 result 값을 반환

// async/await 를 함께 사용하면 읽고, 쓰기 쉬운 비동기 코드를 작성할 수 있습니다.

// async/await 를 사용하면 promise.then/catch 가 거의 필요 없습니다.
// 하지만 가끔 가장 바깥 스코프에서 비동기 처리가 필요할 때같이 promise.then/catch 를 써야 하는 경우가 생기기 때문에 async/await 가 프라미스를 기반으로 한다는 사실을 알고 계셔야합니다.
// 여러 작업이 있고, 이 작업들이 모두 완료될 때까지 기다리려면 Promise.all 을 활용할 수 있다는 점도 알고 계시기 바랍니다.


</script>