<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 클래스와 기본 문법

// 클래스는 객체 지향 프로그래밍에서 특정 객체를 생성하기 위해 변수와 메소드를 정의하는 일종의 틀로, 객체를 정의하기 위한 상태(맴버 변수)와 메서드(함수)로 구성된다.

// 실무에선 사용자나 물건같이 동일한 종류의 객체를 여러 개 생성해야 하는 경우가 잦습니다.
// 이럴 때 new 연산자와 생성 함수에서 배운 new Function 을 사용할 수 있습니다.

// 여기에 더하여 모던 자바스크립3트에 도입된 클래스라는 문법을 사용하면 객체 지향 프로그래밍에서 사용되는 다양한 기능을 자바스크립트에서도 사용할 수 있습니다.

// 기본 문법

// 클래스는 다음과 같은 기본 문법을 사용해 만들 수 있습니다.

class MyClass1 {
    constructor() {}
    method1() {}
    method2() {}
    method3() {}
}

// 이렇게 클래스를 만들고 new MyClass1() 를 호출하면 내부에서 정의한 메서드가 들어 있는 객체가 생성됩니다.

// 객체의 기본 상태를 설정해주는 생성자 메서드 constructor() 는 new 에 의해 자동으로 호출되므로, 특별한 절차 없이 객체를 초기화 할 수 있습니다.

class MyClass2 {
    constructor(name) {
        this.name = name;
    }

    method1() {
        console.log(this.name);
    }
}

const myClass2 = new MyClass2('inhui');
myClass2.method1();

// new MyClass2('inhui') 를 호출하면 다음과 같은 일이 일어납니다.

// 1. 새로운 객체가 생성됩니다.
// 2. 넘겨받은 인수와 함께 constructor 가 자동으로 실행됩니다. 이때 인수 'inhui' 가 this.name 에 할당됩니다.

// 이런 과정을 거친 후에 myClass2.method1() 같은 객체 메서드를 호출할 수 있습니다.

// 메서드 사이엔 쉼표가 없습니다.
// 초보 개발자는 클래스 메서드 사이에 쉼표를 넣는 실수를 저지르곤 합니다.
// 이렇게 쉼표를 넣으면 문법 에러가 발생합니다.
// 클래스와 관련된 표기법은 객체 리터럴 표기법과 차이가 있습니다.
// 클래스에선 메서드 사이에 쉼표를 넣지 않아도 됩니다.


// 클래스란

// 이 시점에서 클래스가 정확히 뭔가요? 라는 의문이 생기실 겁니다.
// 클래스는 자바스크립트에서 새롭게 창안한 개체가 아닙니다.

// 클래스가 보여주는 다양한 마법의 원리를 하나씩 파헤치면서 클래스가 정확히 무엇인지 알아봅시다.
// 이 과정을 거치고 나면 자바스크립트의 복잡한 기능을 이해할 수 있을 겁니다.

// 자바스크립트에서 클래스는 함수의 한 종류입니다.

class MyClass3 {
    constructor(name) {
        this.name = name;
    }
    method1() {
        console.log(this.name);
    }
}

console.log(typeof MyClass3);

// class MyClass3 {...} 문법 구조가 진짜 하는 일은 다음과 같습니다.

// 1. MyClass3 라는 이름을 가진 함수를 만듭니다.
// 함수 본문은 생성자 메서드 constructor 에서 가져옵니다.
// 생성자 메서드가 없으면 본문이 비워진 채로 함수가 만들어집니다.

// 2. method1 같은 클래스 내에서 정의한 메서드를 MyClass3.prototype 에 저장합니다.

// new MyClass3 를 호출해 객체를 만들고, 객체의 메서드를 호출하면 함수의 prototype 프로퍼티에서 설명한 것처럼 메서드를 prototype 프로퍼티를 통해 가져옵니다.
// 이 과정이 있기 때문에 객체에서 클래스 메서드에 접근할 수 있습니다.

// 

</script>