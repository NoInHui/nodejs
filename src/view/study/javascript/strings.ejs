<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 문자열

// 자바스크립트엔 글자 하나만 저장할 수 있는 별도의 자료형이 없습니다.
// 텍스트 형식의 데이터는 길이에 상관없이 문자열 형태로 저장됩니다.

// 자바스크립트에서 문자열은 페이지 인코딩 방식과 상관없이 UTF-16 형식을 따릅니다.

// 따옴표

// 문자열은 작은따옴표, 큰따옴표, 백틱으로 감쌀 수 있습니다.

// 작은따옴표와 큰따옴표는 기능상 차이가 없습니다.
// 그러나 백틱엔 특별한 기능이 있습니다. 
// 표현식을 ${...} 로 감싸고 이를 백틱으로 감싼 문자열 중간에 넣어주면 해당 표현식을 문자열 중간에 쉽게 삽입할 수 있죠.
// 이런 방식을 탬플릿 리터럴(template literal) 이라고 부릅니다.

let f1 = (a,b) => a+b;
console.log('`1+2 = ${f1(1,2)}`', `1+2 = ${f1(1,2)}`);

// 백틱을 사용하면 문자열을 여러 줄에 걸쳐 작성할 수도 있습니다.
let str1 = `
    test1
    test2
    test3
`;

console.log(str1);

// 작은따옴표나 큰따옴표를 사용하면 위와 같은 방식으로 여러 줄짜리 문자열을 만들 수 없습니다.

// 작은따옴표나 큰따옴표로 문자열을 표현하는 방식은 자바스크립트가 만들어졌을 떄부터 있었습니다.
// 이때는 문자열을 여러 줄에 걸쳐 작성할 생각조차 못 했던 시기였죠.
// 백틱은 그 이후에 등장한 문법이기 때문에 따옴표보다 다양한 기능을 제공합니다.

// 백틱은 '탬플릿 함수(template function)' 에서도 사용됩니다.
// func`string` 같이 첫 번째 백틱 바로 앞에 함수 이름을 써주면, 이 함수는 백틱 안의 문자열 조각이나 표현식 평가 결과를 인수로 받아 자동으로 호출됩니다.
// 이런 기능을 '태그드 탬플릿' 이라 부르는데, 태그드 템플릿을 사용하면 사용자 지정 템플릿에 맞는 문자열을 쉽게 만들 수 있습니다.
// 참고로 이 기능은 자주 사용되지 않습니다.

let person = 'Mike';
let age = 28;

function myTag(strings, personExp, ageExp) {
    let str0 = strings[0]; // "that "
    let str1 = strings[1]; // " is a "
    // 사실 이 예제의 string에서 표현식이 두 개 삽입되었으므로
    // ${age} 뒤에는 ''인 string이 존재하여
    // 기술적으로 strings 배열의 크기는 3이 됩니다.
    // 하지만 빈 string이므로 무시하겠습니다.
    // var str2 = strings[2];
    let ageStr;
    if (ageExp > 99){
        ageStr = 'centenarian';
    } else {
        ageStr = 'youngster';
    }

    // 심지어 이 함수내에서도 template literal을 반환할 수 있습니다.
    return str0 + personExp + str1 + ageStr;

}

let output = myTag`that ${ person } is a ${ age }`;
console.log(output);


// 특수 기호

// 줄 바꿈 문자(newline character) 라 불리는 특수기호 \n 을 사용하면 작은따옴표나 큰따옴표로도 여러 줄 문자열을 만들 수 있습니다.

let str2 = 'test1\ntest2\ntest3';
console.log(str2);

// 따옴표를 이용해 만든 여러 줄 문자열과 백틱을 이용해 만든 여러 줄 문자열은 표현 방식만 다를 뿐 차이가 없습니다.

// 자바스크립트엔 줄 바꿈 문자를 비롯한 다양한 특수 문자들이 있습니다.


// 문자열 길이
// length 프로퍼티엔 문자열의 길이가 저장됩니다.
// \n 같은 특수문자는 하나로 취급됩니다.

console.log('My\n'.length);

// length 는 프로퍼티 입니다.
// 자바스크립트 이외의 언어를 사용했던 개발자들은 str.length 가 아닌 str.length() 로 문자열의 길이를 알아내려고 하는 경우가 있습니다.
// length 는 함수가 아니고 숫자가 저장되는 프로퍼티라는 점에 주의하시기 바랍니다.


// 특정 글자에 접근하기

// 문자열 내 특정 위치인 pos 에 있는 글자에 접근하려면 [pos] 같이 대괄호를 이용하거나 str.charAt(pos) 라는 메서드를 호출하면 됩니다.
let str3 = 'Hello';

console.log(str3[0]);
console.log(str3.charAt(0));
console.log(str3[str3.length-1]);

// 글내에는 대괄호를 이용하는 방식을 사용합니다.
// charAt 은 하위 호환성을 위해 남아있는 메서드라고 생각하시면 됩니다.

// 두 접근 방식의 차이는 반환할 글자가 없을 때 드러납니다.
// 접근하려는 위치에 글자가 없는 경우 [] 는 undefined, charAt 은 빈 문자열을 반환합니다.

console.log('str3[10]', str3[10]);
console.log('str3.charAt(10)', str3.charAt(10));

// for..of 를 사용하면 문자열을 구성하는 글자를 대상으로 반복 작업을 할 수 있습니다.

for(let s of str3) {
    console.log(s);
}


// 문자열의 불변성

// 문자열은 수정할 수 없습니다. 따라서 문자열의 중간 글자 하나를 바꾸려고 하면 에러가 발생합니다.

str3[0] = 'S';
console.log(str3);

// 이런 문제를 피하려면 완전히 새로운 문자열을 하나 만든 다음, 이 문자열을 str 에 할당하면 됩니다.


// 대,소문자 변경하기

// 메서드 toLowerCase(), toUpperCase() 는 대문자를 소문자로, 소문자를 대문자로 변경시켜줍니다.

console.log(str3.toLowerCase());
console.log(str3.toUpperCase());

// 글자 하나의 케이스만 변경하는 것도 가능합니다.

console.log(str3[1].toUpperCase());



// 부분 문자열 추출하기

// 자바스크립트엔 부분 문자열 추출과 관련된 메서드가 세 가지 있습니다.
// 세 가지 메서드 substring, substr, slice 를 하나씩 알아봅시다.

// slice(start, end)	start부터 end까지(end는 미포함), 음수 허용
// substring(start, end)	start와 end 사이, 음수는 0으로 취급함
// substr(start, length)	start부터 length개의 글자, 음수 허용

// 어떤 메서드를 선택해야 하나요?

// 모두 사용해도 괜찮습니다. 그런데 substr 에는 단점이 하나 있습니다.
// 거의 모든 곳에서 이 메서드가 동작하긴하지만 브라우저이외의 호스트 환경에서는 제대로 동작하지 않을 수 있습니다.
// 남은 두 메서드 중 slice 는 음수 인수를 허용한다는 측면에서 substring 보다 좀 더 유연합니다.
// 따라서 세 메서드 중 slice 만 외워놓고 사용해도 충분할 것 같습니다.


// 문자열 심화

// 이번 절에선 문자열을 더 깊게 다룹니다.
// 이모티콘이나 일부 수학 기호, 상형 문자를 비롯한 희귀 기호 등을 다뤄야 한다면 앞으로 배울 내용이 유용하게 사용될 것입니다.

// 서로게이트 쌍

// 자주 사용되는 글자들은 모두 2바이트 코드를 가지고 있습니다.
// 유럽권 언어에서 사용되는 글자, 숫자, 상형 문자 대다수는 2바이트 표현 체계를 사용합니다.
// 그런데 2바이트는 65536 개의 조합밖에 만들어내지 못하기 때문에 현존하는 기호를 모두 표현하기에 충분하지 않습니다.
// 이를 극복하기 위해 사용 빈도가 낮은 기호는 '서로게이트 쌍' 이라 불리는 2바이트 글자들의 쌍을 사용해 인코딩 합니다.

// 서로게이트 쌍을 사용해 인코딩한 기호의 길이는 2 입니다.

console.log(`'𝒳'.length`, '𝒳'.length);
console.log(`'😂'.length`, '😂'.length);
console.log(`'𩷶'.length`, '𩷶'.length);

// 자바스크립트가 만들어졌을 당시엔 서로게이트 쌍은 존재하지 않았습니다.
// 따라서 자바스크립트는 서로게이트 쌍으로 표현한 기호를 제대로 처리하지 못합니다.

console.log('😂'[0]);


// 요약

// 자바스크립트엔 세 종류의 따옴표가 있는데, 이 중 하나인 백틱은 문자열을 여러 줄에 걸쳐 쓸 수 있게 해주고 문자열 중간에 ${...} 를 사용해 표현식도 넣을 수 있다는 점이 특징입니다.
// 자바스크립트에선 UTF-16 을 사용해 문자열을 인코딩합니다.
// \n 같은 특수 문자를 사용할 수 있습니다. \u... 를 사용하면 해당 문자의 유니코드를 사용해 글자를 만들 수 있습니다.
// 문자열 내의 글자 하나를 얻으려면 대괄호 [] 를 사용하세요.
// 부분 문자열을 얻으려면 slice 나 substring 을 사용하세요.
// 소문자로 바꾸려면 toLowerCase, 대문자로 바꾸려면 toUpperCase 를 사용하세요.
// indexOf 를 사용하면 부분 문자열의 위치를 얻을 수 있습니다.
// 부분 문자열 여부만 알고 싶다면 includes / startWith / endsWith 를 사용하면 됩니다.
// 특정 언어에 적합한 비교 기준 사용해 문자열을 비교하려면 localeCompare 를 사용하세요, 이 메서드를 사용하지 않으면 글자 코드를 기준으로 문자열이 비교됩니다.
// 이외에도 문자열에 쓸 수 있는 유용한 메서드 몆 가지가 있습니다.
// str.trim() - 문자열 앞과 끝의 공백 문자를 제거합니다.
// str.repeat(n) - 문자열을 n번 반복합니다.



</script>