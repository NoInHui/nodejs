<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// Date 객체와 날짜

// 날짜를 저장할 수 있고, 날짜와 관련된 메서드도 제공해주는 내중 객체 Date 에 대해 알아봅시다.

// Date 객체를 활용하면 생성 및 수정 시간을 저장하거나 시간을 측정할 수 있고, 현재 날짜를 출력하는 용도 등으로도 활용할 수 있습니다.

// 객체 생성하기

// new Date() 를 호출하면 새로운 Date 객체가 만들어지는데, new Date() 는 다음과 같은 형태로 호출할 수 있습니다.

// 인수 없이 호출하면 현재 날짜와 시간이 저장된 Date 객체가 반환됩니다.
let date1 = new Date();
console.log('date1', date1);

// new Date(milliseconds)

// UTC 기준(UTC+0) 1970년 1월 1일 0시 0분 0초에서 milliseconds 밀리초(1/1000 초) 후의 시점이 저장된 Date 객체가 반환됩니다.

// 1970년 1월 1일 0시 0분 0초(UTC+0) 를 나타내는 객체
let date2 = new Date(0);
console.log('date2', date2);

// 1970년 1월 1일의 24시간 후는 1970년 1월 2일(UTC+0) 임
let date3 = new Date(24 * 3600 * 1000);
console.log('date3', date3);

// 1970년 첫날을 기준으로 흘러간 밀리초를 나타내는 정수는 타임스탬프(timestamp) 라고 부릅니다.

// 타임스탬프를 사용하면 날짜를 숫자 형태로 간편하게 나타낼 수 있습니다.
// new Date(timestamp) 를 사용해 특정 날짜가 저장된 Date 객체를 손쉽게 만들 수 있고, date.getTime() 메서드를 사용해 Date 객체에서 타임스탬프를 추출하는 것도 가능합니다.

// 1970 년 1월 1일 이전 날짜에 해당하는 타임스탬프 값은 음수입니다.

let date4 = new Date(-24*3600*1000);
console.log('date4', date4);


// new Date(datestring)

// 인수가 하나인데, 문자열이라면 해당 문자열은 자동으로 구문 분석(parsed)됩니다.
// 구문 분석에 적용되는 알고리즘은 Date.parse 에서 사용하는 알고리즘과 동일합니다.

let date5 = new Date('2023-04-03');
console.log('date5', date5);

// new Date(year, month, date, hours, minutes, seconds, ms)

// 주어진 인수를 조합해 만들 수 있는 날짜가 저장된 객체가 반환됩니다.(지역 시간대 기준)
// 첫 번째 인수와 두 번째 인수만 필수값입니다.

// year 는 반드시 네 자리 숫자여야 합니다. 2013 은 괜찮지만 98은 괜찮지 않습니다.
// month 는 0(1월) 부터 11(12월) 사이의 숫자여야 합니다.
// date 는 일을 나타내는데, 값이 없는 경우엔 1일로 처리합니다.
// hours/minutes/seconds/ms 에 값이 없는 경우엔 0으로 처리됩니다.

let date6 = new Date(2023,03,03);
let date7 = new Date(2023,03,03,0,0,0,0);

console.log('date6', date6);
console.log('date7', date7);

// 최소 정밀도는 1밀리초(1/1000초) 입니다.

let date8 = new Date(2023,03,03,10,25,567);
console.log('date8', date8);


// 날짜 구성요소 얻기

// Date 객체의 메서드를 사용하면 연,월,일 등의 값을 얻을 수 있습니다.

// getFullYear() - 연도(네 자릿수) 를 반환합니다.
console.log(date8.getFullYear());

// getMonth() - 월을 반환합니다. (0 이상 11 이하)
console.log(date8.getMonth());

// getDate() - 일을 반환합니다. (1이상 31이하)
console.log(date8.getDate());

// getHours(), getMinute(), getSeconds(), getMilliseconds(); - 시,분,초,밀리초 를 반환합니다.
console.log(date8.getHours());
console.log(date8.getMinutes());
console.log(date8.getSeconds());
console.log(date8.getMilliseconds());


// getYear() 말고 getFullYear() 를 사용하세요.

// 여러 자바스크립트 엔진이 더는 사용되지 않는 비표준 메서드 getYear() 을 구현하고 있습니다.
// 이 메서드는 두 자릿수 연도를 반환하는 경우가 있기 때문에 절대 사용해선 안 됩니다.
// 연도 정보를 얻고 싶다면 getFullYear() 를 사용하세요.


// 이 외에도 요일을 반환해주는 메서드도 있습니다.

// getDay()
// 일요일을 나타내는 0부터 토요일을 나타내는 6까지 숫자 중 하나를 반환합니다.
// 몇몇 나라에서 요일의 첫날이 일요일이 아니긴 하지만, getDay() 에선 항상 0이 일요일을 나타냅니다. 이를 변경할 방법은 없습니다.
console.log(date8.getDay());


// 위에서 소개해드린 메서드 모두는 현지 시간 기준 날짜 구성요소를 반환합니다.

// 위 메서드 이름에 있는 'get' 다음에 'UTC' 를 붙여주면 표준시(UTC+0) 기준의 날짜 구성 요소를 반환해주는 메서드를 만들 수 있습니다.

console.log(date8.getUTCFullYear());
console.log(date8.getUTCMonth());
console.log(date8.getUTCDate());
console.log(date8.getUTCDay());

// 현지 시간대가 UTC 시간대와 다르다면 아래 예시를 실행했을 때 얼럿창엔 다른 값이 출력됩니다.

console.log(new Date().getHours());
console.log(new Date().getUTCHours());
console.log('new Date().getHours() == new Date().getUTCHours()', new Date().getHours() == new Date().getUTCHours());

// 아래 두 메서드는 위에서 소개한 메서드와 달리 표준시(UTC+0) 기준의 날짜 구성 요소를 반환해주는 메서드가 없습니다.

// getTime()
// 주어진 일시와 1970년 1월 1일 0시 0분 0초 사이의 간격(밀리초 단위)인 타임스탬프를 반환합니다.
console.log('new Date().getTime()', new Date().getTime());

// getTimezoneOffset() - 현지 시간과 표준 시간의 차이(분)를 반환합니다.
console.log('new Date().getTimezoneOffset()', new Date().getTimezoneOffset());


// 날짜 구성요소 설정하기

// 아래 메서드를 사용하면 날짜 구성요소를 설정할 수 있습니다.

let date9 = new Date();

// date9.setFullYear(year, [month], [date])
// date9.setMonth(month, [date])
// date9.setDate(date)
// date9.setHours(hour, [min], [sec], [ms])
// date9.setMinutes(min, [sec], [ms])
// date9.setSeconds(sec, [ms])
// date9.setMilliseconds(ms)
// date9.setTime(miliseconds) - 1970년 1월 1일 0:0:0 UTC 부터 밀리초 이후를 나타내느 날짜를 설정

// setTime() 을 제외한 모든 메서드는 setUTCHours() 같이 표준시에 따라 날짜 구성 요소를 설정해주는 메서드가 있습니다.

// setHours 와 같은 메서드는 여러 개의 날짜 구성요솨를 동시에 설정할 수 있는데, 메서드의 인수에 없는 구성요소는 변경되지 않습니다.

date9.setHours(13);
console.log('date9',date9);

date9.setHours(14,0,0,0);
console.log('date9',date9);


// 자동 고침

// Date 객체엔 자동 고침이라는 유용한 기능이 있습니다.
// 범위를 벗어나는 값을 설정하려고 하면 자동 고침 기능이 활성화되면서 값이 자동으로 수정됩니다.

let date10 = new Date(2023,13,32);
console.log(date10);

// 자동 고침은 일정 시간이 지난 후의 날짜를 구하는데도 종종 사용됩니다.

let date11 = new Date();
date11.setSeconds(date11.getSeconds() + 120);
console.log('date11', date11);

// 0 이나 음수를 날짜 구성요소에 설정하는 것도 가능합니다.

date11.setDate(date11.getDate() - 10);
console.log('date11', date11);


// Date 객체를 숫자로 변경해 시간차 측정하기

// Date 객체를 숫자형으로 변경하면 타임스탬프(date.getTime()) 가 됩니다.

// 이를 응용하면 날짜에 마이너스 연산자를 적용해 밀리초 기준 시차를 구할 수 있습니다.
// 시차를 측정해 나만의 스톱워치를 만들어봅시다.

let start1 = new Date(); // 측정 시작

for(let i=0; i<1e6; i++) {
    let doSomething = i*i*i;
}

let end1 = new Date(); // 측정 종료

console.log(` 반복문을 모두 수행하는데 ${end1-start1} 밀리초가 걸렸습니다.`);

// Date.now()

// Date 객체를 만들지 않고도 시차를 측정할 방법이 있습니다.

// 현재 타임스탬프를 반환하는 메서드 Date.now() 를 응용하면 됩니다.

// Date.now() 는 new Date().getTime() 과 의미론적으로 동일하지만 중간에 Date 객체를 만들지 않는다는 점이 다릅니다.
// 따라서 new Date().getTime() 를 사용하는 것보다 빠르고 가비지 컬렉터의 일을 덜어준다는 장점이 있습니다.

// 자바스크립트를 사용해 게임을 구현한다던가 전문분야의 애플리케이션을 구현할 떄와 같이 성능이 중요한 경우에 Date.now() 가 자주 활용됩니다.
// 물론 편의를 위해 활용되기도 하죠.

// 위 예시를 Date.now() 를 사용해 변경하면 성능이 더 좋습니다.

let start2 = Date.now(); // 측정 시작

for(let i=0; i<1e6; i++) {
    let doSomething = i*i*i;
}

let end2 = Date.now(); // 측정 종료

console.log(` 반복문을 모두 수행하는데 ${end2-start2} 밀리초가 걸렸습니다.`);

// 그런데 .. 이런 구문에서는 그다지 의미는 없을듯 ?.. 속도보단 객체를 만들지 않기 위해서 만든 메서드인듯함



// 벤치마크 테스트

// 벤치마크 테스트는 비교 대상을 두고 성능을 비교하여 시험하고 평가할 때 쓰입니다.
// CPU 를 많이 잡아먹는 함수의 신뢰할만한 벤치마크(평가기준)를 구하려면 상당한 주의가 필요합니다.
// 두 날짜의 차이를 계산해주는 함수 두개가 있는데, 어느 함수의 성능이 더 좋은지 알아내야 한다고 가정해봅시다.

function diffSubtract(date1, date2) {
  return date2 - date1;
}

function diffGetTime(date1, date2) {
  return date2.getTime() - date1.getTime();
}

// 두 함수는 완전 동일한 작업을 수행하지만, 한 함수는 날짜를 밀리초 단위로 얻기 위해 date.getTime() 를 사용하고 있고, 다른 함수는 마이너스 연산자 적용 시 객체가 숫자형으로 변화한다는 특징을 사용하고 있습니다.
// 두 함수가 반환하는 값은 항상 동일하죠.

// 속도는 어떨까요?

// 연속해서 함수를 아주 많이 호출한 후, 실제 연산이 종료되는 데 걸리는 시간을 비교하면 두 함수의 성능을 비교할 수 있을 겁니다.
// 두 함수는 아주 간단한 함수이기 때문에 유의미한 시차를 구하려면 각 함수를 최소한 십만 번 호출해야 합니다.

function bench(f) {
    let date1 = new Date(0);
    let date2 = new Date();

    let start = Date.now();
    for(let i=0; i<1e5; i++) f(date1,date2);
    return Date.now() - start
};

console.log( 'diffSubtract를 십만번 호출하는데 걸린 시간: ' + bench(diffSubtract) + 'ms' );
console.log( 'diffGetTime을 십만번 호출하는데 걸린 시간: ' + bench(diffGetTime) + 'ms' );

// 형 변환이 없어서 엔진 최적화에 드는 자원이 줄기 때문에 getTime() 을 이용한 방법이 훨씬 빠릅니다.
// 자, 벤치마크로 쓸 뭔가를 구하긴 했습니다. 그런데 이 벤치마크는 그다지 좋은 벤치마크가 아닙니다.

// bench(diffSubtract) 를 실행하고 있을 때 CPU 가 어떤 작업을 병렬적으로 처리하고 있고, 여기에 CPU 의 자원이 투입되고 있다고 가정해 봅시다.
// 그리고 bench(diffGetTime) 을 실행할 땐, 이 작접이 끝난 상태라고 가정해 봅시다.

// 멀티 프로세스를 지원하는 운영체제에서 이런 시나리오는 흔히 발생합니다.

// 첫 번째 benchmark 가 실행될 땐 사용할 수 있는 CPU 자원이 적었기 때문에 이 벤치마크는 좋지 않습니다.

// 좀 더 신뢰할만한 벤치마크 테스트를 만들려면 benchmark 를 번갈아 가면서 여러 번 돌려야 합니다.

// 아래와 같이 말이죠.

let time1 = 0;
let time2 = 0;

for(let i=0; i<10; i++) {
    time1 += bench(diffSubtract);
    time2 += bench(diffGetTime);
}

console.log( 'diffSubtract에 소모된 시간: ' + time1 );
console.log( 'diffGetTime에 소모된 시간: ' + time2 );

// 모던 자바스크립트 엔진은 아주 많이 실행된 코드인 'hot code' 를 대상으로 최적화를 수행합니다.(실행 횟수가 적은 코드는 최적화할 필요가 없죠)
// 위 예시에서 bench 를 첫 번째 실행했을 때는 최적화가 잘 적용되지 않기 때문에 아래 코드처럼 메인 반복문을 실행하기 전에 예열용(heat-up) 으로 bench 를 실행할 수 있습니다.

time1 = 0;
time2 = 0;

// 메인 반복문 실행 전, "예열용"으로 추가한 코드
bench(diffSubtract);
bench(diffGetTime);

// 벤치마크 테스트 시작
for (let i = 0; i < 10; i++) {
  time1 += bench(diffSubtract);
  time2 += bench(diffGetTime);
}

console.log( 'diffSubtract에 소모된 시간: ' + time1 );
console.log( 'diffGetTime에 소모된 시간: ' + time2 );

// Date.parse 와 문자열

// 메서드 Date.parse(str) 를 사용하면 문자열에서 날짜를 읽어올 수 있습니다.
// 단, 문자열의 형식은 YYYY-MM-DDTHH:mm:ss.sssZ 처럼 생겨야 합니다.

// YYYY-MM-DD : 날짜(연-월-일)
// T : 구분 기호로 쓰임
// HH:mm:ss.sss : 시:분:초.밀리초
// Z : 옵션, +-hh:mm 형식의 시간대를 나타냄, Z 한 글자인 경우엔 UTC+0 을 나타냄

// YYYY-MM-DD, YYYY-MM, YYYY 같이 더 짧은 문자열 형식도 가능합니다.

// 위 조건을 만족하는 문자열을 대상으로 Date.parse(str) 를 호출하면 문자열과 대응하는 날짜의 타임스탬프가 반환됩니다.
// 문자열의 형식이 조건에 맞지 않은 경우엔 NaN 이 반환됩니다.

console.log(Date.parse('2012-01-26T13:51:50.417-07:00') + 'ms');

// Date.parse(str) 를 이용하면 타임스탬프만으로도 새로운 Date 객체를 바로 만들 수 있습니다.

let date12 = new Date(Date.parse('2012-01-26T13:51:50.417-07:00'));
console.log('date12',date12);



// 요약

// 자바스크립트에선 Date 객체를 사용해 날짜와 시간을 나타냅니다.
// Date 객체엔 '날짜만' 혹은 '시간만' 저장하는 것은 불가능하고, 항상 날짜와 시간이 함께 저장됩니다.
// 월은 0부터 시작합니다.
// 요일은 getDay() 를 사용하면 얻을 수 있는데, 요일 역시 0부터 시작합니다. 0은 일요일을 나타냅니다.
// 범위를 넘어가는 구성요소를 설정하려 할 때 Date 자동 고침이 활성화됩니다. 이를 이용하면 월/일/시간을 쉽게 날짜에 추가하거나 뺄 수 있습니다.
// 날짜끼리 빼는 것도 가능한데, 이때 두 날짜의 밀리초 차이가 반환됩니다. 이게 가능한 이유는 Date 가 숫자형으로 바뀔 때 타임스탬프가 반환되기 때문입니다.=
// Date.now() 를 사용하면 현재 시각의 타임스탬프를 빠르게 구할 수 있습니다.

// 자바스크립트의 타임스탬프는 초가 아닌 밀리초 기준이라는 점을 항상 유의하시기 바랍니다.

// 간혹 밀리초보다 더 정확한 시간 측정이 필요할 때가 있습니다.
// 자바스크립트는 마이크로초(1/1,000,000초) 를 지원하진 않지만 대다수의 호스트 환경은 마이크로초를 지원합니다.
// 브라우저 환경의 메서드 performance.now() 는 페이지 로딩에 걸리는 밀리초를 반환해주는데, 반환되는 숫자는 소수점 아래 세 자리까지 지원합니다.
console.log('window.performance.now()', window.performance.now());

// Node.js 에선 microtime 모듈 등을 사용해 마이크로초를 사용할 수 있습니다.
// 자바스크립트가 구동되는 대다수의 호스트 환경과 기기에서 마이크로초를 지원하고 있는데 Date 객체만 마이크로초를 지원하지 않습니다.

</script>