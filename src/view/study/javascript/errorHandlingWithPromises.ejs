<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>
// 프라미스와 에러 핸들링

// 프라미스가 거부되면 제어 흐름이 제일 가까운 rejection 핸들러로 넘어가기 때문에 프라미스 체인을 사용하면 에러를 쉽게 처리할 수 있습니다.
// 이는 실무에서 아주 유용한 기능입니다.

// 존재하지 않는 주소를 fetch에 넘겨주는 예시를 살펴봅시다.

fetch('https://no-such-server.blabla')
    .then(response => response.json)
    .catch(err => console.log(err));

// 예시에서 보듯 .catch 는 첫번째 핸들러일 필요가 없고 하나 혹은 여러 개의 .then 뒤에 올 수 있습니다.
// 이번엔 사이트에는 아무런 문제가 없지만 응답으로 받은 JSON 의 형식이 잘못된 경우를 살펴봅시다.
// 가장 쉬운 에러 처리 방법은 체인 끝에 .catch 를 붙이는 것입니다.


// 암시적 try...catch

// 프라미스 executor 와 프라미스 핸들러 코드 주위엔 '보이지 않는(암시적) try...catch' 가 있습니다.
// 예외가 발생하면 암시적 try...catch 에서 예외를 잡고 이를 reject 처럼 다룹니다.

new Promise((resolve, reject) => {
    throw new Error('error1');
}).catch(
    (error) => console.log(error)
);

// 위 예시는 아래 예시와 똑같이 동작합니다.

new Promise((resolve, reject) => {
    reject(new Error('error2'));
}).catch(
    (error) => console.log(error)
);

// executor 주위와 '암시적 try..catch' 는 스스로 에러를 잡고, 에러를 거부상태의 프라미스로 변경시킵니다.

// 이런 일은 executor 함수뿐만 아니라 핸들러에서도 발생합니다.
// .then 핸들러 안에서 throw 를 사용해 에러를 던지면, 이 자체가 거부된 프라미스를 의미하게 됩니다.
// 따라서 제어 흐름이 가장 가까운 에러 핸들러로 넘어갑니다.

new Promise((resolve, reject) => {
    resolve('ok1')
}).then(
    result => {
        console.log(result);
        throw new Error('error3');
    }
).catch(
    error => console.log(error)
);

// throw 문이 만든 에러뿐만 아니라 모든 종류의 에러가 암시적 try...catch 에서 처리됩니다.
// 암시적 try...catch 가 프로그래밍 에러를 어떻게 처리하는지 살펴봅시다.

new Promise((resolve,reject) => {
    resolve('ok2');
}).then(
    result => blabla()
).catch(
    error => console.log('error 발생 : ', error)
);

// 마지막 .catch 는 이렇게 명시적인 거부뿐만 아니라 핸들러 위쪽에서 발생한 비정상 에러 또한 잡습니다.


// 다시 던지기

// 체인 마지막 .catch 는 try...catch 와 유사한 역할을 합니다.
// .then 핸들러를 원하는 만큼 사용하다 마지막에 .catch 하나만 붙이면 .then 핸들러에서 발생한 모든 에러를 처리할 수 있습니다.

// 일반 try...catch 에선 에러를 분석하고 처리할 수 없는 에러라 판단되면 에러를 다시 던질 때가 있습니다.
// 프라미스에도 유사한 일을 할 수 있습니다.

// .catch 안에서 throw 를 사용하면 제어 흐름이 가장 가까운 곳에 있는 에러 핸들러로 넘어갑니다.
// 여기서 에러가 성공적으로 처리되면 가장 가까운 곳에 있는 .then 핸들러로 제어 흐름이 넘어가 실행이 이어집니다.

// 아래 예시의 .catch 는 에러를 성공적으로 처리합니다.

new Promise((resolve, reject) => {
    throw new Error('error4');
}).catch(
    error => console.log('error 처리1', error)
).then(
    () => console.log('error 처리1 이후 ')
);

// .catch 블록이 정상적으로 종료되었기 때문에 다음 성공 핸들러 .then 이 호출된 것을 확인할 수 있습니다.

// .catch 를 활용한 또 다른 사례를 살펴봅시다.

new Promise((resolve, reject) => {
    throw new Error('error5');
}).catch(
    (error) => {
        if(error instanceof URIError) {
            console.log('error 처리2', error);
        } else {
            console.log('error 처리2 불가', error);
            throw error;
        }
    }
).then(
    () => console.log('error 처리2 이후')
).catch(
    error => console.log('error 처리2 불가 이후', error)
);

// 실행 흐름이 첫 번째 .catch 로 넘어갔다가 다음 .catch 로 이어지는 것을 확인할 수 있습니다.


// 처리되지 못한 거부

// 에러를 처리하지 못하면 무슨 일이 생길까요? 아래 예시처럼 체인 끝에 .catch 를 추가하지 못하는 경우처럼 말이죠.

new Promise(
    function() {
        noSuchFunction();
    }
).then(
    result => console.log(result),
    // error => console.log('error6', error),
);

// 에러가 발생하면 프라미스는 거부상태가 되고, 실행 흐름은 가장 가까운 rejection 핸들러로 넘어갑니다.
// 그런데 위 예시엔 예외를 처리해 줄 핸들러가 없어서 에러가 '갇혀버립니다'.
// 에러를 처리할 코드가 없기 때문입니다.

// 이런 식으로 코드에 처리하지 못한 에러가 남게 되면 실무에선 끔찍한 일이 발생합니다.

// 일반적인 에러가 발생하고 이를 try...catch 에서 처리하지 못하는 경우를 생각해봅시다.
// 스크립트가 죽고 콘솔창에 메시지가 출력되겠죠.
// 거부된 프라미스를 처리하지 못했을 때도 유사한 일이 발생합니다.

// 자바스크립트 엔진은 프라미스 거부를 추적하다가 위와 같은 상황이 발생하면 전역 에러를 생성합니다.
// 콘솔창을 열고 위 예시를 실행하면 전역 에러를 확인할 수 있습니다.


// 브라우저 환경에선 이런 에러를 unhandledrejection 이벤트로 처리할 수 있습니다.

window.addEventListener('unhandledrejection', function(event){
    console.log(event.promise);
    console.log(event.reason);
});

new Promise(function() {
    throw new Error('error7');
});

// unhandledrejection 이벤트는 HTML 명세서에 정의된 표준 이벤트입니다.

// 브라우저 환경에선 에러가 발생했는데 .catch 가 없으면 unhandledrejection 핸들러가 트리거 됩니다.
// unhandledrejection 핸들러는 에러 정보가 담긴 event 객체를 받기 때문에 이 핸들러 안에서 원하는 작업을 할 수 있습니다.

// 대개 이런 에러는 회복할 수 없기 때문에 개발자로서 할 수 있는 최선의 방법은 사용자에게 문제 상황을 알리고 가능하다면 서버에 에러 정보를 보내는 것입니다.

// Node.js 같은 기타 호스트 환경에도 처리하지 못한 에러를 다루는 방법을 여러 가지 제공합니다.


// 요약
// .catch 는 프라미스에서 발생한 모든 에러를 다룹니다. reject() 가 호출되거나 에러가 던져지면 .catch 에서 이를 처리합니다.
// .catch 는 에러를 처리하고 싶은 지점에 정확히 위치시켜야 합니다. 물론 어떻게 에러를 처리할지 알고 있어야하죠.
// 핸들러에선 에러를 분석하고 알수 없는 에러는 다시 던질 수 있습니다.
// unhandledrejection 이벤트 핸들러를 사용해 처리되지 않은 에러를 추적하고, 이를 사용자(혹은 서버에)에게 알려서 애플리케이션이 아무런 설명도 없이 ‘그냥 죽는걸’ 방지합시다.
// 브라우저 환경에선 예방에 unhandledrejection을, 다른 환경에선 유사한 핸들러를 사용할 수 있습니다.

</script>