<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 프로퍼티 getter 와 setter

// 객체의 프로퍼티는 두 종류로 나뉩니다.

// 첫 번째는 종류는 데이터 프로퍼티(data property) 입니다.
// 지금까지 사용한 모든 프로퍼티는 데이터 프로퍼티 입니다.

// 두 번째는 접근자 프로퍼티(accessor property) 라 불리는 새로운 종류의 프로퍼티 입니다.
// 접근자 프로퍼티의 본질은 함수인데, 이 함수는 값을 획득(get) 하고 설정(set) 하는 역할을 담당합니다.
// 그런데 외부 코드에서는 함수가 아닌 일반적인 프로퍼티처럼 보입니다.

// getter 와 setter

// 접근자 프로퍼티는 getter(획득자) 와 setter(설정자) 메서드로 표현됩니다.
// 객체 리터럴 안에서 getter 와 setter 메서드는 get 과 set 으로 나타낼 수 있습니다.

let obj1 = {
    get propName() {
        // getter, obj1.propName 을 실행할 때 실행되는 코드
    },

    set propName(value) {
        // setter, obj1.propName = value 를 실행할 때 실행되는 코드
    }
};

// getter 메서드는 obj1.propName 을 사용해 프로퍼티를 읽으려고 할 떄 실행되고
// setter 메서드는 obj1.propName = value 으로 프로퍼티에 값을 할당하려 할 때 실행됩니다.

let obj2 = {
    name: 'inhui',
    firstname: 'noh',
};

// 이 객체에 fullName 이라는 프로퍼티를 추가해 fullName 이 'noh inhui' 가 되도록 해봅시다.

let obj3 = {
    name: 'inhui',
    firstname: 'noh',
    get fullName() {
        return `${this.firstname} ${this.name}`;
    }
};

console.log('obj3.fullName', obj3.fullName);

// 바깥 코드에선 접근자 프로퍼티를 일반 프로퍼티처럼 사용할 수 있습니다.
// 접근자 프로퍼티는 이런 아이디어에서 출발했습니다.
// 접근자 프로퍼티를 사용하면 함수처럼 호출하지 않고, 일반 프로퍼티에서 값에 접근하는 것처럼 평범하게 obj3.fullName 을 사용해 프로퍼티 값을 얻어 낼 수있습니다.
// 나머지 작업은 getter 메서드가 뒷단에서 처리해줍니다.

// 한편, 위 예시의 fullName 은 getter 메서드만 가지고 있기 때문에 user.fullName= 을 사용해 값을 할당하려고 하면 에러가 발생합니다.

obj3.fullName = 'test';
console.log('obj3.fullName', obj3.fullName);

// obj3.fullName 에 setter 메서드를 추가해 에러가 발생하지 않도록 고쳐봅시다.

let obj4 = {
    name: 'inhui',
    firstname: 'noh',
    
    get fullName() {
        return `${this.firstname} ${this.name}`;
    },
    
    set fullName(value) {
        [this.name, this.firstname] = value.split(' ');
    }
};

obj4.fullName = 'user test';

console.log('obj4.name', obj4.name);
console.log('obj4.firstname', obj4.firstname);
console.log('obj4.fullName', obj4.fullName);

// 이렇게 getter 와 setter 메서드를 구현하면 객체엔 fullName 이라는 '가상' 프로퍼티가 생깁니다.
// 가상의 프로퍼티는 읽고 쓸 순 있지만 실제로는 존재하지 않습니다.


// 접근자 프로퍼티 설명자

// 데이터 프로퍼티의 설명자와 접근자 프로퍼티의 설명자는 다릅니다.
// 접근자 프로퍼티엔 설명자 value 와 writable 가 없는 대신에 get 과 set 이라는 함수가 있습니다.
// 따라서 접근자 프로퍼티는 다음과 같은 설명자를 갖습니다.

// get - 인수가 없는 함수로, 프로퍼티를 읽을 때 동작함
// set - 인수가 하나인 함수로, 프로퍼티에 값을 쓸 때 호출됨
// enumerable - 데이터 프로퍼티와 동일함
// configurable - 데이터 프로퍼티와 동일함


// 아래와 같이 defineProperty 에 설명자 get 과 set 을 전달하면 fullname 을 위한 접근자를 만들 수 있습니다.

let obj5 = {
    name: 'inhui',
    firstname: 'noh',
};

Object.defineProperty(obj5, 'fullName', {
    get() {
        return `${this.firstname} ${this.name}`;
    },

    set(value) {
        [this.name, this.firstname] = value.split(' ');
    },
})

obj5.fullName = 'user22 test22';
console.log('obj5.fullName', obj5.fullName);
console.log('Object.keys(obj5)', Object.keys(obj5));

// 프로퍼티는 접근자 프로퍼티(get/set 메서드를 가짐) 나 데이터 프로퍼티(value를 가짐) 중 한 종류에만 속하고 둘 다에 속할 수 없다는 점을 항상 유의하시기 바랍니다.

// 한 프로퍼티에 get 과 value 를 동시에 설정하면 에러가 발생합니다.

try {
    Object.defineProperty(obj5, 'prop', {
        get() {
            return 1;
        },
        value: 2,
    });
} catch(e) {
    console.log(e);
}


// getter 와 setter 똑똑하게 활용하기

// getter 와 setter 를 실제 프로퍼티 값에 감싸는 래퍼(wrapper) 처럼 사용하면, 프로퍼티 값을 원하는 대로 통제할 수 있습니다.

// 아래 예시에선 name 을 위한 setter 를 만들어 obj 의 이름이 너무 짧아지는 걸 방지하고 있습니다.
// 실제 값은 별도의 프로퍼티 _name 에 저장됩니다.

let obj6 = {
    get name() {
        return this._name;
    },

    set name(value) {
        if(value.length < 4) {
            console.log('name too short');
            return;
        }
        this._name = value;
    }
}

obj6.name = 'pete';
console.log('obj6.name', obj6.name);

obj6.name = 'te';


// obj 의 이름은 _name 에 저장되고, 프로퍼티에 접근하는 것은 getter 와 setter 를 통해 이뤄집니다.

// 기술적으론 외부 코드에서 obj._name 을 사용해 이름에 바로 접근할 수 있습니다.
// 그러나 밑줄 '_' 로 시작하는 프로퍼티는 객체 내부에서만 활용하고, 외부에서 건드리지 않는 것이 관습입니다.


// 호환성을 위해 사용하기

// 접근자 프로퍼티는 언제 어느 때나 getter 와 setter 를 사용해 데이터 프로퍼티의 행동과 값을 원하는 대로 조정할 수 있게 해준다는 점에서 유용합니다.
// 데이터 프로퍼티의 name 과 age 를 사용해서 사용자를 나타내는 객체를 구현한다고 가정해봅시다.

function Func1(name, age) {
    this.name = name;
    this.age = age;
}

let obj8 = new Func1('inhui', 32);

console.log('obj8', obj8);

// 그런데 곧 요구사항이 바뀌어서 age 대신에 birthday 를 저장해야 한다고 해봅시다.

function Func2(name, birthday) {
    this.name = name;
    this.birthday = birthday;
}

let obj9 = new Func2('inhui', new Date(1992,8,24));

console.log('obj9', obj9);

// 이렇게 생성자 함수를 수정하면 기존 코드 중 프로퍼티 age 를 사용하고 있는 코드도 수정해 줘야 합니다.

// age 가 사용되는 부분을 모두 찾아서 수정하는 것도 가능하지만, 시간이 오래 걸립니다.
// 게다가 여러 사람이 age 를 사용하고 있다면 모두 찾아 수정하는 것 자체가 힘들죠.
// 게다가 age 는 obj 안에 있어도 나쁠 것이 없는 프로퍼티이기도 합니다.

// 기존 코드들은 그대로 두고 대신 age 를 위한 getter 를 추가해서 문제를 해결해 봅시다.

function Func3(name, birthday) {
    this.name = name;
    this.birthday = birthday;

    Object.defineProperty(this, 'age', {
        get() {
            let year = new Date().getFullYear();
            return year - this.birthday.getFullYear();
        }
    });
}

let obj10 = new Func3('inhui', new Date(1992,8,24));

console.log('obj10.age', obj10.age);


</script>