<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>
// 프라미스 API

// Promise 클래스에는 5가지 정적 메서드가 있습니다.
// 이번 챕터에선 다섯 메서드의 유스 케이스에 대해서 빠르게 알아보겠습니다.


// Promise.all

// 여러 개의 프라미스를 동시에 실행시키고 모든 프라미스가 준비될 때까지 기다린다고 해봅시다.
// 복수의 URL이 동시에 요청을 보내고, 다운로드가 모두 완료된 후에 콘텐츠를 처리할 때 이런 상황이 발생합니다.

// 문법
// let promise = Promise.all([...promises...]);

// Promise.all 은 요소 전체가 프라미스인 배열을 받고 새로운 프라미스를 반환합니다.
// 배열 안 프라미스가 모두 처리되면 새로운 프라미스가 이행되는데, 배열 안 프라미스의 결과값을 담은 배열이 새로운 프라미스의 result 가 됩니다.

Promise.all(
    [
        new Promise(resolve => setTimeout(() => resolve(1), 1000)),
        new Promise(resolve => setTimeout(() => resolve(2), 1000)),
        new Promise(resolve => setTimeout(() => resolve(3), 1000)),
    ]
).then(
    console.log
);

// 배열 result 의 요소 순서는 Promise.all 에 전달되는 프라미스 순서와 상응한다는 점에 주목해 주시기 바랍니다.
// Promise.all 의 첫 번째 프라미스는 가장 늦게 이행되더라도 처리 결과는 배열의 첫 번째 요소에 저장됩니다.

// 작업해야 할 데이터가 담긴 배열을 프라미스 배열로 매핑하고, 이 배열을 Promise.all 로 감싸는 트릭은 자주 사용됩니다.

// URL 이 담긴 배열을 fetch를 써서 처리하는 예시를 살펴봅시다.

let urls = [
    '/test/fetchTest',
    '/test/fetchTest2',
    '/test/fetchTest3',
    '/test/fetchTest4',
];

let requests = urls.map(v => fetch(v));

Promise.all(requests).then(
    responses => responses.map(
        response => response.text().then(body => console.log(body))
        // v => console.log(v)
    )
);

// Promise.all 에 전달되는 프라미스 중 하나라도 거부되면, Promise.all 이 반환하는 프라미스는 에러와 함께 바로 거부됩니다.

Promise.all(
    [
        new Promise((resolve, reject) => setTimeout(() => resolve(1), 1000)),
        new Promise((resolve, reject) => setTimeout(() => reject(new Erorr('error1')), 1000)),
        new Promise((resolve, reject) => setTimeout(() => resolve(2), 1000)),
    ]
).then(
    responses => responses.map(response => console.log(response))
).catch(
    error => console.log(error)
);

// 2초 후 두 번째 프라미스가 거부되면서 Promise.all 전체가 거부되고 .catch 가 실행됩니다.
// 거부 에러는 Promise.all 전체의 결과가 됩니다.


// 에러가 발생하면 다른 프라미스는 무시됩니다.

// 프라미스가 하나라도 거부되면 Promise.all 은 즉시 거부되고 배열에 저장된 다른 프라미스의 결과는 완전히 무시됩니다.
// 이행된 프라미스의 결과도 무시되죠.
// fetch 를 사용해 호출 여러 개를 만들면, 그 중 하나가 실패하더라도 호출은 계속 일어납니다.
// 그렇더라도 Promise.all 은 다른 호출을 더는 신경 쓰지 않습니다.
// 프라미스가 처리되긴 하겠지만 그 결과는 무시됩니다.
// 프라미스에는 '취소' 라는 개념이 없어서 Promise.all 도 프라미스를 취소하지 않습니다.
// 또 다른 챕터에서 배울 AbortController 를 사용하면 프라미스 취소가 가능하긴 하지만, AbortController 는 프라미스 API는 아닙니다.


// 이터러블 객체가 아닌 일반값도 Promise.all(iterable) 에 넘길 수 있습니다.

// Promise.all(...) 은 대개 프라미스가 요소인 이터러블 객체를 받습니다.
// 그런데 요소개 프라미스가 아닌 객체일 겨웅엔 요소 그대로 결과 배열에 전달됩니다.

Promise.all(
    [
        new Promise((resolve, reject) => resolve(1)),
        2,
        3,
    ]
).then(console.log);


// Promise.allSettled

// Promise.all 은 프라미스가 하나라도 거절되면 전체를 거절합니다.
// 따라서, 프라미스 결과가 모두 필요할 때같이 '모 아니면 도' 일 때 유용합니다.

// 반면 Promise.allSettled 는 모든 프라미스가 처리될 때까지 기다립니다.
// 반환되는 배열은 다음과 같은 요소를 갖습니다.

// 응답이 성공할 경우 : {status: "fulfilled", value: result}
// 에러가 발생한 경우 : {status: "rejected", value: error}

// fetch 를 사용해 정보를 가져오고 있다고 해봅시다.
// 여러 요청 중 하나가 실패해도 다른 요청 결과는 여전히 필요합니다.
// 이럴 때 Promise.allSettled 를 사용할 수 있습니다.

let urls2 = [
    '/test/fetchTest',
    '/test/fetchTest2',
    '/test/fetchTest3',
    '/test/fetchTest4',
    'https://no-such-url',
];

Promise.allSettled(
    urls2.map(v => fetch(v))
).then(
    responses => {
        responses.map(response => {
            if(response.status == "rejected") {
                console.log(response.reason);
            } else {
                response.value.text().then(body => console.log(body))
            }
        })
    }
);

// Promise.allSettled 를 사용하면 이처럼 각 프라미스의 상태와 값 또는 에러를 받을 수 있습니다.


// Promise.race

// Promise.race 는 Promise.all 과 비슷합니다.
// 다만 가장 먼저 처리되는 프라미스의 결과(혹은 에러)를 반환합니다.

Promise.race(
    [
        new Promise((resolve, reject) => setTimeout(() => resolve(1), 3000)),
        new Promise((resolve, reject) => setTimeout(() => resolve(2), 1000)),
        new Promise((resolve, reject) => setTimeout(() => reject(new Error('error')), 1500)),
        new Promise((resolve, reject) => setTimeout(() => resolve(3), 2000)),
    ]
).then(console.log).catch(console.log);

// 이렇게 Promise.race 를 사용하면 '경주(race)의 승자'가 나타난 순간 다른 프라미스의 결과 또는 에러는 무시됩니다.


// Promise.resolve 와 Promise.reject

// 프라미스 메서드 Promise.resolve 와 Promise.reject 는 async / await 문법이 생긴 후로 쓸모 없어졌기 때문에 근래에는 거의 사용하지 않습니다.
// 어떤 이유 때문이라도 async / await 를 사용하지 못하는 분들을 위해 메서드를 알아보겠습니다.

// Promise.resolve

// Promise.resolve(value) 는 결괏값이 value 인 이행 상태 프라미스를 생성합니다.
// 아래 코드와 동일한 일을 수행합니다.

let promise1 = new Promise(resolve => resolve(value));

// Promise.resolve 는 호환성을 위해 함수가 프라미스를 반환하도록 해야 할 때 사용할 수 있습니다.

let cache = new Map();

function loadCached(url) {
    if(cache.has(url)) {
        return Promise.resolve(cache.get(url));
    }

    return fetch(url)
        .then(response => response.text())
        .then(text => {
            cache.set(url,text);
            return text;
        });
}

//  Promise.reject

// Promise.reject(error) 는 결괏값이 error 인 거부 상태 프라미스를 생성합니다.
// 아래 코드와 동일한 일을 수행합니다.

let promise2 = new Promise((resolve,reject) => reject(new Error('error')));

// 실무에서 이 메서드는 쓸 일은 거의 없습니다.



</script>