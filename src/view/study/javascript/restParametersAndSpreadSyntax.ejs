<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 나머지 매개변수와 스프레드 문법

// 나머지 매개변수 ...
// 아래와 같이 함수 정의 방법과 상관없이 함수에 넘겨주는 인수의 개수엔 제약이 없다.
function sum(a,b) {
    return a+b;
}
console.log('sum',sum(1,2,3,4,5,6,7,8,9,10));
// 함수를 정의할 땐 인수를 두 개만 받도록 하고, 실제 함수를 호출할 땐 이보다 더 많은 인수를 전달했지만, 에러가 발생하지 않는다.
// 다만 반환값은 처음 두 개의 인수만을 사용해 계산함
// 이렇게 여분의 매개변수는 그 값들을 담을 배열 이름을 마침표 세 개 ... 뒤에 붙여주면 함수 선언부에 포함시킬 수 있음
// 이 때 마침표 세 개 ... 는 "남아있는 매개변수들을 한데 모아 배열에 집어넣어라"는 것을 의미함
function sumAll(...args) {
    let sum = 0;
    args.map(v => sum += v);
    return sum;
}
console.log('sumAll',sumAll(1,2,3,4,5,6,7,8,9,10));

function showName(first,second,...names) {
    console.log(first, second, names);
}
showName('a','b','c','d','e');
showName('a','b');

// 나머지 매개변수는 항상 마지막에 있어야 함
// 나머지 매개변수는 남아있는 인수를 모으는 역할을 하므로 아래 예시에선 에러가 발생함
/**
function error1(arg1, ...rest, art2)  {
    
}
*/

// arguments 객체
// 유사 배열 객체(array-like object)인 arguments 를 사용하면 인덱스를 사용해 인수에 접근 할 수 있다.

function showName2() {
    console.log('arguments.length)',arguments.length);
    console.log('arguments', arguments);
    console.log('arguments list', arguments[0],arguments[1]);
}

showName2('boar','lee');
showName2('sal');

// 나머지 매개변수는 비교적 최신에 나온 문법입니다. 나머지 매개변수가 나오기 이전엔 함수의 인수 전체를 얻어내는 방법이 arguments 를 사용하는 것밖에는 없었습니다.
// 물론 지금도 arguments 를 사용할 수 있습니ㅐ다. 오래된 코드를 보다 보면 arguments 가 있습니다.
// arguments 는 유사 배열 객체이면서 이터러블(반복가능한) 객체입니다. 어쨌든 배열은 아닙니다. 따라서 배열 메서드를 사용할 수 없다는 단점이 있습니다.(map,reduce 등)
// 여기에 더하여 arguments 는 인수 전체를 담기 때문에 나머지 매개변수처럼 인수의 일부만 사용할 수 없다는 단점도 있음
// 따라서 배열 메서드를 사용하거나 인수 일부만 사용할 때는 나머지 매개변수(...) 를 사용하는것이 좋음

// 화살표 함수는 arguments 객체를 지원하지 않습니다.
// 화살표 함수에서 arguments 객체에 접근하면, 외부에 있는 '일반'함수의 arguments 객체를 가져옵니다.

function f1() {
    let showArg = () => console.log(arguments[0]);
    showArg();
}
f1(1);

// 스프레드 문법
// 지금까지 매개변수 목록을 배열로 가져오는 방법에 대해 살펴보았습니다.
// 그런데 개발을 하다 보면 반대되는 기능이 필요할 때가 생깁니다. 배열을 통째로 매개변수에 넘겨주는 것 같이 말이죠.
// 예시를 통해 이런 경우를 살펴봅시다. 내장 함수 Math.max 는 인수로 받은 숫자 중 가장 큰 숫자를 반환합니다.

console.log('Math.max(3,5,1)',Math.max(3,5,1));

// 배열 [3,5,1] 이 있고 이 배열을 대상으로 Math.max 를 호출하고 싶다고 가정해봅시다.
// 아무런 조작 없이 배열을 있는 그대로 Math.max 에 넘기면 원하는 대로 동작하지 않습니다. Math.max 는 배열이 아닌 숫자 목록을 인수로 받기 때문입니다.
let maxArr = [3,5,1];
console.log('maxArr', Math.max(maxArr));

// Math.max(arr[0],arr[1],arr[2]) 처럼 배열 요소를 수동으로 나열하는 방법도 있긴 한데, 배열 길이를 알 수 없을 때는 이마저도 불가능합니다.
// 스크립트가 돌아갈 때 실제 넘어오는 배열의 길이는 아주 길 수도 있고, 아예 빈 배열일 수도 있기 때문입니다. 
// 수동으로 이걸 다 처리하다 보면 코드가 지저분해지겠죠.
// 스프레드 문법은 이럴 때 사용하기 위해 만들어졌습니다. ... 를 사용하기 때문에 나머지 매개변수와 비슷해 보이지만, 스프레드 문법은 나머지 매개변수와 반대되는 역할을 합니다.
// 함수를 호출할 때 ...arr 를 사용하면 이터러블 객체 arr 이 인수 목록으로 확장됩니다.
let maxArr2 = [3,5,1];
console.log('maxArr2', Math.max(...maxArr2));

// 아래와 같이 이터러블 객체 여러 개를 전달하는 것도 가능합니다.
let arr1 = [1,-2,3,4];
let arr2 = [8,3,-8,1];

console.log('maxArr3', Math.max(1,...arr1,2,...arr2));

// 스프레드 문법은 배열을 합칠 때도 활용할 수 있습니다.
let mergedArr = [0,...arr1,2,...arr2];
console.log(mergedArr);

// 압선 예시들에선 배열을 대상으로 스프레드 문법이 어떻게 동작하는지 살펴보았습니다. 그런데 배열이 아니더라도 이터러블 객체이면 스프레드 문법을 사용할수있습니다.
let str = "hello";
console.log('[...str]',[...str]);

// 스프레드 문법은 for..of 와 같은 방식으로 내부에서 이터레이터(iterator, 반복자) 를 사용해 요소를 수집합니다.
// 문자열에 for..of 를 사용하면 문자열을 구성하는 문자가 반환됩니다. ...str 도 h,e,l,l,o가 되는데 이 문자 목록은 배열 초기자(array initializer) [...str] 로 전달됩니다.
// 메서드 Array.from 은 이터러블 객체인 문자열을 배열로 바꿔주기 때문에 Array.from 을 사용해도 동일한 작업을 할 수 있습니다.

console.log('Array.from(str)', Array.from(str));

// [...str] 과 동일하게 결과가 출력되는 것을 확인할 수 있습니다.
// 그런데 Array.from(obj) , [...obj] 는 다음과 같은 미묘한 차이가 있습니다.
// 스프레드 문법은 이터러블 객체에만 사용할 수 있습니다.
// 이런 이유 때문에 무언가를 배열로 바꿀 때는 스프레드 문법보다 Array.from 이 보편적으로 사용됩니다.

// 배열과 객체의 복사본 만들기
// Object.assign() 을 사용해 객체를 복사할수있다. 
// Object.assign() 말고도 스프레드 문법을 사용하면 배열과 객체를 복사할 수 있습니다.

let arr = [1,2,3];
let copyArr = [...arr];

console.log('JSON.stringify(arr) === JSON.stringify(copyArr)', JSON.stringify(arr) === JSON.stringify(copyArr));
console.log('arr === copyArr', arr === copyArr);

// 참조가 다르므로 기존 배열을 수정해도 복사본은 영향을 받지 않습니다.
arr.push(4);
console.log('arr',arr);
console.log('copyArr',copyArr);



// 이렇게 스프레드 문법을 사용하여
let jsonObj = {a:1,b:2};
let copyObj1 = Object.assign({},jsonObj);
let copyObj2 = {...jsonObj};

// 보다 짧은 코드로 배열이나 객체를 복사할 수 있어서 사람들은 이 방법을 선호하는 편입니다.




</script>