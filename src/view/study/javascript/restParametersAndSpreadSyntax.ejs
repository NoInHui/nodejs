<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 나머지 매개변수와 스프레드 문법

// 상당수의 자바스크립트 내장 함수는 인수의 개수에 제약을 두지 않습니다.

// 이번 챕터에서는 임의의 수를 인수를 받는 방법에 대해 알아보겠습니다.
// 또한 함수의 매개변수에 배열을 전달하는 방법에 대해서도 알아보겠습니다.

// 나머지 매개변수 ...

// 함수 정의 방법과 상관없이 넘겨주는 인수의 개수엔 제약이 없습니다.

// 여분의 매개변수는 그 값들을 담을 배열 이름을 마침표 세 개 ... 뒤에 붙여주면 함수 선언부에 포함시킬 수 있습니다.
// 이때 마침표 세 개 ... 는 '남아있는 매개변수들을 한데 모아 배열에 집어넣어라' 는 것을 의미합니다.

function func1(...args) {
    let sum = args.reduce((acc,cur,i) => {return acc+cur},0);
    console.log(sum);
}

func1(1,2,3,4);

// 앞부분의 매개변수는 변수로, 남아있는 매개변수들은 배열로 모을 수도 있습니다.

function func2(param1, param2, ...args) {
    console.log(param1, param2, args);
}

func2(1,2,3,4,5,6);

// 나머지 매개변수는 항상 마지막에 있어야 합니다.
// 나머지 매개변수는 남아있는 인수를 모으는 역할을 하므로 아래 예시에선 에러가 발생합니다.
// function func3(...args, param1) {}


// arguments 객체

// 유사 배열 객체인 arguments 를 사용하면 인덱스를 사용해 인수에 접근할 수 있습니다.
function func3() {
    console.log(arguments);
}

func3('a','b','c','d');

// 나머지 매개변수는 비교적 최신에 나온 문법입니다.
// 나머지 매개변수가 나오기 이전엔 함수의 인수 전체를 얻어내는 방법이 arguments 를 사용하는 것밖에 없었습니다.
// 물론 지금도 arguments 를 사용할 수 있습니다.
// 오래된 코드를 보다보면 arguments 를 만나게 되죠.

// arguments 는 유사 배열 객체이면서 이터러블 객체입니다.
// 어쨌든 배열은 아니죠. 따라서 배열 메서드를 사용할 수 없다는 단점이 있습니다.
// arguments.map(...) 을 호출할 수 없죠.
// 여기에 더하여 arguments 는 인수 전체를 담기 때문에 나머지 매개변수처럼 인수의 일부만 사용할 수 없다는 단점도 있습니다.
// 따라서 배열 메서드를 사용하거나 인수 일부만 사용할 때는 나머지 매개변수를 사용하는게 좋습니다.


// 스프레드 문법

// 지금까지 매개변수 목록을 배열로 가져오는 방법에 대해 살펴보았습니다.
// 그런데 개발을 하다 보면 반대되는 기능이 필요할 떄가 생깁니다.
// 배열을 통째로 매개변수에 넘겨주는 것 같이 말이죠.

// 예시를 통해 이런 경우를 살펴봅시다.
// 내장 함수 Math.max 는 인수로 받은 숫자 중 가장 큰 숫자를 반환합니다.

console.log(Math.max(3,5,1));

// 배열 [3,5,1] 이 있고, 이 배열을 대상으로 Math.max 를 호출하고 싶다고 가정해봅시다.
// 아무런 조작 없이 배열을 있는 그대로 Math.max 에 넘기면 원하는 대로 동작하지 않습니다.
// Math.max 는 배열이 아닌 숫자 목록을 인수로 받기 때문입니다.

let arr1 = [3,5,1];
console.log(Math.max(arr1)); // NaN

// 스프레드 문법은 이럴 때 사용하기 위해 만들어졌습니다.
// ... 를 사용하기 때문에 나머지 매개변수와 비슷해 보이지만, 스프레드 문법은 나머지 매개변수와 반대되는 역할을 합니다.
// 함수를 호출할 때 ...arr1 을 사용하면 이터러블 객체 arr1 이 인수 목록으로 확장 됩니다.
console.log(Math.max(...arr1));

// 아래와 같이 이터러블 객체 여러 개를 전달하는 것도 가능합니다.
let arr2 = [6,8,0];

console.log(Math.max(...arr1, ...arr2));

// 스프레드 문법을 평범한 값과 혼합해 사용하는 것도 가능하죠.

// 스프레드 문법은 배열을 합칠 때도 활용할 수 있습니다.

let arr3 = [...arr1, ...arr2];
console.log(arr3);

// 앞선 예시들에선 배열을 대상으로 스프레드 문법이 어떻게 동작하는지 살펴보았습니다.
// 그런데 배열이 아니더라도 이터러블 객체이면 스프레드 문법을 사용할 수 있습니다.

// 스프레드 분법을 사용해 문자열을 문자 배열로 변환 시켜 보겠습니다.
let str1 = 'hello';
console.log([...str1]);

// 스프레드 문법은 for..of 와 같은 방식으로 내부에서 이터레이터를 사용해 요소를 수집합니다.
// 문자열에 for..of 를 사용하면 문자열을 구성하는 문자가 반환됩니다.
// ...str1 도 h,e,l,l,o 가 되는데 이 문자 목록을 배열 초기자 [...str1] 로 전달됩니다.
// 메서드 Array.from 은 이터러블 객체인 문자열을 배열로 바꿔주기 때문에 Array.from 을 사용해도 동일한 작업을 할 수 있습니다.

console.log(Array.from(str1));
console.log([...str1]);

// Array.from(obj) 와  [...obj] 는 다음과 같은 미묘한 차이가 있습니다.

// 1. Array.from 은 유사 배열 객체외 이터러블 객체 둘 다에 사용할 수 있습니다.
// 2. 스프레드 문법은 이터러블 객체에만 사용할 수 있습니다.

// 이런 이유 때문에 무언가를 배열로 바꿀 때는 스프레드 문법보다 Array.from 이 보편적으로 사용됩니다.


// 배열과 객체의 복사본 만들기

// 참조에 의한 객체 복사 챕터에서 Object.assign() 을 사용해 객체를 복사한 예시를 떠올려봅시다.
// Object.assign() 말고도 스프레드 문법을 사용하면 배열과 객체를 복사할 수 있습니다.

let arr4 = [1,2,3];
let arr5 = [...arr4];

console.log(JSON.stringify(arr4) === JSON.stringify(arr5)); // true -> 배열 요소가 동일함
console.log(arr4 === arr5); // false -> 참조가 다름

// 참조가 다르므로 기존 배열을 수정해도 복사본은 영향을 받지 않음
arr4.push(4);
console.log(arr4, arr5);

let obj1 = {a:1, b:2, c:3};
let obj2 = {...obj1};

console.log(JSON.stringify(obj1) === JSON.stringify(obj2)); // true -> 객체 프로퍼티가 동일함
console.log(obj1 === obj2); // false -> 참조가 다름

// 참조가 다르므로 기존 객체를 수정해도 복사본은 영향을 받지 않음
obj1.d = 4;
console.log(obj1,obj2);

// 이렇게 스프레드 문법을 사용하면 let objCopy = Object.assign({},obj); let arrCopy = Object.assign([],arr); 보다 더 짧은 코드로 배열이나 객체를 복사할 수 있어서 사람들은 이 방법을 더 선호하는 편입니다.


// 요약

// ... 은 나머지 매개변수나 스프레드 문법으로 사용할 수 있습니다.
// 나머지 매개변수와 스프레드 문법은 아래의 방법으로 구분할 수 있습니다.
// 1. ... 이 함수 배개변수 끝에 있으면 인수 목록의 나머지를 배열로 모아주는 나머지 매개변수 입니다.
// 2. ... 이 함수 호출 시 사용되거나 기타 경우엔 배열을 목록으로 확장해주는 스프레드 문법 입니다.

// 사용패턴
// 인수 개수에 제한이 없는 함수를 만들 때 나머지 매개변수를 사용합니다.
// 다수의 인수를 받는 함수에 배열을 전달할 때 스프레드 문법을 사용합니다.

// 둘을 함께 사용하면 매개변수 목록과 배열 간 전환을 쉽게 할 수 있습니다.
// 조금 오래된 방법이긴 하지만 arguments 라는 반복 가능한 유사 배열 객체를 사용해도 인수 모두를 사용할 수 있습니다.


</script>