<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>
// 프라미스

// 본인을 아주 유명한 가수라고 가정해 봅시다.
// 그리고 탑 가수인 보인이 밤 낮으로 다음 싱글 앨범이 언제 나오는지 물어보는 팬들을 상대해야 한다고 해 봅시다.

// 당신은 앨범이 출시되면 팬들이 자동으로 소직을 받아볼 수 있도록 해 부하를 덜 겁니다.
// 구독 리스트를 하나 만들어 팬들에게 전달해 이메일 주소를 적게 하고, 앨범이 준비되면 리스트에 있는 팬들에게 메일을 보내 앨범 관련 소식을 바로 받아볼 수 있게 하는 식으로 말이죠.
// 이렇게 하면 녹음 스튜디오에 화재가 발생해서 출시 예정인 앨범이 취소되는 불상사가 발생해도 관련 소식을 팬들에게 전달 할 수 있습니다.

// 이제 모두가 행복해졌습니다. 밤낮으로 질문을 하는 팬이 사라졌고, 팬들은 앨범 출시를 놓치지 않을 수 있게 되었스니까요.

// 이 비유는 코드를 작성하면서 자주 만나는 상황을 실제 일어날 법한 일로 바꾼 것입니다.

// promise 객체는 아래와 같은 문법으로 만들 수 있습니다.

let promise1 = new Promise(function(resolve, reject) {
    // executor
});

// new Promise 에 전달되는 함수는 executor(실행자, 실행 함수)라고 부릅니다.
// executor 는 new Promise 가 만들어질 때 자동으로 실행되는데, 결과를 최종적으로 만들어내는 제작 코드를 포함합니다.
// 위 비유에선 '가수'가 바로 executor 입니다.

// executor 의 인수 resolve, reject 는 자바스크립트에서 자체 제공하는 콜백입니다.
// 개발자는 resolve 와 reject 를 신경 쓰지 않고 executor 안 코드만 작성하면 됩니다.

// 대신 executor 에선 결과를 즉시 얻든 늦게 얻든 상관없이 상황에 따라 인수로 넘겨준 콜백 중 하나를 반드시 호출해야 합니다.
// resolve(value) - 일이 성공적으로 끝난 경우 그 결과를 나타내는 value 와 함께 호출
// reject(error) - 에러 발생 시 에러 객체를 나타내는 error 와 함께 호출

// 요약하면 다음과 같습니다.
// executor 는 자동으로 실행되는데 여기서 원하는 일이 처리됩니다.
// 처리가 끝나면 executor 는 처리 성공 여부에 따라 resolve 나 reject를 호출합니다.

// 한편, new Promise 생성자가 반환하는 promise 객체는 다음과 같은 내부 프로퍼티를 갖습니다.

// state - 처음엔 'pending'(보류)이었다 resolve 가 호출되면 'fulfilled' , reject 가 호출되면 'rejected' 로 변합니다.
// result - 처음엔 'undefined' 이었다 resolve(value) 가 호출되면 value 로 , reject(error) 가 호출되면 error 로 변합니다.

// 따라서 executor 는 아래와 같이 promise 의 상태를 둘 중 하나로 변화시킵니다.

//                          -> resolve(value)   ->  state : 'fulfilled'
//                                                  result : value
// new Promise(executor) 
//  state : 'pending'
//  result : undefined
//                          -> reject(error)    ->  state : 'rejected'
//                                                  result: error

// setTimeOut 을 이용해  executor 함수는 약간의 시간이 걸리도록 구현해 보았습니다.

let promise2 = new Promise(function(resolve, reject) {
    // 프라미스가 만들어지면 executor 함수는 자동으로 실행됩니다.

    // 1초 뒤에 일이 성공적으로 끝났다는 신호가 전달되면서 result 는 '완료'가 됩니다.
    setTimeout(() => resolve('done'),1000);
});

console.log('promise2', promise2);

// 위 예시를 통해서 우리가 알 수 있는 것은 두 가지입니다.
// 1. executor 는 new Promise 에 의해 자동으로 그리고 즉각적으로 호출됩니다.
// 2. executor 는 resolve 와 reject 함수를 받습니다.
// 이 함수들은 자바스크립트 엔진이 미리 정의한 함수이므로 개발자가 따로 만들 필요가 없습니다.
// 다만 resolve 나 reject 중 하나는 반드시 호출해야 합니다.
// executor '처리' 가 시작 된 지 1초 후, resolve('done') 이 호출되고 결과가 만들어집니다.
// 이때 promise 객체의 상태는 다음과 같이 변합니다.

// new Promise(executor)        
//      state : 'pending'       -> resolve('done') ->   state : 'fulfilled'
//      result : undefined                              result : 'done'

// 이처럼 일이 성공적으로 처리되었을 때의 프라미스는 fulfilled promise 라고 불립니다.
// 이번에는 executor 가 에러와 함께 약속한 작업을 거부하는 경우에 대해 살펴봅시다.

let promise3 = new Promise(function(resolve, reject) {
    setTimeout(() => reject(new Error('error')), 1000);
});

console.log('promise3', promise3);

// 1초 후 reject(...) 가 호출되면 promise 의 상태가 rejected 로 변합니다.

// new Promise(executor)        
//      state : 'pending'       -> reject(Error 객체) ->    state : 'rejected'
//      result : undefined                                  result : Error 객체

// 지금까지 배운 내용을 요약해 봅시다.
// executor 는 보통 시간이 걸리는 일을 수행합니다.
// 일이 끝나면 resolve 나 reject 함수를 호출하는데, 이때 프라미스 객체의 상태가 변화합니다.

// 이행(resolved) 혹은 거부(rejecte) 상태의 프라미스는 '처리된(settled)' 프라미스라고 부릅니다.
// 반대되는 프라미스는 '대기(pending)' 상태의 프라미스가 있습니다.


// 프라미스는 성공 또는 실패만 합니다.
// executor 는 resolve 나 reject 중 하나를 반드시 호출해야 합니다.
// 이때 변경된 상태는 더 이상 변하지 않습니다.
// 처리가 끝난 프라미스에 resolve 와 reject 를 호출하면 무시되죠.

let promise4 = new Promise(function(resolve, reject) {
    resolve('done');
    reject(new Error('error'));
});

console.log('promise4', promise4);

// 이렇게 executor 에 의해 처리가 끝난 일은 결과 혹은 에러만 가질 수 있습니다.
// 여기에 더하여 resolve 나 reject 는 인수를 하나만 받고(혹은 아무것도 받지 않음) 그 이외의 인수는 무시한다는 특성도 있습니다.


// Error 객체와 함께 거부하기
// 무언가 잘못된 경우, executor 는 reject 를 호출해야 합니다.
// 이때 인수는 resolve 와 마찬가지로 어떤 타입도 가능하지만 Error 객체 또는 Error 를 상속받은 객체를 사용할 것을 추천합니다.


// resolve, reject 함수 즉시 호출하기
// executor 는 대개 무언가를 비동기적으로 수행하고, 약간의 시간이 지난 후에 resolve, reject 를 호출하는데, 꼭 이렇게 할 필요는 없습니다.
// 아래와 같이 resolve 나 reject 를 즉시 호출할 수도 있습니다.

let promise5 = new Promise(function(resolve, reject) {
    resolve('done');
});

console.log('promise5', promise5);

// 어떤 일을 시작했는데 알고 보니 일이 이미 끝나 저장까지 되어있는 경우, 이렇게 resolve 나 reject 를 즉시 호출하는 방식을 사용할 수 있습니다.
// 이렇게 하면 프라미스는 즉시 이행 상태가 됩니다.


// state 와 result 는 내부에 있습니다.
// 프라미스 객체의 state, result 프로퍼티는 내부 프로퍼티이므로 개발자가 직접 접근할 수 없습니다.
// .then / .catch / .finally 메서드를 사용하면 접근 가능합니다.


// 소비자: then, catch, finally

// 프라미스 객체은 executor 와 결과나 에러를 받을 소비 함수를 이어주는 역할을 합니다.
// 소비함수는 then , catch, finally 메서드를 사용해 등록됩니다.

// then
// .then 은 프라미스에서 가장 중요하고 기본이 되는 메서드입니다.

// 문법은 다음과 같습니다.

/**
promise.then(
    function(result) {},
    function(error) {}
) ;
*/

// .then 의 첫 번째 인수는 프라미스가 이행되었을 때 실행되는 함수이고, 여기서 실행 결과를 받습니다.
// .then 의 두 번째 인수는 프라미스가 거부되었을 때 실행되는 함수이고, 여기서 에러를 받습니다.

// 아래 예시는 성공적으로 이행된 프라미스에 어떻게 반응하는지 보여줍니다.

let promise6 = new Promise(function(resolve, reject) {
    setTimeout(() => resolve('done'), 1000);
});

promise6.then(
    result => console.log('promise6 result', result),
    error => console.log('promise6 error', error),
);

// 첫 번째 함수가 실행되었습니다.
// 프라미스가 거부된 경우에는 아래와 같이 두 번째 함수가 실행됩니다.

let promise7 = new Promise(function(resolve, reject) {
    setTimeout(() => reject(new Error('error')), 1000);
});

promise7.then(
    result => console.log('promise7 result', result),
    error => console.log('promise7 error', error)
);

// 작업을 성공적으로 처리된 경우만 다루고 싶다면 .then 에 인수를 하나만 전달하면 됩니다.

let promise8 = new Promise(function(resolve, reject) {
    setTimeout(() => resolve('done'), 1000);
});

promise8.then(console.log);


// catch
// 에러가 발생한 경우만 다루고 싶다면 .then(null, handlingFunction) 같이 null을 첫 번째 인수로 전달하면 됩니다.
// .catch(handlingFunction) 를 써도 되는데, .catch 는 .then 에 null 을 전달하는 것과 동일하게 동작합니다.

let promise9 = new Promise(function(resolve, reject) {
    setTimeout(() => reject(new Error('error')), 1000);
});

promise9.catch(console.log);

// .catch(f) 는 문법이 간결하다는 점만 빼고 .then(null,f) 과 완벽하게 같습니다.


// finally
// try {} catch {} 에 finally 절이 있는 것처럼, 프라미스에도 finally 가 있습니다.
// 프라미스가 처리되면 f 가 항상 실행된다는 점에서 .finally(f) 호출은 .then(f,f) 과 유사합니다.
// 쓸모가 없어진 로딩 인디케이터를 멈추는 경우같이, 결과가 어떻든 마무리가 필요하면 finally 가 유용합니다.

new Promise((resolve, reject) => {
    setTimeout(() => resolve('done'), 1000);
})
.finally(() => console.log('promise finally'))
.then(result => console.log(result));

// 그런데 finally 는 .then(f,f) 과 완전히 같진 않습니다. 차이점은 다음과 같습니다.

// 1. finally 핸들러엔 인수가 없습니다.
// finally 에선 프라미스가 이행되었는지, 거부되었는지 알 수 없습니다.
// finally 에선 절차를 마무리하는 보편적 동작을 수행하기 때문에 성공,실패 여부를 몰라도 됩니다.

// 2. finally 핸들러는 자동으로 다음 핸들러에 결과와 에러를 전달합니다.
// finally 는 프라미스 결과를 처리하기 위해 만들어 진 게 아닙니다.
// 프라미스 결과는 finally 를 통과해서 전달되죠. 이런 특징은 아주 유용하게 사용되기도 합니다.ㅣ
// 프라미스 체이닝과 핸들러 간 결과 전달에 대해선 다음 챕터에서 다루겠습니다.

// 3. .finally(f) 는 함수 f 를 중복해서 쓸 필요가 없기 때문에 .then(f,f) 보다 문법 측면에서 더 편리합니다.


// 처리된 프라미스의 핸들러는 즉각 실행됩니다.

// 프라미스가 대기 상태일 때 .then/catch/finally 핸들러는 프라미스가 처리되길 기다립니다.
// 반면, 프라미스가 이미 처리상태라면 핸들러가 즉각 실행됩니다.


// 예시

function loadScript(src) {
    return new Promise(function(resolve, reject) {
        let script = document.createElement('script');
        script.src = src;

        script.onload = () => resolve(script);
        script.onerror = (e) => reject(new Error(e));

        document.head.append(script);
    });
}

let promise10 = loadScript('/test/testScript1.js');
promise10.finally(() => console.log('promise10 finally'))
.then(
    script => console.log(`promise10 ${script.src} 호출 완료`),
    error => console.log(`promise10 error`, error),
);

let promise11 = loadScript('/test/testScript3.js');
promise11.finally(() => console.log('promise11 finally'))
.then(
    script => console.log(`promise11 ${script.src} 호출 완료`),
    error => console.log(`promise11 error`, error),
);

// 프라미스를 사용한 코드가 콜백 기반 코드보다 더 나은 점을 정리하면 다음과 같습니다.

// 프라미스
// 프라미스를 이용하면 흐름이 자연스럽습니다.
// loadScript(script) 로 스크립트를 읽고, 결과에 따라 그 다음 .then 에 무엇을 할지에 대한 코드를 작성하면 됩니다.
// 프라미스에 원하는 만큼 .then 을 호출할 수 있습니다.

// 콜백
// loadScript(script, callback) 를 호출할 때 함께 호출할 callback 함수가 준비되어 있어야 합니다.
// loadScript 를 호출하기 이전에 호출 결과로 무엇을 할지 미리 알고 있어야 합니다.
// 콜백은 하나만 가능합니다 


</script>