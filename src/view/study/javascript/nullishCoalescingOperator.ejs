<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>
// nullish 병합 연산자 '??'

// 스펙에 추가된 지 얼마 안 된 문법입니다. 구식 브라우저는 폴리필이 필요합니다.

// nullish 병합 연산자 '??' 를 사용하면 짧은 문법으로 여러 피연산자 중 그 값이 '확정되어있는' 변수를 찾을 수 있습니다.

// a ?? b 의 평가 결과는 다음과 같습니다.
// a 가 null, undefined 가 아니면 a , 그 외의 경우는 b

// nullish 병합 연산자 ?? 없이 x = a ?? b 와 동일한 동작을 하는 코드를 작성하면 다음과 같습니다.
// x = (a != null && a != undefined) ? a : b;

// 비교 연산자와 논리 연산자만으로 nullish 병합 연산자와 같은 기능을 하는 코드를 작성하니 코드 길이가 길어지네요.

// 또 다른 예시를 살펴봅시다.

let firstName = null;
let lastName = null;
let nickName = 'Noh In Hui';

console.log(`firstName ?? lastName ?? nickName ?? 'XXXX' : `, firstName ?? lastName ?? nickName ?? 'XXXX');

// '??' 와 '||' 의 차이

// nullish 병합 연산자는 || 와 상당히 유사해 보입니다.
// 실제로 위 예시에서 ?? 를 || 로 바꿔도 그 결과는 동일하기까지 하죠.
// 그런데 두 연산자 사이에는 중요한 차이점이 있습니다.

// || 는 첫 번째 true 값을 반환합니다.
// ?? 는 첫 번째 정의된(defined) 값을 반환합니다.

// null 과 undefined, 숫자 0 을 구분 지어 다뤄야 할 때 이 차이점은 매우 중요한 역할을 합니다.

// 예시를 살펴봅시다.
let height1;
height1 = height1 ?? 100;
console.log(`height`,height1);

// height 에 값이 정의되지 않은경우 height 엔 100 이 할당됩니다.
// 이제 ?? 와 || 을 비교해봅시다.

let height2 = 0;
console.log('height2 || 100', height2 || 100);
console.log('height2 ?? 100', height2 ?? 100);

// height2 || 100 은 height2에 0을 할당했지만 0을 false 값으로 취급했기 때문에 null 이나 undefined 를 할당한 것과 동일하게 처리합니다.
// height2 ?? 100 의 평가 결과는 height2가 정확하게 null 이나 undefined 일 경우에만 100 이 됩니다.
// 예시에선 height2에 0이라는 값을 할당했기 때문에 0이 출력됩니다.

// 이런 특징 때문에 높이처럼 0이 할당될 수 있는 변수를 사용해 기능을 개발할 땐 || 보다 ?? 가 적합합니다.

// 연산자 우선순위

// ?? 의 연산자 우선순위는 5로 꽤 낮습니다.
// 따라서 ?? 는 = 와 ? 보다 먼저, 대부분의 연산자보다는 나중에 평가됩니다.
// 그렇기 떄문에 복잡한 표현식 안에서 ?? 를 사용해 값을 하나 선택할 땐 괄호를 추가하는 게 좋습니다.

let height = null;
let width = null;

let area1 = (height ?? 100) * (width ?? 50);
let area2 = height ?? 100 * width ?? 50; // 이렇게 사용 X

console.log('area1',area1);
console.log('area2',area2);


// ?? 엔 자바스크립트 언어에서 규정한 또 다른 제약사항이 있습니다.
// 안정성 관련 이슈 때문에 ?? 는 &&, || 와 함께 사용하지 못합니다.

// let x = 1 && 2 ?? 3; //Uncaught SyntaxError: Unexpected token '??'

// 이 제약에 대해선 아직 논쟁이 많긴 하지만 사람들이 || 를 ?? 로 바꾸기 시작하면서 만드는 실수를 방지하고자 명세서에 제약이 추가된 상황입니다.
// 제약을 피하려면 괄호를 사용해주세요.

let x = (1 && 2) ?? 3;
console.log('x',x);


</script>