<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// setTimeout 과 setInterval 을 이요한 호출 스케줄링

// 일정 시간이 지난 후에 원하는 함수를 예약 실행(호출)할 수 있게 하는 것을 호출 스케줄링 이라고 합니다.

// 호출 스케줄링을 구현하는 방법은 두 가지가 있습니다.

// setTimeout 을 이용해 일정 시간이 지난 후에 함수를 실행하는 방법
// setInterval 을 이용해 일정 시간 간격을 두고 함수를 실행하는 방법

// 자바스크립트 명세서엔 setTimeout 과 setInterval 가 명시되어있지 않습니다.
// 하지만 시중에 나와 있는 모든 브라우저, Node.js 를 포함한 자바스크립트 호스트 환경 대부분이 이와 유사한 메서드와 내부 스케줄러를 지원합니다.

// setTimeout

// let timerId = setTimeout(func|code, [delay], [arg1], [arg2], ...);

// func | code
// 실행하고자 하는 코드로, 함수 또는 문자열 형태입니다.
// 대개는 이 자리에 함수가 들어갑니다.
// 하위 호환성을 위해 문자열도 받을 수 있게 해놓았지만 추천하진 않습니다.

// delay
// 실행 전 대기 시간으로, 단위롤 밀리초(millisecond, 1000 밀리초 = 1초) 이며 기본값은 0입니다.

// arg1, arg2, ...
// 함수에 전달할 인수들로 IE9 이하에선 지원하지 않습니다.

// 예시를 통해 setTimeout 을 어떻게 쓸 수 있는지 알아봅시다.

function func1() {
    console.log('func1');
}

// setTimeout(func1, 1000);

// 아래와 같이 함수에 인수를 넘겨줄 수도 있습니다.

function func2(who, phrase) {
    console.log(`${who}님 ${phrase}`);
}

setTimeout(func2, 1000, 'Inhui', 'Hello');

// setTimeout 의 첫 번째 인수가 문자열이면 자바스크립트는 이 문자열을 이용해 함수를 만듭니다.

setTimeout(console.log(1), 1000);

// 그런데 이렇게 문자열을 사용하는 방법은 추천하지 않습니다.
// 되도록 다음 예시와 같이 익명 화살표 함수를 사용하세요.

setTimeout(() => console.log(2), 1000);


// 함수를 실행하지 말고 넘기세요.

// 초보 개발자는 setTimeout 에 함수를 넘길 때 함수 뒤에 () 을 붙이는 실수를 하곤 합니다.
// setTimeout 은 함수의 참조 값을 받도록 정의되어 있는데 function() 을 인수로 전달하면 함수 실행 결과가 전달되어 버립니다.
// 그런데 function() 엔 반환문이 없습니다.
// 호출 결과는 undefined 가 되겠죠.
// 따라서 setTimeout 은 스케줄링할 대상을 찾지 못해, 원하는 대로 코드가 동작하지 않습니다.


// clearTimeout 으로 스케줄링 취소하기

// setTimeout 을 호출하면 타이머 식별자가 반환됩니다.
// 스케줄링을 취소하고 싶을 땐 이 식별자를 사용하면 됩니다.

// 스케줄링 취소하기
// let timerId = setTimeout(...);
// clearTimeout(timerId);

// 아래 예시는 함수 실행을 계획해 놓았다가 중간에 마음이 바뀌어 계획해 놓았던 것을 취소한 상황을 코드로 표현하고 있습니다.
// 예시를 실행해도 스케줄링이 취소되었기 때문에 아무런 변화가 없는 것을 확인할 수 있습니다.

let timerId1 = setTimeout(() => console.log('nothing'), 1000);
alert(timerId1);
clearTimeout(timerId1);
alert(timerId1);

// 예시를 실행하면 alert 창이 2개가 뜨는데, 이 얼럿 창을 통해 브라우저 환경에선 타이머 식별자가 숫자라는 걸 알 수 있습니다.
// 다른 호스트 환경에선 타이머 식별자가 숫자형 이외의 자료형일 수 있습니다.
// 참고로 Nodejs 에서 setTimeout 을 실행하면 타이머 객체가 반환합니다.

// 다시 한번 말씀드리자면, 스케줄링에 관한 명세는 따로 존재하지 않습니다.
// 명세가 없기 때문에 호스트 환경마다 약간의 차이가 있을 수 밖에 없습니다.

// 참고로 브라우저는 HTML5 의 timers section 을 준수하고 있습니다.



// setInterval

// setInterval 메서드는 setTimeout 과 동일한 문법을 사용합니다.

// let timerId = setInterval(func|code, [delay], [arg1], [arg2], ...)

// 인수 역시 동일합니다.
// 다만 setTimeout 이 함수를 단 한번만 실행하는 것과 달리 setInterval 은 함수를 주기적으로 실행하게 됩니다.
// 다음 예시를 실행하면 메시지가 2초 간격으로 보이다가 5초 이후에는 더 이상 메시지가 보이지 않습니다.

let timerId2 = setInterval(() => console.log('timerId2'), 2000);
setTimeout(() => {
    clearInterval(timerId2);
    console.log('stop');
}, 5000);


// alert 창이 떠 있더라도 타이머는 멈추지 않습니다.
// Chrome 과 Firefox 를 포함한 대부분의 브라우저는 alert / confirm / prompt 창이 떠 있는 동안에도 내부 타이머를 멈추지 않습니다.


// 중첩 setTimeout

// 무언가를 일정 간격을 두고 실행하는 방법에는 크게 2가지가 있습니다.
// 하나는 setInterval 을 이용하는 방법이고, 다른 하나는 아래 예시와 같이 중첩 setTimeout 을 이용하는 방법입니다.

let timerId3 = setTimeout(function tick() {
    console.log('timerId3');
    timerId3 = setTimeout(tick, 2000);
}, 2000);

// 중첩 setTimeout 을 이용하는 방법은 setInterval 을 사용하는 방법보다 유연합니다.
// 호출 결과에 따라 다음 호출을 원하는 방식으로 조정해 스케줄링 할 수 있기 때문입니다.

// 5초 간격으로 서버에 요청을 보내 데이터를 얻는다고 가정해 봅시다.
// 서버가 과부하 상태라면 요청 간격을 10초,20초,40초 등으로 증가시켜주는 게 좋을 겁니다.

// 아래는 이를 구현한 의사 코드 입니다.

// let delay = 5000;

// let timerId = setTimeout(function request() {
//   ...요청 보내기...

//   if (서버 과부하로 인한 요청 실패) {
//     // 요청 간격을 늘립니다.
//     delay *= 2;
//   }

//   timerId = setTimeout(request, delay);

// }, delay);

// CPU 소모가 많은 작업을 주기적으로 실행하는 경우에도 setTimeout 을 재귀 실행하는 방법이 유용합니다.
// 작업에 걸리는 시간에 따라 다음 작업을 유동적으로 계획할 수 있기 때문입니다.

// 중첩 setTimeout 을 이용하는 방법은 지연 간격을 보장하지만, setInterval 은 이를 보장하지 않습니다.

// 아래 두 예시를 비교해 봅시다.

let i = 1;
setInterval(function() {
    console.log('i', i++);
}, 100);

let j = 1;
setTimeout(function run() {
    console.log('j', j++);
    setTimeout(run, 1000);
}, 100);


// 요약

// setInterval(func, delay, ...args) 과 setTimeout(func, delay, ...args) 은 delay 밀리초 후에 func 을 규칙적으로, 또는 한번 실행하도록 해줍니다.

// setInterval, setTimeout 을 호출하고 반환받은 값을 clearInterval, clearTimeout 에 넘겨주면 스케줄링을 취소할 수 있습니다.

// 중첩 setTimeout 을 사용하면 setInterval 을 사용한 것보다 유연하게 코드를 작성할 수 있습니다.
// 여기에 더하여 지연 간격 보장이라는 장점도 있습니다.

// 대기 시간이 0인 setTimeout ( setTimeout(func,0) or setTimeout(func) ) 을 사용하면 현재 스크립트의 실행이 완료된 후 가능한 한 빠르게 원하는 함수를 호출할 수 있습니다.

// 지연 없이 중첩 setTimeout 을 5회 이상 호출하거나 지연 없는 setInterval 에서 호출이 5회 이상 이뤄지면, 4밀리초 이상의 지연 간격이 강제로 더해집니다.
// 이는 브라우저에만 적용되는 사항이며, 하위 호환성을 위해 유지되고 있습니다.

// 스케줄링 메서드를 사용할 땐 명시한 지연 간격이 보장되지 않을 수도 있다는 점에 유의해야 합니다.

// 아래와 같은 상황에서 브라우저 내 타이머가 느려지면 지연 간격이 보장되지 않습니다.
// 1. CPU 과부하 상태인 경우
// 2. 브라우저 탭이 백그라운드 모드인 경우
// 3. 노트북이 배터리에 의존해서 구동 중인 경우

// 이런 상황에서 타이머의 최소 지연 시간은 300밀리초에서 심하면 1000 밀리초까지 늘어납니다.
// 연장 시간은 브라우저나 구동 중인 운영 체제의 성능 설정에 따라 다릅니다.


</script>