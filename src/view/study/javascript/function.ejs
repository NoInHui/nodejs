<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>
// 함수

// 스크립트를 작성하다 보면 유사한 동작을 하는 코드가 여러 곳에서 필요할 때가 많습니다.
// 사용자가 로그인이나 로그아웃을 했을 때 안내 메시지를 보여주는 동작 같은 경우 말이죠.
// 함수는 프로그램을 구성하는 주요 구성 요소입니다. 
// 함수를 이용하면 중복 없이 유사한 동작을 하는 코드를 여러 번 호출할 수 있습니다.

// 우리는 앞서 다양한 예시에서 alert, prompt, confirm 과 같은 내장 함수를 사용해 보았습니다.
// 이번 챕터에선 함수를 직접 만드는 방법에 대해 알아보겠습니다.

// 기본적인 내용은 건너뛰고 주의해야하는 부분만 작성

// 함수 선언문

function name1(param1,param2, ...paramN) {
    // 함수본문 : body
}

// 함수 표현식

let name2 = function(param1,param2, ...paramN) {
    // 함수본문 : body
}

// 함수 선언문 vs 함수 표현식

// 함수 표현식과 선언문의 차이에 대해 알아봅시다.

// 첫 번째는 문법입니다.

// 함수 선언문: 함수는 주요 코드 흐름 중간에 독자적인 구문 형태로 존재합니다.

function sum1(a,b) {
    return a+b;
}

// 한수 표현식: 함수는 표현식이나 구문 구성 내부에 생성됩니다.

let sum2 = function(a,b) {
    return a+b;
}

// 두 번째 차이는 자바스크립트 엔진이 언제 함수를 생성하는지에 있습니다.

// 함수 표현식은 실제 실행 흐름이 해당 함수에 도달했을 때 함수를 생성합니다.
// 따라서 실행 흐름이 함수에 도달했을 때부터 해당 함수를 사용할 수 있습니다.

// 위 예시를 이용해 설명해 보도록 하겠습니다.
// 스크립트가 실행되고 실행 흐름이 let sum2 = function... 에 도달 했을때 함수가 생성됩니다.
// 이때 이후부터 해당 함수를 사용(할당,호출 등)할 수 있습니다.

// 하지만 함수 선언문은 조금 다릅니다.
// 함수 선언문은 함수 선언문이 정의되기 전에도 호출할 수 있습니다.
// 따라서 전역 함수 선언문은 스크립트 어디에 있느냐에 상관없이 어디에서든 사용할 수 있습니다.

// 이게 가능한 이ㅏ유는 자바스크립트 내부 알고리즘 때문입니다.
// 자바스크립트는 스크립트를 실행하기 전, 준비 단계에서 전역에 선언된 함수 선언문을 찾고, 해당 함수를 생성합니다.
// 스크립트가 진짜 실행되기 전 '초기화 단계'에서 함수 선언 방식으로 정의한 함수가 생성되는 것이죠.

// 스크립트는 함수 선언문이 모두 처리된 이후에서야 실행됩니다.
// 따라서 스크립트 어디서든 함수 선언문으로 선언한 함수에 접근할 수 있는 것입니다.

// 예시를 살펴봅시다.

sayHi1('InHui');

function sayHi1(name) {
    console.log('sayHi1', `Hello ${name}`);
}

// 함수 선언문, sayHi1 는 스크립트 실행 준비 단계에서 생성되기 때문에, 스크립트 내 어디에서든 접근할 수 있습니다.
// 그러나 함수 표현식으로 정의한 함수는 함수가 선언되기 전에 접근하는 게 불가능합니다.

// sayHi2('InHui'); // Uncaught ReferenceError: Cannot access 'sayHi2' before initialization
try {
    sayHi2('InHui');
} catch (e) {
    console.log(e);
}

let sayHi2 = function(name) {
    console.log('sayHi2', `Hello ${name}`);
}

// 함수 표현식은 실행 흐름이 표현식에 다다랐을 때 만들어집니다.

// 세 번째 차이점은 스코프 입니다.

// 엄격모드에서 함수 선언문이 코드 블록 내에 위치하면 해당 함수는 블록 내 어디서든 접근할 수 있습니다.
// 하지만 블록 밖에서는 함수에 접근하지 못합니다.

"use strict"; // 원래는 최상단에 선언해야하나 페이지 구성과 설명을 위해 여기에 위치시킴

let age = 10;
try {
    if(age > 10) {
        function welcome1() {
            console.log(`welcome1`, age);
        }
    } else {
        function welcome1() {
            console.log(`welcome1`, age);
        }
    }
    welcome1();
} catch(e) {
    console.log(e);
}

// 함수 선언문은 함수가 선언된 코드 블록 안에서만 유효하기 때문에 이런 에러가 발생합니다.

let welcome2;

if(age > 10) {
    welcome2 = function() {
        console.log(`welcome2`, age);
    }
} else {
    welcome2 = function() {
        console.log(`welcome2`, age);
    }
}
welcome2();

// 함수 선언문과 함수 표현식 중 무엇을 선택해야 하나요?

// 되도록 함수 선언문을 먼저 고려하는게 좋습니다.
// 함수 선언문으로 함수를 정의하면 함수가 선언되기 전에 호출할 수 있어서 코드 구성을 좀 더 자유롭게 할 수 있습니다.
// 그러나 어떤 이유로 함수 선언 방식이 적합하지 않거나, 조건에 따라 함수를 선언해야 한다면 함수 표현식을 사용해야합니다.

// 조건에 따라 함수 선언 예제
let welcome3 = age > 10 ? function() {console.log(`welcome3`, age)} : function() {console.log(`welcome3`, age)};
welcome3();

</script>