<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 참조에 의한 객체 복사

// 객체와 원시 타입의 근본적인 차이 중 하나는 '참조에 의해(by reference)' 저장되고 복사된다는 것입니다.
// 원시값(문자열,숫자,불린 값)은 '값 그대로' 저장,할당되고 복사되는 반면에 말이죠.

let param1 = 'Hello';
let obj1 = param1;

// 예시를 실행하면 두 개의 독립된 변수에 각각 문자열 'Hello' 가 저장됩니다.

// 그런데 객체의 동작 방식은 이와 다릅니다.

// 변수엔 객체가 그대로 저장되는 것이 아니라, 객체가 저장되어있는 '메모리 주소'인 객체에 대한 '참조 값'이 저장됩니다.

let user1 = {
    name: 'InHui'
};

// 객체는 메모리 내 어딘가에 저장되고, 변수 user 엔 객체를 '참조'할 수 있는 값이 저장됩니다.
// 따라서 객체가 할당된 변수를 복사할 땐 객체의 참조 값이 복사되고 객체는 복사되지 않습니다.

let user2 = {
    name: 'InHui'
};

let user2Cp = user2; // 참조값을 복사함

// 변수는 두 개이지만 각 변수엔 동일 객체에 대한 참조 값이 저장되죠.

// 따라서 객체에 접근하거나 객체를 조작할 땐 여러 변수를 사용할 수 있습니다.

let user3 = {
    name: 'InHui'
};

console.log('user3.name', user3.name);

let user3Cp = user3;

user3Cp.name = 'Pete';

console.log('user3.name', user3.name);

// 객체를 서랍장에 비유하면 변수는 서랍장을 열 수 있는 열쇠라고 할 수 있습니다.
// 서랍장은 하나, 서랍장을 열 수 있는 열쇠는 두 개인데, 그중 하나(user3Cp) 를 사용해 서랍장을 열어 정돈한 후, 또 다른 열쇠(user3)로 서랍장을 열면 정돈 된 내용을 볼 수 있습니다.

// 참조에 의한 비교

// 객체 비교 시 동등 연산자 == 와 일치 연산자 === 는 동일하게 동작합니다.
// 비교 시 피연산자인 두 객체가 동일한 객체인 경우 참을 반환하죠.
// 두 변수가 같은 객체를 참조하는 예시를 살펴봅시다. 일치,동등 비교 모두에서 참이 반환됩니다.

let obj2 = {};
let obj2Cp = obj2;

console.log('obj2 == obj2Cp', obj2 == obj2Cp);
console.log('obj2 === obj2Cp', obj2 === obj2Cp);

// 다른 예시를 살펴봅시다. 두 객체 모두 비어있다는 점에서 같아 보이지만, 독립된 객체이기 때문에 일치,동등 비교하면 거짓이 반환됩니다.

let obj3 = {};
let obj4 = {};

console.log('obj3 == obj4', obj3 == obj4);
console.log('obj3 === obj4', obj3 === obj4);

// 객체 복사, 병합과 Object.assign

// 객체가 할당된 변수를 복사하면 동일한 객체에 대한 참조 값이 하나 더 만들어진다는 걸 배웠습니다.
// 그런데 객체를 복제하고 싶다면 어떻게 해야 할까요?
// 기존에 있던 객체와 똑같으면서 독립적인 객체를 만들고 싶다면 말이죠.
// 방법은 있는데 자바스크립트는 객체 복제 내장 메서드를 지원하지 않기 때문에 조금 어렵습니다.
// 사실 객체를 복제해야 할 일은 거의 없습니다. 참조에 의한 복사로 해결 가능한 일이 대다수죠.
// 정말 복제가 필요한 상황이라면 새로운 객체를 만든 다음 기존 객체의 프로퍼티들을 순회해 원시 수준까지 프로퍼티를 복사하면 됩니다.

let obj5 = {
    name: 'InHui',
    age: 32
};

let obj5Cp = {};

for(let key in obj5) {
    obj5Cp[key] = obj5[key];
}

obj5Cp.name = 'Peter';

console.log('obj5Cp', obj5Cp);

// Object.assign 을 사용하는 방법도 있습니다.
// 문법과 동작 방식은 다음과 같습니다.

// Object.assign(dest, [src1,src2,src3...])

// 첫 번째 인수 dest 는 목표로 하는 객체입니다.
// 이어지는 인수 src1, ... 는 복사하고자 하는 객체입니다.
// 객체 src1 .. srcN 의 프로퍼티를 dest 에 복사합니다.
// dest 를 제외한 인수(객체)의 프로퍼티 전부가 첫 번째 인수(객체)로 복사됩니다.
// 마지막으로 dest 를 반환합니다.

let obj6 = {
    name: 'InHui'
}

let obj7 = {canView : true};
let obj8 = {canEdit: true};

Object.assign(obj6, obj7, obj8);

console.log('obj6',obj6);

// 목표 객체에 동일한 이름을 가진 프로퍼티가 있는 경우엔 기존 값이 덮어씌워 집니다.

Object.assign(obj6, {name: 'peter'});

console.log('obj6',obj6);

// Object.assign 을 사용하면 반복문 없이도 간단하게 객체를 복사할 수 있습니다.

let obj9 = Object.assign({}, obj6);

console.log('obj9', obj9);

// 중첩 객체 복사

// 지금까진 객체의 모든 프로퍼티가 원시값인 경우만 가졍했습니다.
// 그런데 프로퍼티는 다른 객체에 대한 참조 값일 수도 있습니다.
// 이 경우는 어떻게 해야 할까요?

let obj10 = {
    name: 'InHui',
    sizes: {
        height: 182,
        width: 50,
    }
};

// clone.sizes = obj10.sizes 로 프로퍼티를 복사하는 것만으론 객체를 복제할 수 없습니다.
// obj10.sizes 는 객체이기 때문에 참조 값이 복사되기 때문입니다.
// clone.sizes = obj10.sizes 로 프로퍼티를 복사하면 clone 과 obj10 은 같은 sizes 객체를 공유하게 됩니다.

let obj11 = {
    name: 'InHui',
    sizes: {
        height: 182,
        width: 50,
    }
};

let obj11Cp = Object.assign({}, obj11);

console.log('obj11.sizes === obj11Cp.sizes', obj11.sizes === obj11Cp.sizes);

let obj11Cp2 = {...obj11};

console.log('obj11Cp2', obj11Cp2);
console.log('obj11.sizes === obj11Cp2.sizes', obj11.sizes === obj11Cp2.sizes);

let obj11Cp3 = _.cloneDeep(obj11Cp);
console.log('obj11.sizes === obj11Cp3.sizes', obj11.sizes === obj11Cp3.sizes);

// 이 문제를 해결하려면 obj11[key] 의 각 값을 검사하면서, 그 값이 객체인 경우 객체의 구조도 복사해주는 반복문을 사용해야합니다.
// 이런 방식을 '깊은 복사' 라고 합니다.
// 깊은 복사 시 사용되는 표준 알고리즘인 'Structured cloning algorithm' 을 사용하면 위 사례를 비룟한 다양한 상황에서 객체를 복제할 수 있습니다.
// 자바스크립트 라이브러리인 lodash 의 메서드인 _.cloneDeep(obj) 을 사용하면 이 알고리즘을 직접 구현하지 않고도 깊은 복사를 처리할 수 있으므로 참고하시기 바랍니다.

// 요약

// 객체는 참조에 의해 할당되고 복사됩니다.
// 변수엔 '객체' 자체가 아닌 메모리상의 주소인 '참조'가 저장됩니다.
// 따라서 객체가 할당된 변수를 복사하거나 함수의 인자로 넘길 땐 객체가 아닌 객체의 참조가 복사됩니다.

// 그리고 복사된 참조를 이용한 모든 작업(프로퍼티 추가,삭제 등)은 동일한 객체를 대상으로 이뤄집니다.

// 객체의 '진짜 복사본'을 만들려면 '얕은 복사'를 가능하게 해주는 Object.assign 이나 '깊은 복사'를 가능하게 해주는 _.cloneDeep(obj) 를 사용하면 됩니다.
// 이때 얕은 복사본은 중척 객체를 처리하지 못한다는 점을 기억해 두시기 바랍니다.

</script>