<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 함수의 prototype 프로퍼티

// 우리는 리터럴 뿐만 아니라 new F() 와 같은 생성자 함수로도 새로운 객체를 만들 수 있다는 걸 배운 바 있습니다.

// 이번 글에선 생성자 함수를 사용해 객체를 만든 경우에 프로토타입이 어떻게 동작하는지에 대해 알아보겠습니다.
// 생성자 함수로 객체를 만들었을 때 리터럴 방식과 다른점은 생성자 함수의 프로토타입이 객체인 경우에 new 연산자를 사용해 만든 객체는 생성자 함수의 프로토타입 정보를 사용해 [[Prototype]] 을 설정한다는 것입니다.

// 자바스크립트가 만들어졌을 당시엔 프로토타입 기반 상속이 자바스크립트의 주요 기능 중 하나였습니다.
// 그런데 과거엔 프로토타입에 직접 접근할 수 있는 방법이 없었습니다.
// 그나마 믿고 사용할 수 있었던 방법은 이번 챕터에서 설명할 생성자 함수의 'prototype' 프로퍼티를 이용하는 방법뿐이였죠.
// 많은 스크립트가 아직 이 방법을 사용하는 이유가 여기에 있습니다.

// 생성자 함수(F) 의 프로토타입을 의미하는 F.prototype 에서 'prototype' 은 F 에 정의된 일반 프로퍼티라는 점에 주의해 글을 읽어 주시길 바랍니다.
// F.prototype 에서 'prototype' 은 바로 앞에서 배운 '프로토타입'과 비=슷하게 들리겠지만 이름만 같을 뿐 실제론 다른 우리가 익히 알고있는 일반적인 프로퍼티 입니다.

let obj1 = {
    eats: true
};

function Func1(name) {
    this.name = name;
}

Func1.prototype = obj1;

let obj2 = new Func1('inhui'); // obj2.__proto__ = obj1


console.log('obj2.eats', obj2.eats);

// Func1.prototype = obj1 은 "new Func1 을 호출해 만든 새로운 객체의 [[Prototype]] 을 obj1 로 설정하라" 는 것을 의미합니다.ㅣ


// F.prototype 은 new F 를 호출할 때만 사용됩니다.

// F.prototype 프로퍼티는 new F 를 호출할 때만 사용됩니다.
// new F 를 호출할 때 만들어지는 새로운 객체의 [[Prototype]] 을 할당해 주죠.

// 새로운 객체가 만들어진 후에 F.prototype 프로퍼티가 바뀌면(F.prototype = <another object>) new F 를 호출해 만드는 또 다른 새로운 객체는 another object 를 [[Prototype]] 으로 갖게 됩니다.
// 다만, 기존에 있던 객체의 [[Prototype]] 은 그대로 유지됩니다.

// 함수의 디폴트 프로퍼티 prototype 과 constructor 프로퍼티

// 개발자가 특별히 할당하지 않더라도 모든 함수는 기본적으로 'prototype' 프로퍼티를 갖습니다.
// 디폴트 프로퍼티 'prototype' 은 constructor 프로퍼티 하나만 있는 객체를 가리키는데, 여기서 constructor 프로퍼티는 함수 자신을 가리킵니다.

function Func2() {
    // 함수를 만들기만 해도 디폴트 프로퍼티인 prototype 이 설정됩니다.
}

console.log('Func2', Func2);
console.log('Func2.prototype', Func2.prototype);
console.log('Func2.prototype.constructor == Func2', Func2.prototype.constructor == Func2);

// 특별한 조작을 가하지 않았다면 new Func2 을 실행해 만든 객체 모두에서 constructor 프로퍼티를 사용 할 수 있는데, 이때 [[Prototype]] 를 거칩니다.

let obj3 = new Func2(); // {constructor : Func2} 를 상속받음
console.log('obj3.constructor == Func2', obj3.constructor == Func2); // [[Prototype]] 을 거쳐 접근함

// constructor 프로퍼티는 기존에 있던 객체의 constructor 를 사용해 새로운 객체를 만들때 사용할 수 있습니다.

function Func3(name) {
    this.name = name;
    console.log('Func3', name);
}

let obj4 = new Func3('inhui');
let obj5 = new obj4.constructor('james');

// 이 방법은 객체가 있는데 이 객체를 만들 때 어떤 생성자가 사용되었는지 알 수 없는 경우(객체가 서드 파티 라이브러리에서 온 경우 등) 유용하게 쓸 수 있습니다.

// constructor 를 이야기 할 때 가장 중요한 점은
// 자바스크립트는 알맞은 'constructor' 값을 보장하지 않는다 는 점입니다.

// 함수엔 기본으로 'prototype' 이 설정된다라는 사실 그게 전부입니다.
// constructor 와 관련해서 벌어지는 모든 일은 전적으로 개발자에게 달려있습니다.

// 함수에 기본으로 설정되는 'prototype' 프로퍼티 값을 다른 객체가 바꿔 무슨일이 일어나는지 살펴봅시다.
// new 를 사용해 객체를 만들었지만 이 객체에 constructor 가 없는 것을 확인할 수 있습니다.

function Func4() {
    
};

Func4.prototype = {
    jumps : true
};


let obj6 = new Func4();
console.log('obj6', obj6);
console.log('obj6.constructor == Func4', obj6.constructor == Func4);

// 이런 상황을 방지하고 constructor 의 기본 성질을 제대로 활용하려면 prototype 에 뭔가를 하고 싶을 때 prototype 전체를 덮어쓰지 말고 디폴트 prototype 에 원하는 프로퍼티를 추가,제거해야 합니다.

function Func5() {

}

// 이렇게 하면 디폴트 프로퍼티 Func5.prototype.constructor 가 유지됩니다.=
Func5.prototype.jumps = true;

// 실수로 prototype 을 덮어썼다 하더라도 constructor 프로퍼티를 수동으로 다시 만들어주면 constructor 를 다시 사용할 수 있습니다.

Func4.prototype = {
    jumps: true,
    constructor: Func4
};



// 요약

// 이번 챕터에선 생성자 함수를 이용해 만든 객체의 [[Prototype]] 이 어떻게 설정되는지 간략히 알아보았습니다.
// 이 방법을 기반으로 하는 고급 프로그래밍 패턴에 대해선 추후 학습할 예정입니다.

// 몆 가지 사항만 명확하게 이해하고 있으면 지금까지 배운 것들은 복잡하지 않습니다.

// 1. 생성자 함수에 기본으로 세팅되는 프로퍼티(F.prototype) 는 [[Prototype]] 과 다릅니다.
// F.prototype 은 new F() 를 호출할 때 만들어지는 새로운 객체의 [[Prototype]] 을 설정합니다.

// 2. F.prototype 의 값은 객체나 null 만 가능합니다. 다른 값은 무시됩니다.

// 3. 지금까지 배운 내용은 생성자 함수를 new 를 사용해 호출할 때만 적용됩니다.

// 참고로 일반 객체엔 'prototype' 프로퍼티를 추가해도 아무런 일이 일어나지 않습니다.

let obj7 = {
    name: 'inhui',
    prototype: '1234'
};

// 모든 함수는 기본적으로 F.prototype = { constructor : F } 를 가지고 있으므로 constructor 프로퍼티를 사용하면 객체의 생성자를 얻을 수 있습니다.



</script>