<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>
// 논리 연산자
// 자바스크립트엔 세 종류의 논리 연산자 || (or) , && (and) , ! (not) 이 있습니다.
// 연산자에 '논리' 라는 수식어가 붙긴 하지만 논리 연산자는 피연산자로 boolean 형뿐만 아니라 모든 타입의 값을 받을 수 있습니다.
// 연산 결과 역시 모든 타입이 될 수 있습니다.

// 피연산자가 boolean 인 경우는 잘 알고있기 때문에 추가기능에 대해서만 알아봅니다.

// 첫번째 true 를 찾는 or 연산자 '||'

// or 연산자와 피 연산자가 여러 개인 경우 
// result = value1 || value2 || value3;
// 이때 || 연산자는 다음 순서에 따라 연산을 수행합니다.
// 1. 가장 왼쪽 피연산자부터 시작해 오른쪽으로 나아가며 피연산자를 평가합니다.
// 2. 각 피연산자를 boolean 형으로 변환하여 그 값이 true 면 연산을 멈추고 해당 피연산자의 변환 전 원래 값을 반환합니다.
// 3. 피연산자 모두를 평가한 경우(모든 피연산자가 false 로 평가되는 경우)엔 마지막 피연산자를 반환합니다.

// 여기서 핵심은 반환 값이 형 변환을 하지 않은 원래 값이라는 것입니다.
// 정리해 보자면 이렇습니다. 
// || 연산자를 여러 개 체이닝(chaining) 하면 첫 번째 true 를 반환합니다.
// 피연산자에 true 가 하나도 없다면 마지막 피연산자를 반환합니다.

console.log('1 || 0 : ', 1 || 0);
console.log('null || 1 : ', null || 1);
console.log('null || 0 || 1 : ', null || 0 || 1);
console.log('undefined || null || 0 : ', undefined || null || 0);

// 이런 || 연산자의 추가 기능을 이용하면 여러 용도로 || 연산자를 활용할 수 있습니다.

// 1. 변수 또는 표현식으로 구성된 목록에 첫 번째 true 얻기

let firstName = '';
let lastName = '';
let nickName = 'Noh In Hui';
console.log(`firstName || lastName || nickName || '익명' : `, firstName || lastName || nickName || '익명');

// 모든 변수가 falsy면 '익명' 이 출력되었을 겁니다.

// 2. 단락 평가

// or 연산자 || 가 제공하는 또 다른 기능은 '단락 평가' 입니다.
// 위에서 설명해 드린 바와 같이 || 은 왼쪽부터 시작해서 오른쪽으로 평가를 진행하는데, true를 만나면 나머지 값들은 건드리지 않은 채 평가를 멈춥니다. 이런 프로세스를 '단락평가' 라고 합니다.

// 단락 평가의 동작 방식은 두 번째 피연산자가 변수 할당과 같은 부수적인 효과를 가지는 표현식 일 때 명확히 볼 수 있습니다.

// 아래 예시를 실행하면 두 번째 메시지만 출력됩니다.
true || console.log('not printed');
false || console.log('printed');

// 첫 번째 줄의 || 연산자는 true 를 만나자마자 평가를 멈추기 때문에 console 이 실행되지 않습니다.
// 단락 평가는 연산자 왼쪽 조건이 false 일 때만 명령어를 실행하고자 할 때 자주 쓰입니다.


// 첫 번째 false를 찾는 and 연산자 '&&'

// and 연산자와 피연산자가 여러 개인 경우를 살펴봅시다.
// result = value1 && value2 && value3;

// && 연산자는 아래와 같은 순서로 동작합니다.

// 1. 가장 왼쪽 피연산자부터 시작해 오른쪽으로 나아가며 피연산자를 평가합니다.
// 2. 각 피연산자는 boolean 형으로 변환됩니다. 변환 후 값이 false 이면 평가를 멈추고 해당 피연산자의 변환 전 원래 값을 반환합니다.
// 3. 피연산자 모두가 평가되는 경우(모든 피연산자가 true 로 평가되는 경우)엔 마지막 피연산자가 반환됩니다.

// 정리해 보자면 이렇습니다.
// && 연산자는 첫 번째 false 를 반환합니다.
// 피연산자에 false 가 없다면 마지막 값을 반환합니다.

// 위 알고리즘은 or 연산자의 알고리즘과 유사합니다. 차이점은 and 연산자가 첫 번째 false 를 반환하는 반면, or 은 첫 번째 true .를 반환한다는 것입니다.

console.log('1 && 0 : ', 1 && 0);
console.log('1 && 5 : ', 1 && 5);
console.log('null && 5 : ', null && 5);
console.log(`0 && 'XXXXX' : `, 0 && 'XXXXX');

// && 의 우선순위가 || 보다 높습니다.
// a && b || c && d 는 (a && b) || (c && d) 와 동일하게 동작합니다.



</script>