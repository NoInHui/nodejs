<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>




// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// 참조에 의한 객체 복사

// 객체와 원시 타입의 근본적인 차이 중 하나는 객체는 '참조에 의해' 저장되고 복사된다는 것입니다.
// 원시값(문자열, 숫자, 불린)은 값 그대로 저장,할당되고 복사되는 반면에 말이죠.

let str1 = 'Hello';
let str2 = str1;
str1 = 'Hello2';

// 두 개의 독립된 변수에 각각 문자열 Hello 가 저장됩니다.
console.log('str1', str1);
console.log('str2', str2); // str2 가 Hello2 로 변경되지 않는것을 확인

// 그런데 객체의 동작 방식은 이와 다릅니다.
// 변수엔 객체 그대로 저장되는 것이 아니라, 객체가 저장되어있는 '메모리 주소'인 객체에 대한 '참조 값'이 저장됩니다.

let obj1 = {
    name: 'inhui'
};

// 객체는 메모리 내 어딘가에 저장되고, 변수 obj1 엔 객체를 참조할 수 있는 값이 저장됩니다.
// 따라서 객체가 할당된 변수를 복사할 땐 객체의 참조 값이 복사되고 객체는 복사되지 않습니다.

let obj2 = obj1
obj2.name = 'peter';
obj2.name2 = 'kim';
console.log('obj1', obj1); // 결과 : {name: 'peter', name2: 'kim'}

// 참조에 의한 비교
// 객체 비교 시 동등 연사자 == 와 일치 연산자 === 는 동일하게 동작합니다.
// 비교 시 피연산자인 두 객체가 동일한 객체인 경우 참을 반환하죠.

console.log('obj1 == obj2', obj1 == obj2)
console.log('obj1 === obj2', obj1 === obj2)

// 객체 복사, 변합과 Object.assign
// 객체가 할당된 변수를 복사하면 동일한 객체에 대한 참조 값이 하나 더 만들어집니다.
// 객체를 복제하고 싶다면 어떻게 해야 할까요? 기존에 있던 객체와 똑같으면서 독립적인 객체를 만들고 싶다면 말이죠.
// 복제가 필요한 상황이라면 새로운 객체를 만든 다음 기존 객체의 프로퍼티들을 순회해 원시 수준까지 프로퍼티를 복사하면 됩니다.

let obj3 = {};
for(let key in obj1) {
    obj3[key] = obj1[key];
}

obj3.name = 'noh';
obj3.name3 = 'kaka';

console.log('obj1', obj1);
console.log('obj3', obj3);

// Object.assign 을 사용하는 방법도 있습니다.

let obj4 = {
    name4 : 'susu'
};

Object.assign(obj4, obj1, obj3);

console.log('obj4', obj4);

// 중첩 객체 복사
// 지금까진 객체의 모든 프로퍼티가 원시값인 경우만 가정했습니다.
// 그런데 프로퍼티가 객체에 대한 참조 값일 수도 있습니다.

let obj5 = {
    name: 'inhui',
    size: {
        height: 180,
        width: 70,
    }
};

// clone.size = user.size 로 프로퍼티를 복사하는 것만으론 객체를 복사할 수 없습니다.
// user.size 는 객체이기 때문에 참조 값이 복사되기 때문입니다.
// clone.size = user.size 로 프로퍼티를 복사하면 clone 과 user 는 같은 size 를 공유하게 됩니다.

let obj6 = Object.assign({}, obj5);
console.log('obj6.size === obj5.size', obj6.size === obj5.size); // true

// 이 문제를 해결하려면 key 값을 검사하면서, 그 값이 객체인 경우 객체의 구조도 복사해주는 반복문을 사용해야 합니다.
// 이런 방식을 '깊은 복사(deep cloning)' 라고 합니다.

let obj7 = {
    name: 'inhui',
    size: {
        height: 180,
        width: 70,
        cur: {
            width: 80,
        }
    }
}

function clone(obj) {
    let cloneObj = {};
    for(let key in obj) {
        if(typeof obj[key] === 'object') {
            cloneObj[key] = clone(obj[key]);
        } else {
            cloneObj[key] = obj[key];
        }
    }
    return cloneObj;
}

let obj8 = clone(obj7);

console.log('obj8', obj8);
console.log('obj8.size.cur === obj7.size.cur', obj8.size.cur === obj7.size.cur);

// 자바스크립트 라이브러리 lodash 의 메서드인 _.cloneDeep(obj) 을 사용하면 이 알고리즘을 직접 구현하지 않고도 깊은 복사를 처리할 수 있다.

let obj9 = _.cloneDeep(obj7);
console.log('obj9', obj9);
console.log('obj9.size.cur === obj7.size.cur', obj9.size.cur === obj7.size.cur);

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// 나머지 매개변수와 스프레드 문법

// 나머지 매개변수 ...
// 함수 정의 방법과 상관없이 함수에 넘겨주는 인수의 개수엔 제약이 없습니다.
function func1(a,b) {
    console.log(a+b);
}

func1(1,2,3,4);

// 아래 예시에선 모든 인수가 배열 args 에 모입니다.
// ... 는 남아있는 매개변수들을 한데 모아 배열에 집어넣어라 는 것을 의미합니다.
function func2(...args) {
    let sum = args.reduce((acc,cur,i) => {
        acc += cur;
        return acc;
    },0);
    console.log(sum);
}

func2(1,2,3,4);

// 앞부분의 매개변수는 변수로, 남아있는 매개변수들은 배열로 모을 수 있습니다.
function func3(a,b,...args) {
    let sum = a+b;
    sum = args.reduce((acc,cur,i) => {
        acc += cur;
        return acc;
    },sum);
    console.log(sum);
}

func3(1,2,3,4);

// 나머지 매개변수는 항상 마지막에 있어야 합니다.
// 나머지 매개변수는 남아있는 인수를 모으는 역할을 하므로 아래 예시에선 에러가 발생합니다.
// function func(...args, a,b) { }

// arguments 객체
// 유사 배열 객체(array-like object)인 arguments 를 사용하면 인덱스를 사용해 인수에 접근할 수 있습니다.

function func4() {
    console.log(arguments, arguments.length, arguments[2]);
}

func4(1,2,3,4);

// 나머지 매개변수는 비교적 최신에 나온 문법입니다.
// 나머지 매개변수가 나오기 이전엔 함수의 인수 전체를 얻어내는 방법이 arguments 를 사용하는 것밖에 없었습니다.
// 물론 지금도 arguments 를 사용할 수 있습니다. 오래된 코드를 보다 보면 arguments 를 만나게 되죠.

// 화살표 함수는 arguments 객체를 지원하지 않습니다.
// 화살표 함수에서 arguments 객체에 접근하면, 외부에 있는 '일반'함수의 arguments 객체를 가져옵니다.

function func5() {
    let func = () => {
        console.log(arguments);
    }
    func();
}

func5(1,2,3,4);

// 스프레드 문법
// 매개변수와는 반대로 배열을 인수 목록으로 반환합니다.
// 내장함수 Math.max 는 인수로 받은 숫자 중 가장 큰 숫자를 반환합니다.

function func6(array) {
    console.log(Math.max(array)); // NaN
    console.log(Math.max(...array)); // 최대값 뽑아냄
}

func6([1,2,3,4]);

// Math.max(a,b,c,d) 처럼 배열 요소를 수동으로 나열하는 방법도 있긴 한데, 배열 길이를 알 수 없을 때는 이마저도 불가능합니다.
// 스크립트가 돌아갈 때 실제 넘어오는 배열의 길이는 아주 길 수도 있고, 아예 빈 배열일 수도 있기 때문입니다.

// 스프레드 문법(spread syntax, 전개문법)은 이럴 때 사용하기 위해 만들어졌습니다.
// ... 를 사용하기 때문에 나머지 매개변수와 비슷해 보이지만, 스프레드 문법은 나머지 매개변수와 반대되는 역할을 합니다.
// 함수를 호출할 때 ...arr 를 사용하면, 이터러블 객체 arr 이 인수 목록으로 확장 됩니다.

// 아래와 같이 이터러블 객체 여러 개를 전달하는 것도 가능합니다.

let arr1 = [1,2,3,4];
let arr2 = [5,6,7,8];
console.log(Math.max(...arr1, 10, ...arr2));

// 배열이 아니더라도 이터러블 객체이면 스프레드 문법을 사용할 수 있습니다.
let str1 = 'Hello';
console.log([...str1]);

// 스프레드 문법은 for..of 와 같은 방식으로 내부에서 이터레이터(iterator, 반복자)를 사용해 요소를 수집합니다.

// 메서드 Array.from 은 이터러블 객체인 문자열을 배열로 바꿔주기 때문에 Array.from 을 사용해도 동일한 작업을 할 수 있습니다.
let str2 = 'Hello';
console.log(Array.from(str2));

// 그런데 Array.from(obj) 와 [...obj] 는 다음과 같은 미묘한 차이가 있습니다.
// 1. Array.from 은 유사 배열 객체와 이터러블 객체 둘 다 사용할 수 있습니다.
// 2. 스프레드 문법은 이터러블 객체에만 사용할 수 있습니다.

// 이런 이유때문에 무언가를 배열로 바꿀 때는 스프레드 문법보다 Array.from 이 보편적으로 사용됩니다.

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// 가비지 컬렉션

// 자바스크립트는 눈에 보이지 않는 곳에서 메모리 관리를 수행합니다.

// 가비지 컬렉션 기준
// 자바스크립트는 도달 가능성(reachability) 이라는 개념을 사용해 메모리를 관리합니다.
// 도달 가능한 값은 쉽게 말해 어떻게든 접근하거나 사용할 수 있는 값을 의미합니다.

// 아래 소개하는 값들은 태생부터 도달 가능하기 때문에, 명백한 이유 없이는 삭제되지 않습니다.

// 1. 현재 함수의 지역변수와 매개변수
// 2. 중첩함수의 체인에 있는 함수에서 사용되는 변수와 매개변수
// 3. 전역변수
// 4. 기타 등등

// 이런 값은 루트(root) 라고 부릅니다.

// 루트가 참조하는 값이나 체이닝으로 루트에서 참조할 수 있는 값은 도달 가능한 값이 됩니다.

// 전역 변수에 객체가 저장되어있다고 가정해 봅시다.
// 이 객체의 프로퍼티가 또 다른 객체를 참조하고 있다면, 프로퍼티가 참조하는 객체는 도달 가능한 값이 됩니다.
// 이 객체가 참조하는 다른 모든 것들도 도달 가능하다고 여겨집니다.

// 자바스크립트 엔진 내에선 가비지 컬렉터(gargabe collector) 가 끊임없이 동작합니다.
// 가비지 컬렉터는 모든 객체를 모니터링하고, 도달할 수 없는 객체는 삭제합니다.

let obj1 = {
    name: 'inhui'
};

// 객체 obj1 은 {name:'inhui'} 이라는 객체를 참조합니다.

obj1 = null;

// 이제 {name:'inhui'} 은 도달할 수 없는 상태가 되었습니다.
// 가비지 컬렉터는 이제 {name:'inhui'} 에 저장된 데이터를 삭제하고, {name:'inhui'}을 메모리에서 삭제합니다.

let obj2 = {
    name: 'inhui'
};

obj3 = obj2;
obj2 = null;
console.log('obj3.name', obj3.name);

// {name: 'inhui'} 은 obj3 을 통해 접근할 수 있기 때문에 메모리에서 삭제되지 않습니다.
// 이 상태에서 obj3 을 다른 값(null 등)으로 덮어쓰면 {name: 'inhui'} 은 메모리에서 삭제될 수 있습니다.

// 연결된 객체

function func1(man, woman) {
    woman.husband = man;
    man.wife = woman;

    return {
        father: man,
        mother: woman
    }
}

let family = func1({name: 'inhui'},{name: 'eunji'});

console.log('family', family);

// 함수는 매개변수로 받은 두 객체를 서로 참조하게 하면서 두 객체를 포함하는 새로운 객체를 반환합니다.
// 지금은 모든 객체가 도달 가능한 상태입니다.
// 이제 참조 두 개를 지워보겠습니다.
delete family.father;
// family.father 을 지우더라도 모든 객체가 연결되어있기 떄문에 도달 가능한 상태입니다.
delete family.mother.husband;
// 이젠 {name: 'eunji'} 만 도달 가능한 상태가 됩니다.

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// 프로퍼티와 플래그
// 1. writable : true 이면 값을 수정할 수 있습니다. 그렇지 않다면 읽기만 가능합니다.
// 2. enumerable : true 이면 반복문을 사용해 나열할 수 있습니다. 그렇지 않다면 반복문을 사용해 나열할 수 없습니다.
// 3. configurable : true 이면 프로퍼티 삭제나 플래그 수정이 가능합니다. 그렇지 않다면 프로퍼티 삭제와 플래그 수정이 불가능합니다.

let obj1 = {
    name: 'inhui',
    old: 32,
    array: [1,2,3,4],
};

// 프로퍼티 플래그 관련 메서드
console.log(Object.getOwnPropertyDescriptor(obj1, 'array'));
console.log(Object.getOwnPropertyDescriptors(obj1));

Object.defineProperty(obj1, 'surname', {
    value: 'noh',
    enumerable: false,
    configurable: false,
    writable: false,
});

let obj2 = Object.defineProperties({}, {
    name: {value:'tom', writable:true, enumerable:true, configurable: true},
    surname: {value:'kim'}
});

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// 접근자 프로퍼티 getter 와 setter

// 객체의 프로퍼티는 두 종류로 나뉩니다.
// 1. 데이터 프로퍼티(data property) : 보통 사용하는 프로퍼티
// 2. 접근자 프로퍼티(access property) : 접근자 프로퍼티의 본질은 함수, 이 함수는 값을 get, set 하는 역할을 담당, 외부 코드에서는 함수가 아닌 일반적인 프로퍼티처럼 보입니다.

// 접근자 프로퍼티는 객체 리터럴 안에서 getter,setter 메서드는 get,set 으로 나타낼 수 있습니다.
let obj3 = {
    surname: 'noh',
    name: 'inhui',
    get fullName() {
        return `${this.surname} ${this.name}`;
    },
    set fullName(value) {
        if(Object.getPrototypeOf(value) === Array.prototype && value.length == 2) {
            [this.surname, this.name] = value;
        } else {
            console.log('not set fullName');
            return;
        }   
    }
};

obj3.fullName = ['kim','eunji'];

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// 프로토타입 상속

// [[Prototype]] : 자바스크립트 객체는 명세서에서 명명한 [[Prototype]] 이라는 숨김 프로퍼티를 갖습니다.
// [[Prototype]] 값은 null 이거나 다른 객체에 대한 참조가 되는데, 다른 객체를 참조하는 경우 참조 대상을 '프로토타입' 이라 부릅니다.

// __proto__ : [[Prototype]] 용 getter, setter 입니다.
// __proto__ 는 하위 호환성 때문에 여전히 사용하지만 비교적 근래에 작성된 스크립트에는 함수 Object.getPrototypeOf , Object.setPrototypeOf 를 사용해 get,set 합니다.

let obj4 = {
    eats: true,
    walk() {
        return `call keys : ${Object.keys(this)} , walk()`;
    }
};

let obj5 = {
    jumps: true,
    __proto__ : obj4
};

let obj6 = {
    earLength: 10
};

obj6.__proto__ = obj5;

console.log(obj6.walk());

// 프로토타입 체이닝엔 두 가지 제약사항이 있습니다.
// 1. 순환 참조(circular reference) 는 허용되지 않습니다.
// 2. __proto__ 의 값은 null 또는 객체만 가능합니다. 다른 자료형은 무시됩니다.

// 프로토타입은 읽기 전용입니다.
// 프로토타입에 프로퍼티를 추가,수정,삭제 연산은 객체에 직접 해야 합니다.

let obj7 = {
    surname: 'noh',
    name: 'inhui',
    get fullName() {
        return `${this.surname} ${this.name}`;
    },
    set fullName(value) {
        if(Object.getPrototypeOf(value) === Array.prototype && value.length == 2) {
            [this.surname, this.name] = value;
        } else {
            console.log('not set fullName');
            return;
        }   
    }
};

let obj8 = {
    __proto__: obj7,
    isAdmin: true,
};

obj8.fullName = ['kim','eunji'];

console.log(obj7.fullName, obj8.fullName);
// obj7 의 surname, name 프로퍼티는 변경되지 않았습니다.
// 메서드를 객체에서 호출했든 프로토타입에서 호출했든 상관없이 this 는 언제나 . 앞에 있는 객체입니다.

let obj9 = {
    __proto__: obj7,
    isAdmin: true,
}

// Object.keys 는 객체 자신의 키만 반환합니다.
console.log(Object.keys(obj9));

// for..in 은 상속 프로퍼티도 순회대상에 포함시킵니다.
for(let key in obj9) console.log(key);

// obj.hasOwnProperty(key) 를 이용하면 상속 프로퍼티를 순회 대상에서 제외할 수 있습니다.
for(let key in obj9) {
    if(obj9.hasOwnProperty(key)) {
        console.log('exist key : ' + key);
    } else {
        console.log('prototype key : ' + key);
    }
};

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// 함수의 prototype 프로퍼티

// 함수의 디폴트 프로퍼티 prototype 과 constructor 프로퍼티
// 개발자가 특별히 할당하지 않더라도 모든 함수는 기본적으로 prototype 프로퍼티를 갖습니다.
// default 프로퍼티 prototype 은 constructor 프로퍼티 하나만 있는 객체를 가리키는데, 여기서 constructor 프로퍼티는 함수 자신을 가리킵니다.

function func1() {};
console.log(func1.prototype.constructor === func1);

// 특별한 조작을 가하지 않았다면 new function 을 실행해 만든 객체 모두에서 constructor 프로퍼티를 사용할 수 있는데, 이때 [[Prototype]] 을 거칩니다.

let func2 = new func1(); // {constructor: func1} 을 상속받음
console.log(func2.constructor == func1); // [[Prototype]] 을 거쳐 접근함

// constructor 프로퍼티는 기존에 있던 객체의 constructor 를 사용해 새로운 객체를 만들때 사용할 수 있습니다.
let func3 = new func2.constructor;

// 자바스크립트는 알맞은 'constructor' 값을 보장하지 않습니다.
// 함수엔 기본적으로 prototype 이 설정된다라는 사실 그게 전부입니다.
// constructor 와 관련해서 벌어지는 모든 일은 전적으로 개발자에게 달려있습니다.

function func4() {};
func4.prototype = {
    jumps: true
};

let func5 = new func4();
console.log(func5.constructor === func4);

// constructor 의 기본 성질을 제대로 활용하려면 prototype 전체를 덮어쓰지 말고 원하는 프로퍼티를 추가,제거해야 합니다.

function func6() {};
func6.prototype.jumps = true;

// constructor 프로퍼티를 수동으로 다시ㅏ 만들어주면 constructor 를 다시 사용할 수 있습니다.
func4.prototype.constructor = func4;

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// 내장 객체의 프로토타입

// 모든 내장 생성자 함수에서 prototype 프로퍼티를 사용합니다.
// new Object() 를 호출하거나 리터럴 문법 {...} 을 사용해 객체를 만들 때, 새롭게 생성된 객체의 [[Prototype]] 은 규칙에 따라 Object.prototype 을 참조합니다.

let obj10 = {};
console.log(obj10.__proto__ === Object.prototype);
console.log(obj10.toString === Object.prototype.toString);

// 다양한 내장 객체의 프로토타입
// Array, Date, Function 을 비롯한 내장 객체들 역시 프로토타입에 메서드를 저장해 놓습니다.

// 원시값
// 문자열,숫자,불린값은 객체가 아닙니다.
// 이런 원시 타입 값의 프로퍼티에 접근하려고 하면 내장 생성자 String, Number, Boolean 을 사용하는 임시 래퍼(wrapper)객체가 생성됩니다.
// 임시 래퍼 객체는 이런 메서드를 제공하고 난 후 사라집니다.
// 래퍼 객체는 보이지 않는 곳에서 만들어지는데 엔진에 의해 최적화가 이뤄집니다.

// null, undefined 에 대응하는 래퍼 객체는 없습니다.
// 따라서 null 과 undefined 에선 메서드와 프로퍼티를 이용할 수 없습니다.
// 프로토타입도 물론 사용할 수 없습니다.

// 네이티브 프로토타입은 수정할 수 있습니다.
String.prototype.test1 = function() {
    return `String.prototype.test1 by ${this}`;
};
console.log('inhui'.test1());

// 네이티브 프로토타입을 수정하는 것은 기존 코드와 충돌이 날 가능성이 크기 때문에 수정하지 않는게 좋습니다.
// 다만 폴리필을 만들때는 허용합니다.

// 프로토타입에서 메서드 빌려오기
let obj11 = {
    0: 'hello',
    1: 'world',
    length: 2,
};

obj11.join = Array.prototype.join;
console.log(obj11.join(','));

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// 프로토타입 메서드와 __proto__ 가 없는 객체

// 프로토타입을 설정하기 위한 모던한 메서드

let obj12 = {
    eats: true
};

// Object.create(proto, [descriptors])
// [[Prototype]] 이 proto 를 참조하는 빈 객체를 만듭니다. 이때 프로퍼티 설명자를 추가로 넘길 수 있습니다.
let obj13 = Object.create(obj12, {
    name: {
        value: 'inhui',
        writable: false,
        enumerable: false,
        configurable: false,
    }
});

// obj 의 [[Prototype]] 을 반환합니다.
console.log(Object.getPrototypeOf(obj13));

// obj의 [[Prototype]] 이 proto 가 되도록 설정합니다.
Object.setPrototypeOf(obj13, {jumps: false});

// Object.create 를 사용하면 효과적으로 객체를 복사할 수 있습니다.
let obj14 = Object.create(Object.getPrototypeOf(obj13), Object.getOwnPropertyDescriptors(obj13));

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// 콜백(callback)

// 자바스크립트 호스트 환경에 제공하는 여러 함수를 사용하면 비동기(asynchronous) 동작을 스케줄링 할 수 있습니다.
// 콜백은 비동기 프로그래밍의 일반적인 접근법입니다.

function loadScript1(src, callback) {
    let script = document.createElement('script');
    script.src = src;
    script.onload = () => callback(script);
    document.head.append(script);
}

loadScript1('/test/testScript1.js', script => {
    console.log(`${script.src} load`);
    testScript1();
});

// 이런 방식을 '콜백 기반(callback-based)' 비동기 프로그래밍이라고 합니다.
// 무언가를 비동기적으로 수행하는 함수는 함수 내 동작이 모두 처리된 후 실행되어야 하는 함수가 들어갈 콜백을 인수로 반드시 제공해야 합니다.

// 콜백 에러 핸들링

// 콜백 함수는 에러 핸들링할 수 있어야 합니다.
// 오류 우선 콜백(error-first callback) 패턴은 다음 관례를 따릅니다.

// 1. callback 의 첫 번째 인수는 에러를 위해 남겨둡니다. 에러가 발생하면 이 인수를 이용해 callback(err) 가 호출됩니다.
// 2. 두 번째 인수(필요하면 인수를 더 추가할 수 있음)는 에러가 발생하지 않았을 때를 위해 남겨둡니다. 원하는 동작이 성공한 경우엔 callback(null, result1, result2...) 가 호출됩니다.

function loadScript2(src, callback) {
    let script = document.createElement('script');
    script.src = src;
    script.onload = () => callback(null, script);
    script.onerror = (e) => callback(new Error('script load error'));
    document.head.append(script);
}

loadScript2('/test/testScript3.js', (error, script) => {
    if(error) {
        console.log(`error : ${error}`);
    } else {
        console.log(`${script.src} load`);
        testScript2();
    }
});

// 오류 우선 콜백 스타일을 사용하면, 단일 콜백 함수에서 에러 케이스와 성공 케이스 모두를 처리할 수 있습니다.

// 멸망의 피라미드

// 콜백 기반 비동기 처리는 언뜻 봤을 때 꽤 쓸만해 보이고, 실제로도 그렇습니다.
// 한 개 혹은 두 개의 중첩 호출이 있는 경우는 보기에도 나쁘지 않습니다.
// 하지만 꼬리에 꼬리를 무는 비동기 동작이 많아지면 아래와 같은 코드 작성이 불가피해 집니다.

loadScript2('/test/1.js', (error, script) => {
    if(error) {
        console.log(`error1 : ${error}`);
    } else {
        loadScript2('/test/2.js', (error, script) => {
            if(error) {
                console.log(`error2 : ${error}`);
            } else {
                loadScript2('test/3.js', (error, script) => {
                    // ...
                })
            }
        })
    }
})

// 이렇게 깊은 중첩 코드가 만들어지는 패턴은 소위 '콜백 지옥(callback hell)' 혹은 '멸망의 피라미드(pyramid of doom)' 라고 불립니다.
// 이런 코딩 방식은 좋지 않습니다.

// 멸망의 피라미드를 피할 방법이 몆가지 있습니다.
// 각 동작을 독립적인 함수로 만들어 위와 같은 문제를 해결하는 방법도 있지만 코드가 찢어진 종잇조각 같아 보인다는 문제가 생깁니다.
// 가장 좋은 방법 중 하나는 '프라미스(promise)' 를 사용하는 것입니다.

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// 프라미스(promise)

// promise 객체는 아래와 같은 문법으로 만들 수 있습니다.

let promise1 = new Promise(function(resolve, reject) {
    // execurotr
});

// new Promise 에 전달되는 함수는 executor(실행자, 실행함수) 라고 부릅니다.
// executor 는 new Promise 가 만들어질 때 자동으로 실행되는데, 결과를 최종적으로 만들어내는 제작 코드를 포함합니다.
// executor 의 인수 resolve 와 reject 는 자바스크립트에서 자체 제공하는 콜백입니다.
// executor 에선 결과를 즉시 얻든 늦게 얻든 상관없이 상황에 따라 인수로 넘겨준 콜백 중 하나를 반드시 호출해야 합니다.

// resolve(value) - 성공적으로 끝난 경우 그 결과를 나타내는 value와 함께 호출
// reject(error) - 에러 발생 시 에러 객체를 나타내는 error 와 함께 호출

// new Promise 생성자가 반환하는 promise 객체는 다음과 같은 내부 프로퍼티를 갖습니다.

// state - 처음엔 pending(보류) 이었다 resolve 가 호출되는 'fulfilled', reject 가 호출되면 'rejected' 로 변합니다.
// result - 처음엔 undefined 이었다 resolve(value) 가 호출되면 value 로, reject(error) 가 호출되면 error 로 변합니다.

let promise2 = new Promise(function(resolve, reject) {
    setTimeout(() => resolve('promise2'), 1000);
}).then(
    result => console.log('promise success : ' + result),
    error => console.log('promise error : ' + error),
);

let promise3 = new Promise(function(resolve, reject) {
    setTimeout(() => reject(new Error('promise3')), 2000);
}).then(
    result => console.log('promise success : ' + result),
    error => console.log('promise error : ' + error),
);

// executor 는 보통 시간이 걸리는 일을 수행합니다.
// 일이 끝나면 resolve 나 reject 함수를 호출하는데, 이때 프라미스 객체의 상태가 변화합니다.
// 프라미스는 성공 또는 실패만 합니다. executor는 resolve 나 reject 중 하나를 반드시 호출해야 합니다.

// promise : then

// .then 의 첫 번째 인수는 프라미스가 이행되었을 때 실행되는 함수이고, 여기서 실행 결과를 받습니다.
// .then 의 두 번째 인수는 프라미스가 거부되었을 때 실행되는 함수이고, 여기서 에러를 받습니다.

// promise : catch

// 에러가 발생한 경우만 다루고 싶다면 .then(null, errorHandle) 같이 null 을 첫 번째 인수로 전달하면 됩니다.
// .catch(errorHandle) 를 써도 되는데 .catch 는 .then 에 null 을 전달하는 것과 동일하게 작동합니다.

let promise4 = new Promise(function(resolve, reject) {
    setTimeout(() => reject(new Error('promise4')), 3000);
}).then(
    result => console.log('promise success : ' + result),
).catch(
    error => console.log('promise error : ' + error)
);

// .catch(f) 는 .then(null, f) 와 완벽하게 같습니다.

// promise : finally

// 결과가 어떻든 마무리가 필요하면 finally 가 유용합니다.
// finally 핸들러엔 인수가 없습니다.
// finally 에선 프라미스가 이행되었는지, 거부되었는지 알 수 없습니다.
// finally 에선 절차를 마무리하는 '보편적' 동작을 수행하기 때문에 성공,실패 여부를 몰라도 됩니다.

let promise5 = new Promise(function(resolve, reject) {
    setTimeout(() => resolve('promise5'), 4000);
}).then(
    result => console.log('promise success : ' + result)
).catch(
    error => console.log('promise error : ' + error)
).finally(
    () => console.log('promise5 finally')
);

// 처리된 프라미스의 핸들러는 즉각 실행됩니다.
// 프라미스가 대기 상태일 때 .then/catch/finally 핸들러는 프라미스가 처리되길 기다립니다.
// 반면 프라미스가 이미 처리상태라면 핸들러가 즉각 실행됩니다.

let promise6 = new Promise(function(resolve, reject) {
    setTimeout(() => resolve('promise6'), 5000);
});

setTimeout(() => {
    promise6.then(
        result => console.log('promise success : ' + result)
    ).catch(
        error => console.log('promise error : ' + error)
    ).finally(
        () => console.log('promise6 finally')
    )
}, 7000);

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// 프라미스 체이닝

// 콜백 챕터의 멸망의 피라미드와 같이 문제를 프라미스를 사용하면 여러 가지 해결책을 만들 수 있습니다.
// 프라미스 체이닝은 아래와 같이 생겼습니다.

new Promise(function(resolve, reject) {
    setTimeout(() => resolve(1), 8000);
}).then(function(result) {
    console.log('promise chain1-1', result);
    return result*2
}).then(function(result) {
    console.log('promise chain1-2', result);
    return result*2
}).then(function(result) {
    console.log('promise chain1-3', result);
    return result*2
});

// 프라미스 체이닝이 가능한 이유는 promise.then 을 호출하면 프라미스가 반환되기 때문입니다.
// 반환된 프라미스엔 당연히 .then 을 호출할 수 있습니다.

// 프라미스 반환하기
// .then(handler) 에 사용된 핸들러가 프라미스를 생성하거나 반환하는 경우도 있습니다.
// 이 경우 이어지는 핸들러는 프라미스가 처리될 때까지 기다리다가 처리가 완료되면 그 결과를 받습니다.

new Promise((resolve, reject) => {
    setTimeout(() => resolve(1), 9000);
}).then(result => {
    console.log('promise chain2-1', result);
    return new Promise((resolve, reject) => {
        setTimeout(() => resolve(result*2), 1000);
    });
}).then(result => {
    console.log('promise chain2-2', result);
    return new Promise((resolve, reject) => {
        setTimeout(() => resolve(result*2), 1000);
    });
}).then(result => console.log('promise chain2-3', result));

// 이렇게 핸들러 안에서 프라미스를 반환하는 것도 비동기 작업 체이닝을 가능하게 해줍니다.

// fetch 와 체이닝 함께 응용하기
// 프론트 단에선, 네트워크 요청 시 프라미스를 자주 사용합니다.

fetch('/save/jsonData.json')
.then(res => res.json())
.then(userlist => console.log(userlist));

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// 프라미스와 에러 핸들링

// 프라미스가 거부되면 제어 흐름이 제일 가까운 rejection 핸들러로 넘어가기 때문에 프라미스 체인을 사용하면 에러를 쉽게 처리할 수 있습니다.
// .catch 는 첫번째 핸들러일 필요가 없고 하나 혹은 여러 개의 .then 뒤에 올 수 있습니다.

fetch('/save/jsonData.json')
.then(res => res.json())
.then(userlist => userlist[0])
.then(user => {
    console.log('user', user)
    throw new Error('promise error handle1 : error');
    // reject(new Error('promise error handle1 : error'));
})
.catch(e => console.log(e));

// 암시적 try..catch

// 프라미스 executor 와 프라미스 핸들러 코드 주위엔 '보이지 않는(암시적) try..catch' 가 있습니다.
// 예외가 발생하면 암시적 try..catch 에서 스스로 예외를 잡고, 에러를 거부상태의 프라미스로 변경시킵니다.
// .then 핸들러 안에서 throw 를 사용해 에러를 던지면, 이 자체가 거부된 프라미스를 의미하게 됩니다. 따라서 제어 흐름이 가장 가까운 에러 핸들러로 넘어갑니다.

new Promise((resolve, reject) => {
    resolve('')
}).then(result => {
    throw new Error('promise error handle2 : error');
}).catch(e => console.log(e));

// 다시 던지기

// .catch 안에서 throw 를 사용하면 제어 흐름이 가장 가까운 곳에 있는 에러 핸들러로 넘어갑니다.
// 여기서 에러가 성공적으로 처리되면 가장 가까운 곳에 있는 .then 핸들러로 제어 흐름이 넘어가 실행이 이어집니다.

// 아래 예시의 .catch 는 에러를 성공적으로 처리합니다.

new Promise((resolve, reject) => {
    throw new Error('error1');
}).catch(e => {
    console.log('에러 처리 완료1', e);
}).then(() => console.log('에러 처리 후 핸들러 실행1'));

// .catch 블록이 정상적으로 종료되었기 때문에 다음 성공 핸들러 .then 이 호출된 것을 확인할 수 있습니다.

new Promise((resolve, reject) => {
    throw new Erorr('error2')
}).catch(e => {
    console.log('에러 처리 시도', e);
    if(e instanceof URIError) {
        // 에러 처리
    } else {
        throw e; // 에러 다시 던짐
    }
}).then(
    () => console.log('실행되지 않음')
).catch(e => {
    console.log('에러 처리 불가', e);
});

// 실행 흐름이 첫 번째 .catch 로 넘어갔다가 다음 .catch 로 이어지는 것을 확인할 수 있습니다.

// 처리되지 못한 거부

new Promise((resolve, reject) => {
    blabla();
}).then(result => {

});

// 에러가 발생하면 프라미스는 거부상태가 되고, 실행 흐름이 가장 가까운 rejection 핸들러로 넘어갑니다.
// 그런데 위 예시엔 예외를 처리해 줄 핸들러가 없어서 에러가 갇혀버립니다.
// 자바스크립트 엔진은 프라미스 거부를 추적하다가 위와 같은 상황이 발생하면 전역 에러를 생성합니다.

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// 프라미스 API

// Promise 클래스에는 5가지 정적 메서드가 있습니다.

// Promise.all
// Promise.all 은 요소 전체가 프라미스인 배열(엄밀히 따지면 이터러블 객체이지만, 대개는 배열임)을 받고 새로운 프라미스를 반환합니다.
// 배열 안 프라미스가 모두 처리되면 새로운 프라미스가 이행되는데, 배열 안 프라미스의 결괏값을 담은 배열이 새로운 프라미스의 result 가 됩니다.

Promise.all([
    new Promise(resolve => setTimeout(() => resolve(1), 1000)),
    new Promise(resolve => setTimeout(() => resolve(2), 2000)),
    new Promise(resolve => setTimeout(() => resolve(3), 3000)),
    new Promise(resolve => setTimeout(() => resolve(4), 1000)),
]).then(result => console.log(result));

// result 요소 순서는 Promise.all 에 전달되는 프라미스 순서와 상응합니다.

let urls = [
    'test/fetchTest',
    'test/fetchTest2',
    'test/fetchTest3',
    'test/fetchTest4',
];

let requests = urls.map(url => fetch(url));

Promise.all(requests)
.then(responses => Promise.all(responses.map(res => res.json())))
.then(dataList => console.log(dataList))
.catch(e => console.log(e));

// Promise.all 에 전달되는 프라미스 중 하나라도 거부되면, Promise.all 이 반환하는 프라미스는 에러와 함께 바로 거부됩니다.

Promise.all([
    new Promise((resolve, reject) => setTimeout(() => resolve(5), 1000)),
    new Promise((resolve, reject) => setTimeout(() => reject(new Error('error')), 3000)),
    new Promise((resolve, reject) => setTimeout(() => resolve(6), 2000)),
]).then(result => console.log(result))
.catch(e => console.log(e));

// Promise.allSettled

// Promise.all 은 프라미스가 하나라도 거절되면 전체를 거절합니다.
// Promise.allSettled 는 프라미스가 처리될 때까지 기다립니다. 반환되는 배열은 다음과 같은 요소를 갖습니다.
// 응답이 성공할 경우 - {status: 'fulfilled', value: result}
// 에러가 발생한 경우 - {status: 'rejected', reason:error}

let urls2 = [
    'test/fetchTest',
    'https://no-such-url',
    'test/fetchTest3',
];

Promise.allSettled(urls2.map(url => fetch(url)))
.then(responses => {
    responses.map(res => {
        if(res.status == 'rejected') {
            console.log(res.reason);
        }
    })
    return responses;
}).then(responses => Promise.allSettled(responses.filter(res => res.status == 'fulfilled').map(res => res.value).map(res => res.json())))
.then(dataList => console.log(dataList))
.catch(e => console.log(e));

// Promise.allSettled 를 사용하면 이처럼 각 프라미스의 상태와 값 또는 에러를 받을 수 있습니다.

// Promise.race

// Promise.race 는 Promise.all 과 비슷합니다.
// 다만 가강 먼저 처리되는 프라미스의 결과를 반환합니다.

Promise.race([
    new Promise((resolve, reject) => setTimeout(() => resolve('race1'), 10000)),
    new Promise((resolve, reject) => setTimeout(() => resolve('race2'), 5000)),
    new Promise((resolve, reject) => setTimeout(() => resolve('race3'), 1000)),
]).then(result => console.log(result));

// Promise.resolve , Promise,reject

// Promise.resolve , Promise,reject 는 async / await 문법이 생긴 후 쓸모 없어졌기 때문에 근래에는 거의 사용하지 않습니다.

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// 프라미스화

// 콜백을 받는 함수를 프라미스를 반환하는 함수로 바꾸는 것을 '프라미스화(promisification)' 라고 합니다.
// 기능을 구현 하다 보면 콜백보다는 프라미스가 더 편리하기 때문에 콜백 기반 함수와 라이브러리를 프라미스를 반환하는 함수로 바꾸는 게 좋은 경우가 종종 생길 겁니다.

function loadScript(src, callback) {
    let script = document.createElement('script');
    script.src = src;
    script.onload = () => callback(null, script);
    script.onerror = () => callback(new Error('error'));
    document.head.append(script);
}

// 사용법
// loadScript('/test/testScript1.js', (err, script) => {...});

// loadScript(src, callback) 을 이제 프라미스화 해봅시다.
// 새로운 함수 loadScriptPromise(src) 는 loadScript 와 동일하게 동작하지만 callback 을 제외한 src 만 인수로 받아야 하고, 프라미스를 반환해야 합니다.

let loadScriptPromise1 = function(src) {
    return new Promise((resolve, reject) => {
        loadScript(src, (err, script) => {
            if(err) reject(err);
            else resolve(script);
        })
    });
};

// 사용법
// loadScriptPromise1('/test/testScript1.js').then(...);

// 예시에서 볼 수 있듯이, loadScriptPromise 는 기존 함수 loadScript 에 모든 일을 위임합니다.
// loadScript 의 콜백은 스크립트 로딩 상태에 따라 이행 혹은 거부 상태의 프라미스를 반환합니다.

// 그런데 실무에선 함수 하나가 아닌 여러 개의 함수를 프라미스화 해야 할 겁니다.
// 헬퍼 함수를 만드는게 좋습니다.
// 프라미스화를 적용할 함수 f 를 받고 래퍼 함수를 반환하는 함수 promisfy(f) 를 만들어봅시다.

function promisfy1(f) {
    return function(...args) { // 래퍼 함수를 반환
        return new Promise((resolve, reject) => {
            function callback(err, result) { // f 에 사용할 커스텀 콜백
                if(err) {
                    reject(err);
                } else {
                    resolve(result);
                }
            }
            args.push(callback); // 위에서 만든 커스텀 콜백을 함수 f의 인수 끝에 추가
            f.call(this, ...args); // 기존 함수를 호출
        })
    }
}

let loadScriptPromise2 = promisfy1(loadScript);
// loadScriptPromise2('/test/testScript1.js').then(result => testScript1()).catch(e => console.log(e));

// 위 예시는 프라미스화 할 함수가 인수가 두개(err,result) 인 콜백을 받을 것이라 가정하고 작성되었습니다.
// 그런데 함수 f 가 두 개를 초과하는 인수를 가진 콜백, callback(err, result1, result2, ...) 을 받는다면 어떤 일이 발생할까요?
// 이런 경우를 대비하여 좀 더 진화한 함수, promisfy 를 만들어 봅시다.

function loadScript2(src, callback) {
    let script = document.createElement('script');
    script.src = src;
    script.onload = () => callback(null, [script], 'success');
    script.onerror = () => callback(new Error('error'));
    document.head.append(script);
}

function promisfy2(f) {
    return function(...args) {
        return new Promise((resolve, reject) => {
            function callback(err, ...results) {
                if(err) reject(err);
                else resolve([...results]);
            }
            args.push(callback);
            f.call(this, ...args);
        })
    }
}

let loadScriptPromise3 = promisfy2(loadScript2);
loadScriptPromise3('/test/testScript1.js').then(result => console.log('loadScriptPromise3', result)).catch(e => console.log(e));
let loadScriptPromise4 = promisfy2(loadScript);
loadScriptPromise4('/test/testScript1.js').then(result => console.log('loadScriptPromise4', result)).catch(e => console.log(e));

// 본 챕터에서 설명한 헬퍼 함수보다 더 유용한 형태의 프라미스화를 도와주는 함수를 제공하는 모듈도 많습니다.
// es6-promisfy 가 대표적인 예입니다. (https://github.com/mikehall314/es6-promisify)
// Node.js 에선 내장 함수 util.promisfy 를 사용해 프라미스화를 할 수 있습니다.

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// 마이크로태스크

// 프라미스 핸들로 .then / catch / finally 는 항상 비동기적으로 실행됩니다.
// 프라미스가 즉시 이행되더라도 .then / catch/ finally 아래에 있는 코드는 이 핸들러들이 실행되기 전에 실행됩니다.

// 마이크로태스크 큐

// 비동기 작업을 처리하려면 적절한 관리가 필요합니다.
// 이를 위해 ECMA 에선 PromiseJobs 라는 내부 큐를 명시합니다.
// V8 엔진에선 이를 '마이크로태스크 큐(microtask queue)' 라고 부르기 때문에 이 용어가 좀 더 선호됩니다.

// 명세서의 설명을 살펴봅시다.
// - 마이크로태스크 큐는 먼저 들어온 작업을 먼저 실행합니다. (FIFO)
// - 실행할 것이 아무것도 남아있지 않을 때만 마이크로태스크 큐에 있는 작업이 실행되기 시작합니다.

// 요약하자면, 어떤 프라미스가 준비되었을 때 이 프라미스의 .then / catch / finally 핸들러가 큐에 들어간다고 생각하시면 됩니다.
// 이때 핸들러들은 여전히 실행되지 않습니다.
// 현재 코드에서 자유로운 상태가 되었을 때에서야 자바스크립트 엔진은 큐에서 작업을 꺼내 실행합니다.

let promise = Promise.resolve();
promise.then(() => console.log('promise success'));

for(let i=0; i<=1000000; i++) {
    if(i == 1000000) console.log(i);
}

// 실행결과
// 1000000
// promise success

// 프라미스 핸들러는 항상 내부 큐를  통과하게 됩니다.
// 여러 개의 .then / catch / finally 를 사용해 만든 체인의 경우, 각 핸들러는 비동기적으로 실행됩니다.
// 큐에 들어간 핸들러 각각은 현재 코드가 완료되고, 큐에 적제된 이전 핸들러의 실행이 완료되었을 때 실행됩니다.

// 처리되지 못한 거부

// 이제 자바스크립트 엔진이 어떻게 처리되지 못한 거부(unhandledrejection)를 찾는지 정확히 알 수 있습니다.
// '처리되지 못한 거부' 는 마이크로태스크 큐 끝에서 프라미스 에러가 처리되지 못할 때 발생합니다.
// 정상적인 경우라는 에러가 발생할것을 대비하여 프라미스 체인에 .catch 를 추가해 에러를 처리합니다.
// .catch 를 추가해주는 걸 잊은 경우, 엔진은 마이크로태스크 큐가 빈 이후에 unhandledrejection 이벤트를 트리거 합니다.

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// async 와 await

// async 함수
// function 앞에 async 를 붙이면 해당 함수는 항상 프라미스를 반환합니다.
// 프라미스가 아닌 값을 반환하더라도 이행 상태의 프라미스(resolved promise)로 값을 감싸 이행된 프라미스가 반환되도록 합니다.

async function func1() {
    return 'func1';
}

function func2() {
    return 'func2';
}

console.log(func1()); // fulfilled promise
console.log(func2());

// 명시적으로 프라미스를 반환하는 것도 가능합니다. 결과는 동일합니다.

async function func3() {
    return new Promise((resolve, reject) => resolve('func3'));
}

console.log(func3());

// async 가 붙은 함수는 반드시 프라미스를 반환하고, 프라미스가 아닌 것은 프라미스로 감싸 반환합니다.
func3().then(result => console.log(result));

// await
// await 는 async 함수 안에서만 동작합니다.
// 자바스크립트는 await 키워드를 만나면 프라미스가 처리될 때까지 기다립니다. 결과는 그 이후 반환됩니다.

async function func4() {
    let promise = new Promise((resolve, reject) => {
        setTimeout(() => resolve('func4'), 3000);
    });

    let result = await promise; // 프라미스가 이행될 때까지 기다림
    console.log(result);
    console.log('func4 after??')
}

func4();

// await 는 말 그대로 프라미스가 처리될 때까지 함수 실행을 기다리게 만듭니다.
// 프라미스가 처리되면 그 결과와 함께 실행이 재개되죠.
// 프라미스가 처리되길 기다리는 동안엔 엔진이 다른 일(다른 스크립트 실행, 이벤트 처리 등)을 할 수 있기 때문에, CPU 리소스가 낭비되지 않습니다.

// await 는 promise.then 보다 좀 더 세력되게 프라미스의 result 값을 얻을 수 있도록 해주는 문법입니다.

async function func5() {
    let response = await fetch('/save/jsonData.json');
    let data = await response.json();
    return data;
}

func5();

// await 는 최상위 레벨 코드에서 작동하지 않습니다.
// 하지만 익명 async 함수로 코드를 감싸면 최상위 레벨 코드에도 await 를 사용할 수 있습니다.

(async () => {
    let response = await fetch('/save/jsonData.json');
    let data = await response.json();
    console.log(data);
})();

// 에러 핸들링

// 프라미스가 정상적으로 이행되면 await promise 는 프라미스 객체의 result 에 저장된 값을 반환합니다.
// 반면에 프라미스가 거부되면 마치 throw 문을 작성한 것처럼 에러가 던져집니다.
// await 가 던진 에러는 throw 가 던진 에러를 잡을 때처럼 try..catch 를 사용해 잡을 수 있습니다.

async function func6() {
    try {
        let response = await fetch('http://none');
    } catch(e) {
        console.log(e);
    }
}

func6();

// try..catch 가 없으면 async 함수를 호출해 만든 프라미스가 거부 상태가 됩니다.
// .catch 를 추가하면 거부된 프라미스를 처리할 수 있습니다.

async function func7() {
    try {
        let response = await fetch('http://none');
    } catch(e) {
        console.log(e);
    }
}

func7().catch(e => console.log(e));

// .catch 를 추가하는 걸 잊으면 처리되지 않은 프라미스 에러가 발생합니다.
// 이런 에러는 전역 이벤트 핸들러 unhandledrejection 을 사용해 잡을 수 있습니다.

// async/await 와 promise.then/catch
// async/await 을 사용하면 await 가 대기를 처리해주기 때문에 .then 이 거의 필요하지 않습니다.
// 여기에 더하여 .catch 대신 일반 try..catch 를 사용할 수 있다는 장점도 생깁니다.
// 그런데 문법 제약 때문에 async 함수 바깥의 최상위 레벨 코드에선 await 를 사용할 수 없습니다.
// 그렇기 때문에 관행처럼 .then/catch 를 추가해 최종 결과나 처리되지 못한 에러를 다룹니다.

// async / await 는 Promise.all 과도 함께 쓸 수 있습니다.

(async function() {
    let results = await Promise.all([
        (await fetch('/save/jsonData.json')).json(),
        new Promise((resolve,reject) => resolve('promise1')),
    ]);
    console.log('Promise.all', results);
})();

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------




</script>