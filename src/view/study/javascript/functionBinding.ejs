<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 함수 바인딩

// setTimeout 에 메서드를 전달할 때처럼, 객체 메서드를 콜백으로 전달할 때 this 정보가 사라지는 문제가 생깁니다.
// 이번 챕터에선 이 문제를 어떻게 해결할지에 대해 알아보겠습니다.

// 사라진 this
// 앞서 다양한 예제를 통해 this 정보가 사라지는 문제를 경험해보았습니다.
// 객체 메서드가 객체 내부가 아닌 다른 곳에 전달되어 호출되면 this 가 사라집니다.
// setTimeout 을 사용한 아래 예시에서 this 가 어떻게 사라지는지 살펴봅시다.

let obj1 = {
    name : 'inhui',
    func() {
        console.log(this.name);
    }
}

// obj1.func();
setTimeout(obj1.func, 1000);
// this.name 이 출력되지 않습니다.
// 이렇게 된 이유는 setTimeout 에 객체에서 분리된 함수인 obj1.func 이 전달되기 때문입니다.
// 위 예시의 마지막 줄은 다음 코드와 같습니다.

let f1 = obj1.func;
setTimeout(f1, 1000); // obj1 컨텍스트를 잃어버림

// 브라우저 환경에서 setTimeout 메서드는 조금 특별한 방식으로 동작합니다.
// 인수로 전달받은 함수를 호출할 때, this 에 window 를 할당합니다.
// 따라서 위 예시의 this.name 은 window.name 이 되는데, window 객체엔 name 이 없으므로 출력되지 않습니다.

// 객체 메서드를 실제 메서드가 호출되는 곳으로 전달하는 것은 아주 흔합니다.
// 이렇게 메서드를 전달할 때, 컨텍스트도 제대로 유지하려면 어떻게 해야 할까요?

// 방법1 : 래퍼

// 가장 간단한 해결책은 래퍼 함수를 사용하는 것입니다.
let obj2 = {
    name : 'inhui',
    func() {
        console.log(this.name);
    }
}

setTimeout(function() {
    obj2.func();
}, 1000);

// 위 예시가 의도한 대로 동작하는 이유는 외부 렉시컬 환경에서 obj2 를 받아서 보통 떄처럼 메서드를 호출했기 때문입니다.
// 아래와 같이 변경할 수도 있습니다.

setTimeout(() => obj2.func(), 2000);

// 이렇게 코드를 작성하면 간결해져서 보기는 좋지만, 약간의 취약성이 생깁니다.
// setTimeout 이 트리거 되기 전에 obj2 가 변경되면, 변경된 객체의 메서드를 호출하게 됩니다.

let obj3 = {
    name : 'inhui3',
    func() {
        console.log(this.name);
    }
}

setTimeout(() => obj3.func(), 1000);
obj3.func = () => {
    console.log('not exist');
}

// 두 번째 방법을 사용하면 이런 일이 발생하지 않습니다.


// 방법 2 : bind

// 모든 함수는 this 를 수정하게 해주는 내장 메서드 bind 를 제공합니다.
// 기본 문법은 다음과 같습니다.

// let bindFunc = func.bind(context);

// func.bind(context) 는 함수처럼 호출 가능한 '특수 객체'를 반환합니다.
// 이 객체를 호출하면 this 가 context 로 고정된 함수 func 가 반환됩니다.
// 따라서 bindFunc 를 호출하면 this 가 고정된 func 를 호출하는 것과 동일한 효과를 봅니다.

let obj4 = {
    name : 'inhui4',
}

function func4() {
    console.log(this.name);
}

let bindFunc1 = func4.bind(obj4);
bindFunc1();

// 여기서 func4.bind(obj4) 는 func 의 this 를 obj 로 바인딩한 변형 이라고 생각하시면 됩니다.
// 인수는 원본 함수 func 에 그대로 전달됩니다.

let obj5 = {
    name : 'inhui5',
}

function func5(phrase) {
    console.log(phrase + ' ' + this.name);
}

let bindFunc2 = func5.bind(obj5);
bindFunc2('Hello');

// 이제 객체 메서드에 bind 를 적용해 봅시다.

let obj6 = {
    name : 'inhui6',
    func(phrase) {
        if(phrase) {
            console.log(phrase + ' ' + this.name);
        } else {
            console.log(this.name);
        }
    }
}

let func6 = obj6.func.bind(obj6);

// func6();
setTimeout(func6, 2000);
obj6.func = () => {
    console.log('obj6 not exist');
}

func6('Hello');

// 인수는 그대로 전달되고 bind 에 의해 this 만 고정된 것을 확인할 수 있습니다.


// bindAll 로 메서드 전체 바인딩하기

// 객체에 복수의 메서드가 있고 이 메서드 전체를 전달하려 할 땐, 반복문을 사용해 메서드를 바인딩할 수 있습니다.

// for(let key in obj) {
//     if(typeof obj[key] == 'function') {
//         obj[key] = obj[key].bind(obj);
//     }
// }

// 자바스크립트 라이브러리를 사용해도 대규모 바인딩을 할 수 있습니다.
// lodash 라이브러리의 _.bindAll(object, methodnames) 이 그 예입니다.


// 부분 적용

// 지금까진 this 바인딩에 대해서만 이야기해보았습니다.
// 한 단계 더 나아가 봅시다.
// this 뿐만 아니라 인수도 바인딩이 가능합니다.
// bind 의 전체 문법은 다음과 같습니다.

// let bound = func.bind(context, [arg1], [arg2], ...);

// bind 는 컨텍스트를 this 로 고정하는 것 뿐만 아니라 함수의 인수도 고정해줍니다.
// 곱셈을 해주는 함수를 예시로 들어보겠습니다.

function func7(a,b) {
    return a*b;
}

let bindFunc7 = func7.bind(null,2);
console.log(bindFunc7(3));
console.log(bindFunc7(4));

// bindFunc7 엔 컨텍스트가 null, 첫 번째 인수는 2가 됩니다. 추가 인수는 그대로 전달됩니다.

// 그런데 부분 함수는 왜 만드는 걸까요?
// 가독성이 좋은 이름(double, tripple) 을 가진 독립 함수를 만들 수 있다는 이점 때문입니다.
// 게다가 bind 를 사용해 첫 번째 인수를 고정할 수 있기 때문에 매번 인수를 전달할 필요도 없어지죠.

// 이 외에도 부분 적용은 매우 포괄적인 함수를 기반으로 덜 포괄적인 변형 함수를 만들수 있다는 점에서 유용합니다.
// 함수 send(from, to, text) 가 있다고 가정해 봅시다.
// 객체 user 안에서 부분 적용을 활용한다면, 전송 주체가 현재 사용자인 send(to, text) 를 구현할 수 있습니다.


// 요약

// func.bind(context, ...args) 는 this 가 context 로 고정되고 인수도 고정된 함수 func 를 반환합니다.
// bind 는 보통 객체 메서드의 this 를 고정해 어딘가에 넘기고자 할 때 사용합니다. setTimeout 에 넘길 때 같이 말이죠.


</script>