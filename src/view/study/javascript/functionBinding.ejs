<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 함수 바인딩

// setTimeout 에 메서드를 전달할 때처럼, 객체 메서드를 콜백으로 전달할 때 this 정보가 사라지는 문제가 생깁니다.
// 이번 챕터에선 이 문제를 어떻게 해결할지에 대해 알아보겠습니다.

// 사라진 'this'

// 앞서 다양한 예제를 통해 this 정보가 사라지는 문제를 경험해보았습니다.
// 객체 메서드가 객체 내부가 아닌 다른곳에 전달되어 호출되면 this 가 사라집니다.

// setTimeout 을 사용한 아래 예시에서 this가 어떻게 사라지는지 살펴봅시다.

let func1 = {
    name: 'inhui',
    method1() {
        console.log('func1', this.name);
    }
}

setTimeout(func1.method1, 1000);

// this.name 이 'inhui' 가 되어야 하는데 undefined 가 출렵됩니다.
// 이렇게 된 이유는 setTimeout 에 객체에서 분리된 함수인 func1.method1 가 전달되기 때문입니다.



</script>