<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 프라미스 API

// Promise 클래스에는 5가지 정적 메서드가 있습니다.

// Promise.all
// Promise.all 은 요소 전체가 프라미스인 배열(엄밀히 따지면 이터러블 객체이지만, 대개는 배열임)을 받고 새로운 프라미스를 반환합니다.
// 배열 안 프라미스가 모두 처리되면 새로운 프라미스가 이행되는데, 배열 안 프라미스의 결괏값을 담은 배열이 새로운 프라미스의 result 가 됩니다.

Promise.all([
    new Promise(resolve => setTimeout(() => resolve(1), 1000)),
    new Promise(resolve => setTimeout(() => resolve(2), 2000)),
    new Promise(resolve => setTimeout(() => resolve(3), 3000)),
    new Promise(resolve => setTimeout(() => resolve(4), 1000)),
]).then(result => console.log(result));

// result 요소 순서는 Promise.all 에 전달되는 프라미스 순서와 상응합니다.

let urls = [
    'test/fetchTest',
    'test/fetchTest2',
    'test/fetchTest3',
    'test/fetchTest4',
];

let requests = urls.map(url => fetch(url));

Promise.all(requests)
.then(responses => Promise.all(responses.map(res => res.json())))
.then(dataList => console.log(dataList))
.catch(e => console.log(e));

// Promise.all 에 전달되는 프라미스 중 하나라도 거부되면, Promise.all 이 반환하는 프라미스는 에러와 함께 바로 거부됩니다.

Promise.all([
    new Promise((resolve, reject) => setTimeout(() => resolve(5), 1000)),
    new Promise((resolve, reject) => setTimeout(() => reject(new Error('error')), 3000)),
    new Promise((resolve, reject) => setTimeout(() => resolve(6), 2000)),
]).then(result => console.log(result))
.catch(e => console.log(e));

// Promise.allSettled

// Promise.all 은 프라미스가 하나라도 거절되면 전체를 거절합니다.
// Promise.allSettled 는 프라미스가 처리될 때까지 기다립니다. 반환되는 배열은 다음과 같은 요소를 갖습니다.
// 응답이 성공할 경우 - {status: 'fulfilled', value: result}
// 에러가 발생한 경우 - {status: 'rejected', reason:error}

let urls2 = [
    'test/fetchTest',
    'https://no-such-url',
    'test/fetchTest3',
];

Promise.allSettled(urls2.map(url => fetch(url)))
.then(responses => {
    responses.map(res => {
        if(res.status == 'rejected') {
            console.log(res.reason);
        }
    })
    return responses;
}).then(responses => Promise.allSettled(responses.filter(res => res.status == 'fulfilled').map(res => res.value).map(res => res.json())))
.then(dataList => console.log(dataList))
.catch(e => console.log(e));

// Promise.allSettled 를 사용하면 이처럼 각 프라미스의 상태와 값 또는 에러를 받을 수 있습니다.

// Promise.race

// Promise.race 는 Promise.all 과 비슷합니다.
// 다만 가강 먼저 처리되는 프라미스의 결과를 반환합니다.

Promise.race([
    new Promise((resolve, reject) => setTimeout(() => resolve('race1'), 10000)),
    new Promise((resolve, reject) => setTimeout(() => resolve('race2'), 5000)),
    new Promise((resolve, reject) => setTimeout(() => resolve('race3'), 1000)),
]).then(result => console.log(result));

// Promise.resolve , Promise,reject

// Promise.resolve , Promise,reject 는 async / await 문법이 생긴 후 쓸모 없어졌기 때문에 근래에는 거의 사용하지 않습니다.




</script>