<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 위크맵과 위크셋

// 가비지 컬렉션에서 배웠듯이 자바스크립트 엔진은 도달 가능한 값을 메모리에 유지합니다.

// 자료구조를 구성하는 요소도 자신이 속한 자료구조가 메모리에 남아있는 동안 대개 도달 가능한 값으로 취급되어 메모리에서 삭제되지 않습니다.
// 객체의 프로퍼티나 배열의 요소, 맵이나 셋을 구성하는 요소들이 이에 해당합니다.

// 예를 들어봅시다.
// 배열에 객체 하나를 추가해 보겠습니다.
// 이떄 배열이 메모리에 남아있는 한, 배열의 요소인 이 객체도 메모리에 남아있게 됩니다.
// 이 객체를 참조하는 것이 아무것도 없더라도 말이죠.

let obj1 = {name: 'inhui'};
let array1 = [obj1];

obj1 = null; // 참조를 null 로 덮어씀

// obj1을 나타내는 객체는 배열의 요소이기 때문에 가비지 컬렉터의 대상이 되지 않습니다.

console.log(array1);
console.log(obj1);

// 맵에서 객체를 키로 사용한 경우 역시, 맵이 메모리에 있는 한 객체도 메모리에 남습니다.
// 가비지 컬렉터의 대상이 되지 않죠.

let obj2 = {name: 'inhui'};
let map1 = new Map();
map1.set(obj2, '123');

obj2 = null;

console.log(map1.entries());

// 이런 관점에서 위크맵(WeekMap) 은 일반 맵과 전혀 다른 양상을 보입니다.
// 위크맵을 사용하면 키로 쓰인 객체가 가비지 컬렉션의 대상이 됩니다.


// 위크맵

// 맵과 위크맵의 첫 번째 차이는 위크맵의 키가 반드시 객체여야 한다는 점입니다.
// 원시값은 위크맵의 키가 될 수 없습니다.

let weakMap1 = new WeakMap();
let obj3 = {};
weakMap1.set(obj3, '123');
try {
    weakMap1.set('test','1234');
} catch(e) {
    console.log(e);
}

console.log(weakMap1);

console.log(weakMap1.get(obj3));
obj3 = null; // 참조를 덮어씀
console.log(weakMap1.get(obj3)); // undefined

// obj 를 나타내는 객체는 오로지 위크맵의 키로만 사용되고 있으므로, 참조를 덮어쓰게 되면 이 객체는 위크맵과 메모리에서 자동으로 삭제됩니다.
// 맵과 위크맵의 두 번째 차이는 위크맵은 반복 작업과 keys(), values(), entries() 메서드를 지원하지 않는다는 점입니다.
// 따라서 위크맵에선 키나 값 전체를 얻는 게 불가능합니다.

// 위크맵에 제공되는 메서드 확인 가능
console.log('Object.getPrototypeOf(new WeakMap())', Object.getPrototypeOf(new WeakMap()));

// 위크맵이 지원하는 메서드는 단출합니다.

// weakMap.get(key)
// weakMap.set(key, value)
// weakMap.delete(key)
// weakMap.has(key)

// 왜 이렇게 적은 메서드만 제공할까요?
// 원인은 가비지 컬렉션의 동작 방식 때문입니다.
// 위 예시의 obj 를 나타내는 객체처럼, 객체는 모든 참조를 잃게 되면 자동으로 가비지 컬렉션의 대상이 됩니다.
// 그런데 가비지 컬렉션의 동작 시점은 정확히 알 수 없습니다.

// 가비지 컬렉션이 일어나는 시점은 자바스크립트 엔진이 결정합니다.
// 객체는 모든 참조를 잃었을 때, 그 즉시 메모리에서 삭제될 수도 있고, 다른 삭제 작업이 있 을 떄까지 대기하다가 함께 삭제될 수도 있습니다.
// 현재 위크맵에 요소가 몆 개 있는지 정확히 파악하는 것 자체가 불가능한 것이죠.
// 가비지 컬렉터가 한 번에 메모리를 청소할 수도 있고, 부분 부분 메모리를 청소할 수도 있으므로 위크맵의 요소 전체를 대상으로 무언가를 하는 메서드는 동작 자체가 불가능합니다.

// 그럼 위크맵을 어떤 경우에 사용할 수 있을까요?



// 유스 케이스: 추가 데이터

// 위크맵은 부차적인 데이터를 저장할 곳이 필요할 때 그 진가를 발휘합니다.

// 서드파티 라이브러리와 같은 외부 코드에 '속한' 객체를 가지고 작업을 해야 한다고 가정해 봅시다.
// 이 객체에 데이터를 추가해줘야 하는데, 추가해 줄 데이터는 객체가 살아있는 동안에만 유효한 상황입니다.
// 이럴 때 위크맵을 사용할 수 있습니다.

// 위크맵에 원하는 데이터를 저장하고, 이때 키는 객체를 사용하면 됩니다.
// 이렇게 하면 객체가 가비지 컬렉션의 대상이 될 때, 데이터도 함께 사라지게 됩니다.

// weakMap.set(john, '비밀문서');
// john 이 사망하면, 비밀문서는 자동으로 파기됩니다.

// 좀 더 구체적인 예시를 들어보겠습니다.

// 아래에 사용자의 방문 횟수를 세어 주는 코드가 있습니다.
// 관련 정보는 맵에 저장하고 있는데 맵 요소의 키엔 특정 사용자를 나타내는 객체를, 값엔 해당 사용자의 방문 횟수를 저장하고 있습니다.
// 어떤 사용자의 정보를 저장할 필요가 없어지면(가비지 컬렉션의 대상이 되면) 해당 사용자의 방문 횟수도 저장할 필요가 없어질 겁니다.

let visitscountMap1 = new Map();

function countUser1(user) {
    let count = visitscountMap1.get(user) || 0;
    visitscountMap1.set(user, count + 1);
}

let user1 = {name: 'inhui'};

countUser1(user1);
countUser1(user1);
countUser1(user1);

console.log(visitscountMap1);

user1 = null;

console.log(visitscountMap1);

// 이제 user1 을 나타내는 객체는 가비지 컬렉션의 대상이 되어야 하는데 visitscountMap 의 키로 사용되고 있어서 메모리에서 삭제되지 않습니다.

// 특정 사용자를 나타내는 객체가 메모리에서 사라지면 해당 객체에 대한 정보도 우리가 손수 지워줘야 하는 상황입니다.
// 이렇게 하지 않으면 visitscountMap 가 차지하는 메모리 공간이 한없이 커질 겁니다.
// 애플리케이션 구조가 복잡할 땐, 이렇게 쓸모 없는 데이터를 수동으로 비워주는 게 꽤 골치 아픕니다.

// 이런 문제는 위크맵을 사용해 예방할 수 있습니다.

let visitscountMap2 = new WeakMap();

let user2 = {name: 'john'};
let user3 = {name: 'efmk'};

function countUser2(user) {
    let count = visitscountMap2.get(user) || 0;
    visitscountMap2.set(user, count + 1);
}

countUser2(user2);
countUser2(user2);
countUser2(user2);

countUser2(user3);
countUser2(user3);

user2 = null;
console.log(visitscountMap2);

// 위크맵을 사용해 사용자 방문 횟수를 저장하면 visitscountMap 을 수동으로 청소해줄 필요가 없습니다.
// obj 를 나타내는 객체가 도달 가능하지 않은 상태가 되면 자동으로 메모리에서 삭제되기 때문입니다.
// 위크맵의 키에 대응하는 값도 자동으로 가비지 컬렉션의 대상이 됩니다.


// 유스 케이스: 캐싱

// 위크맵은 캐싱(caching) 이 필요할 때 유용합니다.
// 캐싱은 시간이 오래 걸리는 작업의 결과를 저장해서 연산 시간과 비용을 절약해주는 기법입니다.
// 동일한 함수를 여러 번 호출해야 할 떄, 최초 호출 시 반환되ㅏㄴ 값을 어딘가에 저장해 놓았다가 그 다음엔 함수를 호출하는 대신 저장된 값을 사용하는 게 캐싱의 실례입니다.

// 아래 예시는 함수 연산 결과를 맵에 저장하고 있습니다.

let cache1 = new Map();

function process(obj) {
    if(!cache1.has(obj)) {
        let result = obj();
        cache1.set(obj, result);
    }
    return cache1.get(obj)
}

let obj4 = function() {
    return 'testtest';
};

let result1 = process(obj4);
console.log(result1);
let result2 = process(obj4);
console.log(result2);

obj4 = null;

console.log(cache1.size);

// process(obj) 를 여러 번 호출하면 최초 호출할 때만 연산이 수행되고, 그 이후엔 연산 결과를 cache 에서 가져옵니다.
// 그런데 맵을 사용하고 있어서 객체가 필요 없어져도 cache 를 수동으로 청소해 줘야 합니다.

// 맵을 위크맵으로 교체하면 이런 문제를 예방할 수 있습니다.
// 객체가 메모리에서 삭제되면, 캐시에 저장된 결과 역시 메모리에서 자동으로 삭제되기 때문입니다.

let cache2 = new WeakMap();

function process2(obj) {
    if(!cache2.has(obj)) {
        let result = obj();
        cache2.set(obj, result);
    }
    return cache2.get(obj)
}

let obj5 = function() {
    return 'testtest';
};

let result3 = process2(obj5);
console.log(result3);
let result4 = process2(obj5);
console.log(result4);

obj5 = null;
console.log(cache2);
console.log(cache2.size); // WeakMap 에서는 size 를 사용할 수 없습니다.


// 위크셋

// 이제 위크셋(WeakSet) 에 대해 알아봅시다.

// 위크셋은 셋과 유사한데, 객체만 저장할 수 있다는 점이 다릅니다. 원시값은 저장할 수 없습니다.
// 셋 안의 객체는 도달 가능할 때만 메모리에 유지됩니다.
// 셋과 마찬가지로 위크셋이 지원하는 메서드는 단출합니다. add, has, delete 를 사용할 수 있고 size, keys() 나 반복 작업 관련 메서드는 사용할 수 없습니다.

// 위크맵과 유사하게 위크셋도 부차적인 데이터를 저장할 때 사용할 수 있습니다.
// 다만, 위크셋엔 위크맵처럼 복잡한 데이터를 저장하지 않습니다.
// 대신 "예" , "아니오" 같은 간단한 답변을 얻는 용도로 사용됩니다.
// 물론 위크셋에 저장되는 값들은 객체이겠죠.

// 예시와 함께 위크셋의 용도를 알아봅시다. 아래 코드에선 사용자의 사이트 방문 여부를 추적하는 용도로 위크셋을 사용하고 있습니다.

let visitedSet = new WeakSet();

let obj6 = {name: 'John'};
let obj7 = {name: 'Inhui'};
let obj8 = {name: 'Son'};

visitedSet.add(obj6);
visitedSet.add(obj7);
visitedSet.add(obj6);

// 객체의 방문 여부를 확인
console.log('visitedSet.has(obj6)', visitedSet.has(obj6));
console.log('visitedSet.has(obj8)', visitedSet.has(obj8));

obj6 = null;
console.log('visitedSet.has(obj6)', visitedSet.has(obj6));

// 위크맵과 위크셋의 가장 큰 단점은 반복 작업이 불가능하다는 점입니다.
// 위크맵이나 위크셋에 저장된 자료를 한번에 얻는 게 불가능하죠.
// 이런 단점은 불편함을 초래하는 것 같아 보이지만, 위크맵과 위크셋을 이용해 할 수 있는 주요 작업을 방해하진 않습니다.
// 위크맵과 위크셋은 객체와 함께 추가 데이터를 저장하는 용도로 쓸 수 있습니다.

// 요약

// 위크맵은 맵과 유사한 컬렉션입니다.
// 위크맵을 구성하는 요소의 키는 오직 객체만 가능합니다.
// 키로 사용된 객체가 메모리에서 삭제되면 이에 대응하는 값 역시 삭제됩니다.

// 위크셋은 셋과 유사한 컬렉션입니다.
// 위크셋엔 객체만 저장할 수 있습니다.
// 위크셋에 저장된 객체가 도달 불가능한 상태가 되면 해당 객체는 메모리에서 삭제됩니다.

// 두 자료구조 모두 구성 요소 전체를 대상으로 하는 메서드를 지원하지 않습니다.
// 구성 요소 하나를 대상으로 하는 메서드만 지원합니다.

// 객체엔 '주요' 자료를, 위크맵 과 위크셋엔 '부수적인' 자료를 저장하는 형태로 위크맵과 위크셋을 활용할 수 있습니다.
// 객체가 메모리에서 삭제되면(그리고 오로지 위크맵과 위크셋의 키만 해당 객체를 참조하고 있다면) 위크맵이나 위크셋에 저장된 연관 자료들 역시 메모리에서 자동으로 삭제됩니다.

</script>