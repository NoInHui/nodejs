<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 내장 클래스 확장하기

// 배열, 맵 같은 내장 클래스도 확장 가능합니다.
// 아래 예시에서 PowerArray 는 기본 Array 를 상속받아 만들었습니다.

class PowerArray1 extends Array {
    isEmpty() {
        return this.length === 0;
    }
}

let arr1 = new PowerArray1(1,2,3,4,5);
console.log(arr1.isEmpty());
console.log(arr1.filter(v => v < 3));

// 이 객체를 구현할 땐 내부에서 객체의 constructor 프로퍼티를 사용합니다.
// 따라서 아래와 같은 관계를 갖습니다.
console.log(arr1.constructor === PowerArray1);

// arr1.filter() 가 호출될 때, 내부에선 기본 Array 가 아닌 arr.constructor 를 기반으로 새로운 배열이 만들어지고 여기에 필터 후 결과가 담깁니다.
// 이렇게 되면 PowerArray 에 구현된 메서드를 사용할 수 있다는 장점이 생깁니다.

// 물론 동작 방식을 변경할 수 있습니다.

// 특수 정적 getter 인 Symbol.species 를 클래스에 추가할 수 있는데, Symbol.species 가 있으면 map, filter 등의 메서드를 호출할 때 만들어지는 개체의 생성자를 지정할 수 있습니다.
// 원하는 생성자를 반환하기만 하면 되죠.

// map 이나 filter 같은 내장 메서드가 일반 배열을 반환하도록 하려면 아래 예시처럼 Symbol.species 가 Array 를 반환하도록 해주면 됩니다.

class PowerArray2 extends Array {
    isEmpty() {
        return this.length === 0;
    }

    static get [Symbol.species]() {
        return Array;
    }
}

let arr2 = new PowerArray2(1,2,3,4);

</script>