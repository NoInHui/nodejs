<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 마이크로태스크

// 프라미스 핸들러 .then / catch / finally 는 항상 비동기적으로 실행됩니다.
// 프라미스가 즉시 이행되더라도 .then / catch / finally 아래에 있는 코드는 이 핸들러들이 실행되기 전에 실행됩니다.

let promise = new Promise((resolve, reject) => {
    resolve('promise success');
});
promise.then(result => console.log(result));
for(let i = 0; i<1000; i++) {
    console.log('after1');
}

// 실행결과
// after * 1000
// promise success

// 마이크로태스크 큐

// 비동기 작업을 처리하려면 적절한 관리가 필요합니다.
// 이를 위해 ECMA 에선 PromiseJobs 라는 내부 큐(internal queue) 를 명시합니다.
// V8 엔진에선 이를 '마이크로태스크 큐(microtask queue)' 라고 부르기 때문에 이 용어가 좀 더 선호됩니다.

// 명세서의 설명을 살펴봅시다.

// 마이크로태스크 큐는 먼저 들어온 작업을 먼저 실행합니다. (FIFO, first in first out)
// 실행할 것이 아무것도 남아있지 않을 때만 마이크로태스크 큐에 있는 작업이 실행되기 시작합니다.

// 요약하자면, 어떤 프라미스가 준비되었을 때 이 프라미스의 .then/catch/finally 핸들러가 큐에 들어간다고 생각하시면 됩니다.
// 이때 핸들러들은 여전히 실행되지 않습니다.
// 현재 코드에서 자유로운 상태가 되었을 때에서야 자바스크립트 엔진은 큐에서 작업을 꺼내 실행합니다.

// 프라미스 핸들러는 항상 내부 큐를 통과하게 됩니다.

// 여러 개의 .then / catch / finally 를 사용해 만든 체인의 경우, 각 핸들러는 비동기적으로 실행됩니다.
// 큐에 들어간 핸들러 각각은 현재 코드가 완료되고, 큐에 적제된 이전 핸들러의 실행이 완료되었을 떄 실행됩니다.


// 처리되지 못한 거부

// 프라미스와 에러 핸들링에서 학습한 unhandledrejection 이벤트를 기억하고 계시나요?
// 이제 자바스크립트 엔진이 어떻게 처리되지 못한 거부(unhandled rejection)를 찾는지 정확히 알 수 있습니다.

// 처리되지 못한 거부는 마이크로태스크 큐 끝에서 프라미스 에러가 처리되지 못할 때 발생합니다.

// 정상적인 경우라면 개발자는 에러가 생길 것을 대비하여 프라미스 체인에 .catch 를 추가해 에러를  처리합니다.
// 그런데 .catch 를 추가해주는 걸 잊은 경우, 엔진은 마이크로태스크 큐가 빈 이후에 unhandledrejection 이벤트를 트리거 합니다.

let promise2 = new Promise((resolve, reject) => reject(new Error('error')));
// promise2.catch(e => console.log(e));

window.addEventListener('unhandledrejection', e => console.log('unhandledrejection', e));

// 그런데 만약 아래와 같이 setTimeout 을 이용해 에러를 나중에 처리하면 어떤 일이 생길까요?

let promise3 = Promise.reject(new Error('error'));
setTimeout(() => promise3.catch(e => console.log('catch error', e)), 1000);

// 마이크로태스크 큐에 대해 몰랐다면 '에러를 잡았는데도 왜 unhandledrejection 핸들러가 실행되는 거지?' 라는 의문을 가졌을 겁니다.

// unhandledrejection 은 마이크로태스크 큐에 있는 작업 모두가 완료되었을 때 생성됩니다.
// 엔진은 프라미스들을 검사하고 이 중 하나라도 거부(rejected) 상태이면 unhandledrejection 핸들러를 트리거 하죠.

// 위 예시를 실행하면 setTimeout 을 사용해 추가한 .catch 역시 트리거 됩니다.
// 다만 .catch 는 unhandledrejection 이 발생한 이후에 트리거 됩니다.


// 요약

// 모든 프라미스 동작은 '마이크로태스크 큐' 라 불리는 내부 '프라미스 잡' 큐에 들어가서 처리되기 때문에 프라미스 핸들링은 항상 비동기로 처리됩니다.
// 따라서 .then / catch / finally 핸들러는 항상 현재 코드가 종료되고 난 후에 호출됩니다.

// 어떤 코드 조각을 .then / catch / finally 가 호출된 이후에 실행하고 싶다면 .then 을 체인에 추가하고 이 안에 코드 조각을 넣으면 됩니다.

</script>