// Ctrl + Alt + N : 실행
const log = console.log;

// 전역변수의 문제점
// 전역 변수를 선언한 의도는 전역, 즉 코드 어디서든 참조하고 할당할 수 있는 변수를 사용하겠다는 것이다.
// 이는 모든 코드가 전역 변수를 참조하고 변경할 수 있는 암묵적 결합을 허용하는 것이다.
// 변수의 유효범위가 크면 클수록 가독성은 나빠지고 의도치 않게 상태가 변경될 수 있는 위험성도 높아진다.

// 긴 생명 주기
// 전역 변수는 생명 주기가 길다.
// 따라서 메모리 리소스도 오랜 기간 소비한다.
// 또한 전역 변수의 상태를 변경할 수 있는 시간도 길고 기회도 많다.
// 더욱이 var 키워드는 변수의 중복 선언을 허용하므로 생명 주기가 긴 전역 변수는 변수 이름이 중복될 가능성이 있다.
// 변수 이름이 중복되면 의도치 않은 재할당이 이뤄진다.

// 스코프 체인 상에서 종점에 존재
// 전역 변수는 스코프 체인 상에서 종점에 존재한다.
// 이는 변수를 검색할 때 전역 변수가 가장 마지막에 검색된다는 것을 말한다.
// 즉 전역 변수의 검색 속도가 가장 느리다.
// 검색 속도의 차이는 그다지 크지 않지만 속도의 차이는 분명히 있다.

// 네임 스페이스 오염
// 자바스크립트의 가장 큰 문제점 중 ㅎ아나는 파일이 분리되어 있다 해도 하나의 전역 스코프를 공유한다는 것이다.
// 따라서 다른 파일 내에서 동일한 이름으로 명명된 전역 변수나 전역 함수가 같은 스코프 내에 존재할 경우 예상치 못한 결과를 가져올 수 있다.

// 전역 변수의 사용을 억제하는 방법
// 전역변수를 반드시 사용해야 할 이유를 찾지 못한다면 지역 변수를 사용해야 한다.
// 변수의 스코프는 좁을수록 좋다.

// 즉시 실행 함수
// 함수 정의와 동시에 호출되는 즉시 실행 함수는 단 한 번만 호출된다.
// 모든 코드를 즉시 실행 함수로 감싸면 모든 변수는 즉시 실행 함수의 지역 변수가 된다.

// (function() {
//     const foo = 10;
//     log(foo);
// }());

// log(foo)

// 네임스페이스 객체
// 전역에 네임스페이스 역할을 담당할 객체를 생성하고 전역 변수처럼 사용하고 싶은 변수를 프로퍼티로 추가하는 방법이다.

// const MYAPP = {};
// MYAPP.name = 'noh';

// log(MYAPP.name)

// 모듈 패턴
// 모듈 패턴은 클래스를 모방해서 관련이 있는 변수와 함수를 모아 즉시 실행 함수로 감싸 하나의 모듈을 만든다.
// 모듈 패턴은 자바스크립트의 강력한 기능인 클로저를 기반으로 동작한다.
// 모듈 패턴의 특징은 전역 변수의 억제는 물론 캡슐화까지 구현할 수 있다.

// const Counter = (function() {
//     let num = 0;

//     return {
//         increase() {
//             return ++num;
//         },
//         decrease() {
//             return --num;
//         }
//     }
// }());

// log(Counter.num);
// Counter.increase();
// log(Counter.increase());
// log(Counter.increase());
// log(Counter.increase());
// log(Counter.decrease());
// log(Counter.decrease());
// log(Counter.decrease());
// log(Counter.decrease());
// log(Counter.decrease());

// ES6 모듈

// ES6 모듈을 사용하면 더는 전역 변수를 사용할 수 없다.
// ES6 모듈은 파일 자체의 독자적인 모듈 스코프를 제공한다.
// 따라서 모듈 내에서 var 키워드로 선언한 변수는 더는 전역 변수가 아니며 window 객체의 프로퍼티도 아니다.
// 모든 브라우저에서는 ES6 모듈을 사용할 수 있다.
// script 태그에 type="module" 어트리뷰트를 추가하면 로드된 자바스크립트 파일은 모듈로서 동작한다.
// 모듈의 파일 확장자는 mjs 를 권장한다.

// ES6 모듈은 IE 를 포함한 구형 브라우저에서는 동작하지 않으며, 브라우저의 ES6 모듈 기능을 사용하더라도 트랜스파일링이나 번들링이 필요하기 땜누에 아직까지는 브라우저가 지원하는 ES6 모듈 기능보다는 Webpack 등의 모듈 번들러를 사용하는 것이 일반적이다.