// Ctrl + Alt + N : 실행

const log = console.log;


// ------------------------------------------------------------------------------------

// 재미,실시간성 -> 라이브 방송, 실시간 댓글, 협업, 메신저
// 독창성, 완성도 -> 애니메이션, 무한 스크롤, 벽돌
// 더 많아져야하는 동시성 -> 비동기 I/O , CSP, Actor, STM ...
// 더 빨라야하는 반응성 / 고가용성 -> ELB,. Auto Scaling, OTP Supervisor...
// 대용량,정확성,병렬성 -> MapReduce, Clojure, Reducers ...
// 복잡도,MSA ... -> 많아지고 세밀해지는 도구들

// 그렇지만 타협할 수 없는 생산성


// 스멀스멀 다가오는 Function Programing
// 좋아지는 하드웨어 성능
// 좋아지는 컴파일러
// 함수형 프로그래밍 기술
// 좋아지는 분산 / 리액티브 환경
// 동시성 + 병렬성 관련 기술
// 성공적인 적용 사례와 영향

// 함수형 프로그래밍은 애플리케이션, 함수의 구성요소, 더나아가서 언어 자체를 함수처럼 여기도록 만들고
// 이러한 함수 내념을 가장 우선순위에 놓는다.

// 함수형 사고방식은 문제의 해결 방법을 동사(함수)들로 구성(조합) 하는 것

// 데이터(객체 기순)
duck.moverLeft();
duck.moveRight();

// 객체지향은 데이터를 먼저 다자인하고 객체에 맞는 메서드를 만듬

// 함수 기준
moveLeft(duck);
moveRight(duck);

// 함수를 만들고 그 함수에 맞게 디자인 세트를 구성하는 프로그래밍

