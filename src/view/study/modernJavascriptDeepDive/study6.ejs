<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
    <style>
        .active {color: red;}

        .container {
            width: 300px;
            height: 300px;
            background-color: rebeccapurple;
            overflow: scroll;
        }

        .content {
            width: 300px;
            height: 1000vh;
        }
    </style>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div>
                <button id="clickButton">click me</button>
                <pre> 일반 클릭 이벤트 카운터 <span class="normal-msg">0</span></pre>
                <pre> 디바운스 클릭 이벤트 카운터 <span class="debounce-msg">0</span></pre>
                <pre> 스로틀 클릭 이벤트 카운터 <span class="throttle-msg">0</span></pre>
            </div>
            <div>
                <textarea id="textarea"></textarea>
                <div class="msg"></div>
            </div>
            <div class="container">
                <div class="content"></div>
            </div>
            <div>
                일반 이벤트 핸들러가 scroll 이벤트를 처리한 횟수 : <span class="normal-count"></span>
            </div>
            <div>
                스로틀 이벤트 핸들러가 scroll 이벤트를 처리한 횟수 : <span class="throttle-count"></span>
            </div>
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="button1" class="editor-button">button</button>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>
    
<script>
    // 자바스크립트 엔진은 단 하나의 실행 컨텍스트를 갖기 때문에 두 가지 이상의 테스크를 동시에 실행할 수 없다.
    // 자바스크립트 엔진은 싱글 스레드로 동작한다.
    // 이런 이유로 타이머 함수 setTimeout 과 setInterval 은 비동기 처리 방식으로 동작한다.

    // const timerId = setTimeout((name, phrase) => console.log(`${name} ${phrase}`), 2000, 'inhui', 'hello');
    // clearInterval(timerId);

    // let count = 0;
    // const timerId2 = setInterval((a,b) => {
    //     if(count++ > 1) clearInterval(timerId2);
    //     else console.log(`${a} ${b}`);
    // }, 1000, 'inhui', 'hello');

    // 디바운스와 스로틀

    // scroll, resize, input, mousemove 같은 이벤트는 짧은 시간 간격으로 연속해서 발생한다.
    // 이러한 이벤트에 바인딩한 이벤트 핸들러는 과도하게 호출되어 성능에 문제를 일으킬 수 있다.
    // 디바운스와 스로틀은 짧은 시간 간격으로 연속해서 발생하는 이벤트를 그룹화해서 과도한 이벤트 핸들러의 호출을 방지하는 프로그래밍 기법이다.

    // const $button = document.querySelector('#clickButton');
    // const $normalMsg = document.querySelector('.normal-msg');
    // const $debounceMsg = document.querySelector('.debounce-msg');
    // const $throttleMsg = document.querySelector('.throttle-msg');

    // const debounce = (callback, delay) => {
    //     let timerId;
    //     return (...args) => {
    //         if(timerId) clearTimeout(timerId);
    //         timerId = setTimeout(callback, delay, ...args);
    //     }
    // }

    // const throttle = (callback, delay) => {
    //     let timerId;
    //     return (...args) => {
    //         if(timerId) return;
    //         timerId = setTimeout(() => {
    //             callback(...args);
    //             timerId = null;
    //         }, delay);
    //     }
    // }

    // $button.addEventListener('click', () => {
    //     $normalMsg.textContent = +$normalMsg.textContent + 1;
    // });

    // $button.addEventListener('click', debounce(() => {
    //     $debounceMsg.textContent = +$debounceMsg.textContent + 1;
    // }, 500));

    // $button.addEventListener('click', throttle(() => {
    //     $throttleMsg.textContent = +$throttleMsg.textContent + 1;
    // }, 500));

    // 디바운스

    // 디바운스는 짧은 시간 간격으로 이벤트가 연속해서 발생하면 이벤트 핸들러를 호출하지 않다가 일정 시간이 경과한 이후에 이벤트 핸들러가 한 번만 호출되도록 한다.
    // 즉, 디바운스는 짧은 시간 간격으로 발생하는 이벤트를 그룹화해서 마지막에 한 번만 호출되도록 한다.
    // 예를 들어, 텍스트 입력 필드에서 input 이벤트가 짧은 시간 간격으로 연속해서 발생하는 경우를 살펴보자.

    // const $textarea = document.querySelector('#textarea');
    // const $msg = document.querySelector('.msg');

    // $textarea.addEventListener('input', debounce(e => {
    //     $msg.textContent = e.target.value;
    // }, 500));

    // input 이벤트는 사용자가 텍스트 입력 필드에 값을 입력할 때마다 연속해서 발생한다.
    // 만약 input 이벤트 핸들러에서 사용자가 입력 필드에 입력한 값으로 Ajax 요청과 같은 무거운 처리를 수행한다면 사용자가 아직 입력을 완료하지 않았어도 ajax 요청이 전송될 것이다.
    // 이는 서버에도 부담을 주는 불필요한 처리이므로 사용자가 입력을 완료했을 때 한 번만 ajax 요청을 전송하는 것이 바람직하다.

    // 사용자가 입력을 완료했는지 여부는 정확히 알 수 없으므로 일정 시간 동안 텍스트 입력 필드에 값을 입력하지 않으면 입력이 완료된 것으로 간주한다.
    // 이를 위해 debounce 함수가 반환한 함수는 debounce 함수에 두 번째 인수로 전달한 시간보다 짧은 간격으로 이벤트가 발생하면 이전 타이머를 취소하고 새로운 타이머를 재설정한다.
    // 따라서 delay 보다 짧은 간격으로 이벤트가 연속해서 발생하면 debounce 함수의 첫 번쨰 인수로 전달한 콜백 함수는 호출되지 않다가 delay 동안 input 이벤트가 더 이상 발생하지 않으면 한 번만 호출된다.

    // 이처럼 짧은 시간 간격으로 이벤트가 연속해서 발생하면 이벤트 핸들러를 호출하지 않다가 일정 시간 동안 이벤트가 더 이상 발생하지 않으면 이벤트 핸들러가 한 번만 호출되도록 하는 디바운스는 resize 이벤트 처리나 input 요소에 입력된 값으로 ajax 요청하는 입력 필드 자동완성 ui 구현, 버튼 중복 클릭 방지 처리 등에 유용하게 사용된다.
    // 위 예제의 debounce 함수는 이해를 위해 간략하게 구현하여 완전하지 않다.
    // 실무에서 Underscore 의 debounce 함수나 Lodash 의 debounce 함수를 사용하는것을 권장한다.


    // 스로틀

    // 스로틀은 짧은 시간 간격으로 이벤트가 연속해서 발생하더라도 일정 시간 간격으로 이벤트 핸들러가 최대 한 번만 호출되도록 한다.
    // 즉 스로틀은 짧은 시간 간격으로 연속해서 발생하는 이벤트를 그룹화해서 일정 시간 단위로 이벤트 핸들러가 호출되도록 호출 주기를 만든다.

    const $container = document.querySelector('.container');
    const $normalCount = document.querySelector('.normal-count');
    const $throttleCount = document.querySelector('.throttle-count');

    const throttle = (callback, delay) => {
        let timerId;
        return (...args) => {
            if(timerId) return;
            timerId = setTimeout(() => {
                callback(...args);
                timerId = null;
            }, delay);
        }
    }

    let normalCount = 0;
    $container.addEventListener('scroll', () => {
        $normalCount.textContent = ++normalCount;
    });

    let throttleCount = 0;
    $container.addEventListener('scroll', throttle(() => {
        $throttleCount.textContent = ++throttleCount;
    }, 100));

    // scroll 이벤트는 사용자가 스크롤할 때 짧은 시간 간격으로 연속해서 발생한다.
    // 이처럼 짧은 시간 간격으로 연속해서 발생하는 이벤트의 과도한 이벤트 핸들러의 호출을 방지하기 위해 throttle 함수는 이벤트를 그룹화해서 일정 시간 단위로 이벤트 핸들러가 호출되도록 호출 주기를 만든다.
    // throttle 함수가 반환한 함수는 throttle 함수에 두 번째 인수로 전달한 시간이 경과하기 이전에 이벤트가 발생하면 아무것도 하지 않다가 delay 시간이 경과했을 때 이벤트가 발생하면 콜백 함수를 호출하고 새로운 타이머를 재설정한다.
    // 따라서 delay 시간 간격으로 콜백 함수가 호출된다.

    // 이처럼 짧은 시간 간격으로 연속해서 발생하는 이벤트를 그룹화해서 일정 시간 간격으로 이벤트 핸들러를 호출하는 스로틀은 scroll 이벤트 처리나 무한 스크롤 ui 구현 등에 유용하게 사용된다.
    // 위 예제의 throttle 함수는 이해를 위해 간략하게 구현하여 완전하지 않다.
    // 실무에서는 Underscore 의 throttle 함수나 lodash 의 throttle 함수를 사용하는 것을 권장한다.
    

</script>