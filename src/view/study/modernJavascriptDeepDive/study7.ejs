<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>

    <!-- <script type="module" src="/test/module1.mjs"></script> -->
    <script type="module" src="/test/module2.mjs"></script>

</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="button1" class="editor-button">button</button>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>
    
<script>
    // 모듈

    // 모듈이란 애플리케이션을 구성하는 개별적 요소로서 재사용 가능한 코드 조각을 말한다.
    // 일반적으로 모듈을 기능을 기준으로 파일 단위로 분리한다.
    // 이때 모듈이 성립하려면 모듈은 자신만의 파일 스코프를 가질 수 있어야 한다.

    // 자신만의 파일 스코프를 갖는 모듈의 자산은 기본적으로 비공개 상태이다.
    // 다시 말해, 자신만의 파일 스코프를 갖는 모듈의 모든 자산은 캡슐화되어 다른 모듈에서 접근할 수 없다.
    // 즉 모듈은 개별적 존재로서 애플리케이션과 분리되어 존재한다.

    // 하지만 애플리케이션과 완전히 분리되어 개별적으로 존재하는 모듈은 재사용이 불가능하므로 존재 의미가 없다.
    // 모듈은 애플리케이션이나 다른 모듈에 의해 재사용되어야 의미가 있다.
    // 따라서 모듈은 공개가 필요한 자산에 한정하여 명시적으로 선택적 공개가 가능하다.
    // 이를 export 라 한다.

    // 공개된 모듈의 자산은 다른 모듈에서 재사용할 수 있따.
    // 이때 공개된 모듈의 자산을 사용하는 모듈을 모듈 사용자라 한다.
    // 모듈 사용자는 모듈이 공개한 자산 중 일부 또는 전체를 선택해 자신의 스코프 내로 불러들여 재사용할 수 있따.
    // 이를 import 라 한다.

    // 자바스크립트와 모듈
    // 자바스크립트는 웨페이지의 단순한 보조 기능을 처리하기 위한 제한적인 용도를 목적으로 태어났다.
    // 이러한 태생적한계로 인해 다른 프로그래밍 언어와 비교할 때 부족한 부분이 있는 것이 사실이다.
    // 대표적인 것이 모듈 시스템을 지원하지 않는다는 것이다.
    // 다시 말해 자바스크립트는 모듈이 성립하기 위해 필요한 파일 스코프와 import , export 를 지원하지 않았따.

    // C언어는 #include 자바는 import 등 대부분의 프로그래밍 언어는 모듈 기능을 가지고 있다.
    // 하지만 클라이언트 사이드 자바스크립트는 script 태그를 사용하여 외부의 자바스크립트 파일을 로드할 수는 있지만 파일마다 독립적인 파일 스코프를 갖지 않는다.

    // 다시 말해 자바스크립트 파일을 여러 개의 파일로 분리하여 script 태그로 로드해도 분리된 자바스크립트 파일들은 결국 하나의 자바스크립트 파일 내에 있는 것처럼 동작한다.
    // 따라서 분리된 자바스크립트 파일들의 전역 변수가 중복되는 등의 문제가 발생할 수 있다.

    // 자바스크립트 모듈 시스템은 크게 CommonJS 와 AMD 진영으로 나뉘게 되었고 브라우저 환경에서 모듈을 사용하기 ㅜ이해서는 CommonJS 또는 AMD 를 구현한 모듈 로더 라이브러리를 사용해야 하는 상황이 되었다.

    // ES6 에서는 클라이언트 사이드 자바스크립트에서도 동작하는 모듈 기능을 추가했다.
    // IE 를 제외한 대부분의 브라우저에서 ES6 모듈을 사용할 수 있다.

    // script 태그에 tyle="module" 어트리뷰트를 추가하면 로드된 자바스크립트 파일은 모듈로서 동작한다.
    // 일반적인 자바스크립트 파일이 아닌 ESM 임을 명확히 하기 위해 ESM 의 파일 확장자는 mjs 를 사용할 것을 권장한다.

    // ESM 에는 클래스와 마찬가지로 기본적으로 script mode 가 적용된다.

    // 모듈 내에서 선언한 식별자는 모듈 외부에서 참조할 수 없다.
    // 모듈 스코프가 다르기 때문이다.

    // export

    // 모듈은 독자적인 모듈 스코프를 갖는다.
    // 따라서 모듈 내부에서 선언한 모든 식별자는 기본적으로 해당 모듈 내부에서만 참조할 수 있다.
    // 모듈 내부에서 선언한 식별자를 외부에 공개하여 다른 모듈들이 재사용할 수 있게 ㅎ ㅏ려면 export 키워드를 사용한다.
    

    

</script>