<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
    <script src="/tsc/typescript1.js"></script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// REST API

// REST 는 HTTP/1.0 과 1.1 의 스펙 작성에 참여했고, 아파치 HTTP 서버 프로젝트의 공동 설립자인 로이 필딩의 2000년 논문에서 처음 소개되었다.
// 발표 당시의 웹이 HTTP 를 제대로 사용하지 못하고 있는 상황을 보고 HTTP 의 장점을 최대한 활용할 수 있는 아키텍처로서 REST 를 소개했고 이는 HTTP 프로토콜의 의도에 맞게 디자인하도록 유도하고 있다.
// REST 의 기본 원칙을 성실히 지킨 서비스 디자인을 RESTful 이라고 표현한다.
// 즉, REST 는 HTTP를 기반으로 클라이언트가 서버의 리소스에 접근하는 방식을 규정한 아키텍처고, REST API 는 REST 를 기반으로 서비스 API 를 구현한 것을 의미한다.

// REST API 의 구성

// REST API 는 자원(resource) , 행위 (verb) , 표현 (representations) 의 3가지 요소로 구성된다.
// REST 는 자체 표현 구조로 구성되어 REST API 만으로 HTTP 요청의 내용을 이해할 수 있다.

// 자원 : URI
// 행위 : HTTP 요청 메서드
// 표현 : 페이로드

// REST API 설계 원칙

// REST 에서 가장 중요한 기본적인 원칙은 두 가지다.
// URI 는 리소스를 표현하는데 집중하고
// 행위에 대한 정의는 HTTP 요청 메서드를 통해 하는 것이 RESTful API 를 설계하는 중심 규칙이다.

// 1. URI 는 리소스를 표현해야 한다.
// URI 는 리소스를 표현하는 데 중점을 두어야 한다.
// 리소스를 식별할 수 있 는 이름은 동사보다는 명사를 사용한다. 따라서 이름에 get 같은 행위에 대한 표현이 들어가서는 안된다.

// #bad
// GET /getTodos/1
// GET /todos/show/1

// #good
// GET /todos/1

// 2. 리소스에 대한 행위는 HTTP 요청 메서드로 표현한다.
// HTTP 요청 메서드는 클라이언트가 서버에 요청의 종류와 목적(리소스에 대한 행위)을 알리는 방법이다.
// 주로 5가지 요청 메서드(GET,POST,PUT,PATCH,DELETE 등)를 사용하여 CRUD 를 구현한다.
// 리소스에 대한 행위는 HTTP 요청 메서드를 통해 표현하며, URI 에 표현하지 않는다.
// 예를 들어, 리소스를 취득하는 경우에는 GET, 리소스를 삭제하는 경우에는 DELETE 를 사용하여 리소스에 대한 행위를 명확히 표현한다.

// #bad
// GET /todos/delete/1

// #good
// DELETE /todos/1

// GET 요청

// todos 리소스에서 모든 todo 를 취득한다.

const xhr1 = new XMLHttpRequest();
xhr1.open('GET','/test/todos');
xhr1.send();
xhr1.onload = () => {
    if(xhr1.status === 200) {
        console.log(xhr1.response);
    } else {
        console.error('Error', xhr1.status, xhr1.statusText);
    }
}

const xhr2 = new XMLHttpRequest();
xhr2.open('GET','/test/todos/1');
xhr2.send();
xhr2.onload = () => {
    if(xhr2.status === 200) {
        console.log(xhr2.response);
    } else {
        console.error('Error', xhr2.status, xhr2.statusText);
    }
}

// POST 요청
// todos 리소스에 새로운 todo를 생성한다.
// POST 요청 시에는 setRequestHeader 메서드를 사용하여 요청 몸체에 담아 서버로 전송할 페이로드의 MIME 타입을 지정해야 한다.

const xhr3 = new XMLHttpRequest();
xhr3.open('POST','/test/todos');
xhr3.setRequestHeader('content-type', 'application/json');
xhr3.send(JSON.stringify({id:4, content: 'Angular', complete: false}));
xhr3.onload = () => {
    if(xhr3.status === 200 || xhr3.status === 201) {
        console.log(JSON.parse(xhr3.response));
    } else {
        console.error('Error', xhr3.status, xhr3.statusText);
    }
}

// PUT 요청

// PUT 은 특정 리소스 전체를 교체할 때 사용한다.
// 다음 예제에서는 todos 리소스에서 id 로 todos 를 특정하여 id 를 제외한 리소스 전체를 교체한다.
// PUT 요청 시에는 setRequestHeader 메서드를 사용하여 요청 몸체에 담아 서버로 전송할 페이로드의 MIME 타입을 지정해야 한다.

const xhr4 = new XMLHttpRequest();
xhr4.open('PUT', '/test/todos/3');
xhr4.setRequestHeader('content-type', 'application/json');
xhr4.send(JSON.stringify({id:4, content:'React', complete: true}));
xhr4.onload = () => {
    if(xhr4.status === 200 || xhr4.status === 201) {
        console.log(JSON.parse(xhr4.response));
    } else {
        console.error('Error', xhr4.status, xhr4.statusText);
    }
}

// PATCH 요청

// PATCH는 특정 리소스의 일부를 수정할 때 사용한다.
// PATCH 요청 시에는 setRequestHeader 메서드를 사용하여 요청 몸체에 담아 서버로 전송할 페이로드의 MIME 타입을 지정해야 한다.

const xhr5 = new XMLHttpRequest();
xhr5.open('PATCH', '/test/todos/2');
xhr5.setRequestHeader('content-type', 'application/json');
xhr5.send(JSON.stringify({complete:true}));
xhr5.onload = () => {
    if(xhr5.status === 200 || xhr5.status === 201) {
        console.log(JSON.parse(xhr5.response));
    } else {
        console.error('Error', xhr5.status, xhr5.statusText);
    }
}

// DELETE 요청

// todos 리소스에서 id 를 사용하여 todo 를 삭제한다.
const xhr6 = new XMLHttpRequest();
xhr6.open('DELETE', '/test/todos/2');
xhr6.send();
xhr6.onload = () => {
    if(xhr6.status === 200 || xhr6.status === 201) {
        console.log(JSON.parse(xhr6.response));
    } else {
        console.error('Error', xhr6.status, xhr6.statusText);
    }
}

</script>