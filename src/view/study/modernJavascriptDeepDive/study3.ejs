<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
</head>
<body>
    <input type="text" id="text1">
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>
    const log = console.log;
    // 프로미스

    // const get = url => {
    //     const xhr = new XMLHttpRequest();
    //     xhr.open('GET', url);
    //     xhr.send();

    //     xhr.onload = () => {
    //         if(xhr.status === 200) {
    //             log(JSON.parse(xhr.response));
    //         } else {
    //             log(xhr.status, xhr.statusText);
    //         }
    //     }
    // }
   
    // get('https://jsonplaceholder.typicode.com/posts/1');

    // get 함수는 비동기 함수
    // 비동기 함수란 함수 내부에 비동기로 동작하는 코드를 포함하는 함수

    // 비동기 함수를 호출하면 함수 내부의 비동기로 동작하는 코드가 완료되지 않았다 해도 기다리지 않고 즉시 종료된다.
    // 즉 비동기 함수 내부의 비동기로 동작하는 코드는 비동기 함수가 종료된 이후에 완료된다.
    // 따라서 비동기 함수 내부의 비동기로 동작하는 코드에서 처리 결과를 외부로 반환하거나 상위 스코프의 변수에 할당하면 기대한 대로 동작하지 않는다.

    // let g = 0;
    // setTimeout(() => g=100,0);
    // log(g);

    // const get = url => {
    //     const xhr = new XMLHttpRequest();
    //     xhr.open('GET', url);
    //     xhr.send();

    //     xhr.onload = () => {
    //         if(xhr.status === 200) {
    //             log(xhr.response);
    //         }
    //         log(xhr.status, xhr.statusText);
    //     }
    // }

    // get('https://jsonplaceholder.typicode.com/posts/1');
    // for(let i =0; i<1000; i++) {
    //     log(i);
    // }

    // 비동기 함수 get 이 호출되면
    // 코드를 평가하는 과정에서 get 함수의 실행 컨텍스트가 생성
    // 실행 컨텍스트는 스택에 푸시된다.

    // 이후 함수 코드 실행 과정에서 xhr.onload 이벤트 핸들러 프로퍼티에 이벤트 핸들러가 바인딩된다.

    // xhr.onload 핸들러프로퍼티에 바인딩한 이벤트 핸들러가 즉시 실행되는 것이 아니다.
    // xhr.onload 이벤트 핸들러는 load 이벤트가 발생하면 일단 태스크 큐에 저장되어 대기하다가, 콜 스택이 비면 이벤트 루프에 의해 콜 스택으로 푸시되어 실행된다.

    // 이처럼 비동기 함수는 비동기 처리 결과를 외부에 반환할 수 없고, 상위 스코프 변수에 할당할 수도 없다.
    // 따라서 비동기 함수의 처리 결과(서버의 응답 등)에 대한 후속 처리는 비동기 함수 내부에서 수행해야한다.

    // 이때 비동기 함수를 범용적으로 사용하기 위해 비동기 함수에 비동기 처리 결과에 대한 후속 처리를 수행하는 콜백 함수를 전달하는 것이 일반적이다.
    // 필요에 따라 비동기 처리가 성공하면 호출될 콜백 함수와 비동기 처리가 실패하면 호출될 콜백 함수를 전달할 수 있다.

    // const get = (url,sCallback, fCallback) => {
    //     const xhr = new XMLHttpRequest();
    //     xhr.open('GET', url);
    //     xhr.send();

    //     xhr.onload = () => {
    //         if(xhr.status === 200) {
    //             sCallback(JSON.parse(xhr.response));
    //         } else {
    //             fCallback(xhr.status)
    //         }
    //     }
    // }

    // get('https://jsonplaceholder.typicode.com/posts/1',log, log);

    // 에러처리의 한계

    // 비동기 처리를 위한 콜백 패턴의 문제점 중에서 가장 심각한 것은 에러 처리가 곤란하다는 것이다.

    // try {
    //     setTimeout(() => {throw new Error('Error !');}, 1000);
    // } catch(e) {
    //     log('캐치한 에러', e);
    // }

    // catch 코드 블록에서 캐치되지 않는다.
    // 비동기 함수인 setTimeout 이 호출되면 setTimeout 함수의 실행 컨텍스트가 생성되어 

    // 에러는 호출자(caller) 방향으로 정해진다.
    // 즉 콜 스택의 아래 방향으로 전파된다.
    // 하지만 setTimeout 함수의 콜백 함수를 호출한 것은 setTimeout 함수가 아니다.
    // 따라서 setTimeout 함수의 콜백 함수가 발생시킨 에러는 catch 블록에서 캐치되지 않는다.

    // const promiseGet = url => {
    //     return new Promise((resolve,reject) => {
    //         const xhr = new XMLHttpRequest();
    //         xhr.open('GET', url);
    //         xhr.send();

    //         xhr.onload = () => {
    //             if(xhr.status === 200) {
    //                 resolve(JSON.parse(xhr.response));
    //             } else {
    //                 reject(new Error(xhr.status));
    //             }
    //         }
    //     })
    // };

    
    
    
    // 비동기 함수인 PromiseGet 은 함수 내부에서 프로미스를 생성하고 반환한다.
    // 비동기 처리는 Promise 생성자 함수가 인수로 전달받은 콜백 함수 내부에서 수행한다.
    // 프로미스의 상태는 resolve 또는 reject 함수를 호출하는 것으로 결정된다.

    // 프로미스는 비동기 처리 상태와 처리 결과를 관리하는 객체

    // 프로미스의 비동기 처리 상태가 변화하면 후속 처리 메서드에 인수로 전달한 콜백 함수가 선택적으로 호출ㄷ된다.

    // Promise.prototype.then
    // then 메서드는 두 개의 콜백 함수를 인수로 전달받는다.
    // 첫번째 콜백 함수는 프로미스가 fullfilled 상태가 되면 호출된다. 이때 콜백 함수는 프로미스의 비동기 처리 결과를 인수로 전달받는다.
    // 두번째 콜백 함수는 프로미스가 rejected 상태가 되면 호출된다. 이때 콜백 함수는 프로미스의 에러를 인수로 전달받는다.

    

    
    
    // 프로미스의 에러 처리

    // ㅂ에러처리의 한계에서 보았듯이 비동기 처리를 위한 콜백 패턴은 에러 처리가 곤란하다는 문제가 있다.
    // 프로미스는 에러를 문제없이 처리할 수 있다.

    // 비동기 처리 결과에 대한 후속 처리는 프로미스가 제공하는 후속 처리 메서드 then,catch,finally 를 사용하여 수행한다.

    // catch 메서드를 모든 then 메서드를 호출한 이후에 호출하면 비동기 처리에서 발생한 에러뿐만 아니라 then 메서드 내부에서 발생한 에러까지 모두 캐치할수있다.

    // promiseGet('https://jsonplaceholder.typicode.com/posts/1')
    // .then(
    //     res => {throw new Error('error')}
    //     , e => log('error1')
    // );

    // promiseGet('https://jsonplaceholder.typicode.com/posts/1')
    // .then(res => {throw new Error('error')})
    // .catch(e => log('error2'))
    // ;

    // 또한 then 메서드에 두번째 콜백 함수를 전달하는 것보다 catch 메서드를 사용하는 것이 가독성이 좋고 명확하다. 따라서 에러 처리는 then 메서드에서 하지 말고 catch 메서드에서 하는 것을 권장한다.

    // 프라미스 체이닝
    // 콜백 헬에서 살펴보았듯이 비동기 처리를 위한 콜백 패턴은 콜백 헬이 발생하는 문제가 있다.
    // 프로미스는 then catch finally 후속 처리 메서드를 통해 콜백 헬을 해결한다.

    // const promiseGet = url => {
    //     return new Promise((resolve,reject) => {
    //         const xhr = new XMLHttpRequest();
    //         xhr.open('GET', url);
    //         xhr.send();

    //         xhr.onload = () => {
    //             if(xhr.status === 200) {
    //                 resolve(JSON.parse(xhr.response));
    //             } else {
    //                 reject(new Error(xhr.status));
    //             }
    //         }
    //     })
    // };

    // const url = 'https://jsonplaceholder.typicode.com';

    // promiseGet(`${url}/posts/1`)
    // .then(({userId}) => promiseGet(`${url}/users/${userId}`))
    // .then(userInfo => log(userInfo))
    // .catch(e => log(e));

    // then,catch,finally 후속 처리 메서드는 언제나 프로미스를 반환하므로 연속적으로 호출할 수 있다.
    // 이를 프로미스 체이닝이라 한다.

    // 후속처리메서드의 콜백 함수는 프로미스의 비동기 처리 상태가 변경되면 선택적으로 호출된다.

    // 이처럼 then catch finally 후속 처리 메서드는 콜백 함수가 반환한 프로미스를 반환한다.
    // 만약 후속 처리 메서드의 콜백 함수가 프로미스가 아닌 값을 반환하더라도 그 값을 암묵적으로 resolve, reject 하여 프로미스를 생성해 반환한다.

    // (async () => {
    //     const {userId} = await promiseGet(`${url}/posts/1`);
    //     const userInfo = await promiseGet(`${url}/users/${userId}`);
    //     log(userInfo);
    // })();

    // 프로미스의 정적 메서드

    // Promise 는 주로 생성자 함수로 사용되지만 함수도 객체이므로 메서드를 가질 수 있다.
    

    // Promise.all 메서드는 여러 개의 비동기 처리를 모두 병렬 처리할 때 사용한다.

    // console.time('test1');

    // const requestData1 = () => new Promise(resolve => setTimeout(() => resolve(1),3000));
    // const requestData2 = () => new Promise(resolve => setTimeout(() => resolve(2),2000));
    // const requestData3 = () => new Promise(resolve => setTimeout(() => resolve(3),1000));

    // const res = [];

    // requestData1()
    // .then(d => {
    //     res.push(d);
    //     return requestData2();
    // })
    // .then(d => {
    //     res.push(d);
    //     return requestData3();
    // })
    // .then(d => {
    //     res.push(d);
    //     log(res);
    //     console.timeEnd('test1');
    // })
    // .catch(e => log(e));

    // 세 개의 비동기 처리를 순차적으로 처리한다.
    // 그런데 위 예제의 경우 세 걔의 비동기 처리는 서로 의존적이지 않고 개별적으로 수행된다.
    // 즉 앞선 비동기 처리 결과를 다음 비동기 처리가 사용하지 않는다.
    // 따라서 위 예제의 경우 세 개의 비동기 ㅊ ㅓ리를 순차적으로 처리할 필요가 없다.

    // Promise.all 메서드는 여러 개의 비동기 처리를 모두 병렬 처리할 떄 사용한다고 했다.
    // console.time('test2');
    // Promise.all([requestData1(),requestData2(),requestData3()])
    // .then(result => {
    //     log(result);
    //     console.timeEnd('test2');
    // })
    // .catch(log);

    // Promise.all 메서드는 프로미스를 요소로 갖는 배열 등의 이터러블을 인수로 전달받는다.
    // 그리고 전달받은 모든 프라미스가 fulfilled 상태가 되면 모든 처리 결과를 배열에 저장해 새로운 프로미스를 반환한다.
    // 하나라도 rejected 상태가 되면 나머지 프로미스가 fulfilled 상태가 되는것을 기다리지 않고 즉시 종료된다.

    // Promise.race

    // Promise.rade 는 가장먼저 fullfilled 상태가 된 프로미스의 처리 결과를 resolve 하는 새로운 프로미스를 반환한다.

    // const requestData1 = () => new Promise(resolve => setTimeout(() => resolve(1),3000));
    // const requestData2 = () => new Promise(resolve => setTimeout(() => resolve(2),2000));
    // const requestData3 = () => new Promise(resolve => setTimeout(() => resolve(3),1000));
    // const requestData4 = () => new Promise((resolve,reject) => reject('error'));

    // Promise.race([requestData1(),requestData2(),requestData3()])
    // .then(res => log(res))
    // .catch(e => log(e));

    // Promise.allSettled 메서드는 프로미스를 요소로 갖는 배열 등의 이터러블을 인수로 전달받는다.
    // 그리고 전달받은 프로미스가 모두 settled 상태가 되면 처리 결과를 배열로 반환한다.
    
    // Promise.allSettled([requestData1(),requestData2(),requestData3(),requestData4()])
    // .then(res => log(res))
    // .catch(e => log(e))
    // ;

    // setTimeout(() => log(1));

    // Promise.resolve()
    // .then(() => log(2))
    // .then(() => log(3));

    // 프로미스의 후속 처리 메서드도 비동기로 동작하므로 1->2->3 순으로 출력될 될것처럼 보이지만 2->3->1 순으로 출력된다.
    // 이유는 프로미스의 후속 처리 메서드의 콜백 함수는 태스크 큐가 아니라 마이크로태스크 큐에 저장되기 때문이다.

    // 마이크로태스크 큐는 태스크 큐와 별도의 큐다.
    // 마이크로태스크 큐에는 프로미스 후속 처리 메서드의 콜백 함수가 일시 저장된다.
    // 그 외 비동기 함수의 콜백 함수나 이벤트 핸들러는 태스크 큐에 일시 저장된다.

    // 콜백 함수나 이벤트 핸들러를 일시 저장한다는 점에서 태스크 큐와 동일하지만 마이크로태스크 큐는 태스크 큐보다 우선순위가 높다.
    // 즉 이벤트 루프는 콜 스택이 비면 먼저 마이크로태스크 큐에서 대기하고 있는 함수를 가져와 실행한다.
    // 이후 마이크로태스크 큐가 비면 태스크 큐에서 대기하고 있는 함수를 가져와 실행한다.

    // fetch

    // const promise = fetch(url, [, options])

    // fetch 함수는 HTTP 응답을 나타내는 Response 객체를 래핑한 Promise 객체를 반환한다.

    // fetch 함수는 HTTP 응답을 나타내는 Resonse 객체를 래핑한 프로미스를 반환하므로 후속 처리 메서드 then 을 통해 프로미스가 resolve 한 Response 객체를 전달받을 수 있다.
    // Response 객체는 HTTP 응답을 나태내는 다양한 프로퍼티를 제공한다.

    // fetch 함수가 반환한 프로미스가 래핑하고있는 MIME 타입이 application/json 인 HTTP 응답 몸체를 취득하려면
    // Response.prototype.json 메서드를 사용한다.
    // Response.prototype.json 메서드는 Response 객체에서 HTTP 응답 몸체(response.body)를 취득하여 역직렬화한다.

    // fetch('https://jsonplaceholder.typicode.com/todos/1')
    // .then(res => {
    //     log(res);
    //     return res.json();
    // })
    // .then(body => log(body))
    // ;

    

    // fetch 함수가 반환하는 프로미스는 기본적으로 404 not found, 500 internal server error 와 같은 http 에러가 발생해도
    // 에러를 reject 하지 않고 boolean 타입의 ok 상태를 false 로 설정한 Response 객체를 resolve 한다.
    // 오프라인 등의 네트워크 장애나 CORS 에러에 의해 요청이 완료되지 못한 경우에만 프로미스를 reject 한다.

    const wrongUrl = 'https://jsonplaceholder.typicode.com/XXX/1';
    fetch(wrongUrl)
    .then(res => {
        if(!res.ok) {
            throw new Error(res.status);
        }
        return res.json();
    })
    .then(body => log(body))
    .catch(e => log('error',e))
    ;

    // axios 는 모든 HTTP 에러를 reject 하는 프로미스를 반환한다.
    // 따라서 모든 에러를 catch 에서 처리할 수 있어 편리하다.
    // 또한 axios 는 인터셉터 요청 설정 등 fetch 보다 다양한 기능을 지원한다.
    

    

</script>