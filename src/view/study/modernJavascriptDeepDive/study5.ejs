<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
    <style>
        .active {color: red;}
    </style>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <ul id="ul">
                        <li id="li1">li1</li>
                        <li id="li2">li2</li>
                        <li id="li3">li3</li>
                        <li id="li4">li4</li>
                    </ul>
                    <button id="button1" class="editor-button">button</button>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>

// 이벤트 드리븐 프로그래밍

// 애플리케이션이 특정 타입의 이벤트에 대해 반응하여 어떤 일을 하고 싶다면 해당하는 타입의 이벤트가 발생했을 때 호출될  함수를 브라우저에게 알려 호출을 위임한다.
// 이때 이벤트가 발생했을 때 호출될 함수를 이벤트 핸들러 라 하고, 이벤트가 발생했을 때 브라우저에게 이벤트 핸들러의 호출을 위임하는 것을 이벤트 핸들러 등록이라 한다.

// const $button1 = document.querySelector('#button1');
// $button1.onclick = () => console.log('button1');


// 이벤트 타입
// 이벤트 타입은 약 200 여 가지가 있다.

// click, dbclick, mousedown, mouseup, mousemove
// mouseenter : 마우스 커서를 html 요소 안으로 이동했을 때(버블링 되지 않는다.)
// mouseover : 마우스 커서를 html 요소 안으로 이동했을 때(버블링된다.)
// mouseleave : 마우스 커서를 html 요소 밖으로 이동했을 때(버블링되지 않는다.)
// mouseout : 마우스 커서를 html 요소 밖으로 이동했을 때(버블링된다.)

// $button1.onmouseenter = () => console.log('onmouseenter')
// $button1.onmouseover = () => console.log('onmouseover');

// keydown, keypress, keyup, focus, blur, focusin, focusout


// 폼 이벤트
// submit
// form 요소 내의 input, select 입력 필드에서 엔터키를 눌렀을 때
// form 요소 내의 submit 버튼을 클릭했을 때

// 값 변경 이벤트
// input : input(text,checkbox,radio), select, textarea 요소의 값이 입력되었을 때

// change : input,select,textarea 요소의 값이 변경되었을때
// change 이베트는 input 이벤트와는 달리 html 요소가 포커스를 잃었을때 사용자 입력이 종료되었다고 인식하여 발생한다.
// 즉 사용자가 입력을 하고 있을 때는 input 이벤트가 발생하고 사용자 입력이 종료되어 값이 변경되면 change 이벤트가 발생한다.

// readystatechange : html 문서의 로드와 파싱 상태를 나타내는 document.readyState 프로퍼티 값이 변경되었을때

// DOM 뮤테이션 이벤트

// DOMContentLoaded : HTML 문서의 로드와 파싱이 완료되어 DOM 생성이 완료되었을 때

// 뷰 이벤트

// resize : 브라우저 윈도우의 크기를 리사이즈 할 때 연속적으로 발생한다.
// 오직 window 객체에서만 발생한다.

// scroll : 웹 페이지(document) 또는 html 요소를 스크롤할 때 연속적으로 발생한다.

// 리소스 이벤트

// load : DOMContentLoaded 이벤트가 발생한 이후, 모든 리소스의 로딩이 완료되었을 때

// unload : 리소스가 언로드될 때(주로 새로운 웹페이지를 요청한 경우)

// abort : 리소스 로딩이 중단되었을 때

// error : 리소스 로딩이 실패했을 때

// 이벤트 핸들러 등록

// 이벤트 핸들러는 이벤트가 발생했을 때 브라우저에 호출을 위임한 함수다.
// 다시 말해 이벤트가 발생하면 브라우저에 의해 호출될 함수가 이벤트 핸들러 다

// 이벤트 핸들러를 등록하는 방법은 3가지다.

// 이벤트 핸들러 어트리뷰트 방식
// <button onclick="console.log(1)"></button>

// 주의할 점은 이벤트 핸들러 어트리뷰트 값으로 함수 참조가 아닌 함수 호출문 드으이 문을 할당한다는 것이다.


// 이벤트 핸들러 프로퍼티 방식
// window 객체와 Document, HTMLElement 타입의 DOM 노드 객체는 이벤트에 대응하는 이벤트 핸들러 프로퍼티를 가지고 있다.
// 이벤트 핸들러 프로퍼티의 키는 이벤트 핸들러 어트리뷰트와 마찬가지로 onclick 과 같이 on 접두사와 이벤트 종류를 나타내는 이벤트 타입으로 이루어져 있다.
// 이벤트 핸들러 프로퍼티에 함수를 바인딩하면 이벤트 핸들러가 등록된다.

// const $button1 = document.querySelector('#button1');
// $button1.onclick = () => console.log('button1');
// $button1.onclick = () => console.log('button2');

// 이벤트 핸들러는 대부분 이벤트를 발생시킬 이벤트 타깃에 바인딩한다.
// 하지만 반드시 이벤트 타깃에 이벤트 핸들러를 바인딩해야 하는 것은 아니다.
// 이벤트 핸들러는 이벤트 타깃 또는 전파된 이벤트를 캐치할 dom 노드 객체에 바인딩한다.

// 앞서 살펴본 이벤트 핸들러 어트리뷰트 방식 도 결국 dom 노드 객체의 이벤트 핸들러 프로퍼티로 변환되므로 이벤트 핸들러 프로퍼티 방식과 동일하다고 할 수 있다.
// 이벤트 핸들러 프로퍼티 방식은 이벤트 핸들러 어트리뷰트 방식의 html 과 자바스크립트가 뒤섞이는 문제를 해결할 수 있다.
// 하지만 이벤트 핸들러 프로퍼티에 하나의 이벤트 핸들러만 바인딩할 수 있다는 단점이 있다.

// addEventListener 메서드 방식

// dom level2 에서 도입된 EventTarget.prototype.addEventListener 메서드를 사용하여 이벤트 핸들러를 등록할 수 있다.
// 앞서 살펴본 이벤트 핸들러 어트리뷰트 방식과 이벤트 핸들러 프로퍼티 방식은 dom level0 부터 제공되던 방식이다.

// EventTarget.addEventListener('eventType', 'function', '[useCaptuer]')

// addEventListener 메서드의 첫 번째 매개변수에는 이벤트의 종류를 나타내는 문자열인 이벤트 타입을 전달한다.
// 두 번째 매개변수에는 이벤트 핸들러를 전달한다.
// 마지막 매개변수에는 이벤트를 캐치할 이벤트 전파 단계(캡처링과 버블링) 을 지정한다.
// 생략하거나 false 를 지정하면 버블링 단계에서 이벤트를 캐치하고, true 를 지정하면 캡처링 단계에서 이벤트를 캐치한다.

// const $button1 = document.querySelector('#button1');
// $button1.addEventListener('click', function() {
//     console.log(this);
// });

// $button1.addEventListener('click', function() {
//     console.log('button1');
// });

// 동일한 html 요소에서 발생한 동일한 이벤트에 대해 이벤트 핸들러 프로퍼티 방식은 하나 이상의 이벤트 핸들러를 등록할 수 없지만 
// addEventListener 메서드는 하나 이상의 이벤트 핸들러를 등록할 수 있다.
// 이때 이벤트 핸들러는 등록된 순서대로 호출된다.

// 단 addEventListener 메서드를 통해 참조가 동일한 이벤트 핸들러를 중복 등록하면 하나의 이벤트 핸들러만 등록된다.

// const handler1 = () => {
//     console.log('handler1');
// }

// $button1.addEventListener('click', handler1);
// $button1.addEventListener('click', handler1);


// 이벤트 핸들러 제거

// addEventListener 메서드로 등록한 이벤트 핸들러를 제거하려면 EventTarget.prototype.removeEventListenr 메서드를 사용한다.
// removeEventListenr 메서드에 전달할 인수는 addEventListener 메서드와 동일하다.
// 단 addEventListener 메서드에 전달한 인수와 removeEventListenr 메서드에 전달한 인수가 일치하지 않으면 이벤트 핸들러가 제거되지 않는다.


// 이벤트 객체

// 이벤트가 발생하면 이벤트에 관련한 다양한 정보를 담고 있는 이벤트 객체가 동적으로 생성된다.
// 생성된 이벤트 객체는 이벤트 핸들러의 첫 번째 인수로 전달된다.


// 이벤트 전파

// DOM 트리 상에 존재하는 DOM 요소 노드에서 발생한 이벤트는 DOM 토리를 통해 전파된다.
// 이를 이벤트 전파라고 한다.

// 생성된 이벤트 객체는 이벤트를 발생시킨 DOM 요소인 이벤트 타깃을 중심으로 DOM 트리를 통해 전파된다.

// 이벤트 전파는 이벤트 객체가 전파되는 방향에 따라 다음과 같이 3단계로 구분할 수 있다.

// 캡처링 단계 : 이벤트 상위 요소에서 하위 요소 방향으로 전파
// 타깃 단계 : 이벤트가 이벤트 타깃에 도달
// 버블링 단계 : 이벤트가 하위요소에서 상위 요소 방향으로 전파

const $ul = document.querySelector('#ul');

$ul.addEventListener('click', e => {
    console.log(e.eventPhase);
    console.log(e.target);
    console.log(e.currentTarget);
});

// li 요소를 클릭하면 클릭 이벤트가 발생하여 클릭 이벤트 객체가 생성되고 클릭된 li 요소가 이벤트 타깃이 된다.
// 이때 클릭 이벤트 객체는 window 에서 시작해서 이벤트 타깃 방향으로 전파된다.
// 이것이 캡처링 단계다.
// 이후 이벤트 객체는 이벤트를 발생시킨 이벤트 타깃에 도착한다.
// 이것이 타깃 단계다.
// 이후 이벤트 객체는 이벤트 타깃에서 시작해서 window 방향으로 전파된다.
// 이것이 버블링 단계다.

// 이벤트 핸들러 어트리뷰트/프로퍼티 방식으로 등록한 이벤트 핸들러는 타깃 단계와 버블링 단계의 이벤트만 캐치할 수 있다.
// 하지만 addEventListener 메서드 방식으로 등록한 이벤트 핸들러는 타깃 단계와 버블링 단계 뿐만 아니라 캡처링 단계의 이벤트도 선별적으로 캐치할 수 있다.
// 캡처링 단계의 이벤트를 캐치하려면 addEventListener 메서드의 3번째 인수로 true 를 전달해야 한다.
// 3번째 인수를 생략하거나 false 를 전달하면 타깃 단계와 버블링 단계의 이벤트만 캐치할 수 있다.

// 이처럼 이벤트는 이벤트를 발생시킨 이벤트 타깃은 물론 상위 DOM 요소에서도 캐치할 수 있다.
// 즉 dom 트리를 통해 전파되는 이벤트는 이벤트 패스에 위한 모든 dom 요소에서 캐치할 수 있다.







</script>