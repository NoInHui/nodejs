// Ctrl + Alt + N : 실행
const log = console.log;

// 클래스

// 클래스는 프로토타입의 문법적 설탕인가?
// 자바스크립트는 프로토타입 기간 객체지향 언어다.
// 비록 다른 객체지향 언어와의 차이점에 대한 논쟁이 있긴 하지만 자바스크립트는 강력한 객체지향 프로그래밍 능력을 지니고 있다.

// 프로토타입 기반 객체지향 언어는 클래스가 필요 없는 객체지향 프로그래밍 언어다.
// 하지만 클래스 기반 언어에 익숙한 프로그래머들은 프로토타입 기반 프로그래밍 방식에 혼란을 느낄 수 있으며, 자바스크립트를 어렵게 느끼게 하는 하나의 장벽처럼 인식되었다.

// ES6에서 도입된 클래스는 기존 프로토타입 기반 객체지향 프로그래밍보다 자바나 C# 같은 클래스 기반 객체지향 프로그래밍에 익숙한 프로그래머가 더욱 빠르게 학습할 수 있도록 클래스 기반 객체지향 프로그래밍 언어와 매우 흡사한 새로운 객체 생성 메커니즘을 제시한다.
// 그렇다고 ES6 의 클래스가 기존의 프로토타입 기반 객체지향 모델을 폐지하고 새롭게 클래스 기반 객체지향 모델을 제공하는 것은 아니다.
// 사실 클래스는 함수이며 기존 프로토타입 기반 패턴을 클래스 기반 패턴처럼 사용할 수 있도록 하는 문법적 설탕 이라고 볼수도 있다.

// 단 클래스와 생성자 함수는 모두 프로토타입 기반의 인스턴스를 생성하지만 정확히 동일하게 동작하지 않는다.
// 클래스는 생성자 함수보다 엄격하며 생성자 함수에서는 제공하지 않는 기능도 제공한다.

// 클래스는 생성자 함수와 매우 유사하게 동작하지만 다음과 같은 몆 가지 차이가 있다.

// 1. 클래스를 new 연산자 없이 호출하면 에러가 발생한다. 하지만 생성자 함수를 new 연산자 없이 호출하면 일반 함수로서 호출된다.
// 2. 클래스는 상속을 지원하는 extends 와 super 키워드를 제공한다. 하지만 생성자 함수는 extends,super 키워드를 지원하지 않는다.
// 3. 클래스는 호이스팅이 발생하지 않는 것처럼 동작한다. 하지만 함수 선언문으로 정의된 생성자 함수는 함수 호이스팅이, 함수 표현식으로 정의한 생성자 함수는 변수 호이스팅이 발생한다.
// 4. 클래스 내 모든 코드에는 암묵적 strict mode 가 지정되어 실행되며 strict mode 를 해제할 수 없다. 하지만 생성자 함수는 암묵적으로 strict mode 가 지정되지 않는다.
// 5. 클래스의 constructor, 프로토타입 메서드, 정적 메서드는 모두 프로퍼티 어트리뷰트 [[Enumerable]] 의 값이 false 다. 다시 말해 열거되지 않는다.

// 생성자 함수와 클래스는 프로토타입 기반의 객체지향을 구현했다는 점에서 매우 유사하다.
// 하지만 클래스는 생성자 함수 기반의 객체 생성 방식보다 견고하고 명료하다.
// 특히 클래스의 extends,super 키워드는 상속 관계 구현을 더욱 간결하고 명료하게 한다.
// 따라서 클래스를 프로토타입 기반 객체 생성 패턴의 단순한 문법적 설탕이라고 보기보다는 새로운 객체 생성 메커니즘으로 보는 것이 좀 더 합당하다.

// 클래스 정의
// 클래스는 class 키워드를 사용하여 정의

// class Person {};
// const person = class {};
// const person = class MyClass {};

// 클래스는 입급 객체다.
// 클래스 몸체에는 0개 이상의 메서드만 정의할 수 있다.
// 클래스 몸체에서 정의할 수 있는 메서드는 constructor , 프로토타입 메서드, 정적 메서드 세가지가 있다.

// class Person {
//     // 생성자
//     constructor(name) {
//         this.name = name;
//     }

//     // 프로토타입 메서드
//     sayHi() {
//         log(`hello ${this.name}`);
//     }

//     // 정적 메서드
//     static sayHello() {
//         log('hi');
//     }
// }

// const me = new Person('nih');
// me.sayHi();
// Person.sayHello();

// 클래스 호이스팅
// 클래스는 함수로 평가된다.

// class Person {};
// log(typeof Person);

// 클래스 선언문으로 정의한 클래스는 함수 선언문과 같이 소스코드 평가 과정, 즉 런타임 이전에 먼저 평가되어 함수 객체를 생성한다.
// 이때 클래스가 평가되어 생성된 함수 객체는 생성자 함수로서 호출할 수 있는 함수,즉 constructor 다.

// 인스턴스 생성
// 클래스는 생성자 함수이며 new 연산자와 함께 호출되어 인스턴스를 생성한다.

class Person {};
const me = new Person();
log(me);

// 클래스는 인스턴스를 생성하는 것이 유일한 존재 이유이므로 반드시 new 연산자와 함께 호출

// 메서드
// constructor 는 인스턴스를 생성하고 초기화하기 위한 특수한 메서드다. constructor 는 이름을 변경할 수 었다.
