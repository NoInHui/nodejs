<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title><%=pageName%></title>
    <link type="text/css" rel="stylesheet" href="/style/editor.css">
    <script type="text/javascript" src="/script/studyScript.js"></script>
    <script>
        const pdfBtn = document.querySelector('#pdfBtn');
        pdfBtn.style.color = 'red';
        console.log('pdfBtn', pdfBtn);
    </script>
</head>
<body>
    <div style="width: 100%; display: flex; justify-content: center;">
        <div style="padding: 10px 20px; border: 1px solid black; width: 1500PX;">
            <div class="button-area">
                <div style="display: flex; align-items: center;">
                    <h2 class="fileName" style="font-weight: 600;"><%=pageName%></h2>
                </div>
                <div>
                    <button id="pdfBtn" class="editor-button">pdf</button>
                    <button id="updateBtn" class="editor-button">수정</button>
                </div>
            </div>
            <div class="contents-section">
                <div>
                    <textarea id="editor" style="width:1455PX;height:700px;"></textarea>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="category" value="<%=category%>"/>
    <input type="hidden" id="page" value="<%=page%>"/>
</body>
</html>

<script>
// 브라우저의 렌더링 과정

// 구글의 V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임 환경인 Node.js 의 등장으로 자바스크립트는 웹 브라우저를 벗어나 서버 사이드 애플리케이션 개발에서도 사용할 수 있는 범용 개발 언어가 되었다.
// 하지만 자바스크립트가 가장 많이 사용되는 분야는 역시 웹 브라우저 환경에서 동작하는 웹페이지/애플리케이션 클라이언트 사이드다.

// 대부분의 프로그래밍 언어는 운영체제나 가상 머신 위에서 실행되지만 웹 애플리케이션의 클라이언트 사이드 자바스크립트는 브라우저에서 HTML, CSS 와 함께 실행된다.
// 따라서 브라우저 환경을 고려할 때 더 효율적인 클라이언트 사이드 자바스크립트 프로그래밍이 가능하다.

// 이를 위해 브라우저가 HTML,CSS,자바스크립트로 작성된 텍스트 문서를 어떻게 파싱하여 브라우저에 렌더링하는지 살펴보자.

// 파싱
// 파싱은 프로그래밍 언어의 문법에 맞게 작성된 텍스트 문서를 읽어 들여 실행하기 위해 텍스트 문서의 문자열을 토큰으로 분해하고 토큰에 문법적 의미와 구조를 반영하여 트리 구조의 자료구조인 파스 트리를 생성하는 일련의 과정을 말한다.
// 일반적으로 파싱이 완료된 이후에는 파스 트리를 기반으로 중간 언어를 생성하고 실행한다.

// 렌더링
// 렌더링은 HTML,CSS,자바스크립트로 작성된 문서를 파싱하여 브라우저에 시각적으로 출력하는 것을 말한다.

// 브라우저는 다음과 같은 과정을 거쳐 렌더링을 수행한다.

// 1. 브라우저는 HTML,CSS,자바스크립트,이미지,폰트 파일 등의 렌더링에 필요한 리소스를 요청하고 서버로부터 응답을 받는다.
// 2. 브라우저의 렌더링 엔진은 서버로부터 응답된 HTML,CSS 를 하싱하여 DOM 과 CSSOM 을 생성하고 이들을 결합하여 렌더 트리를 생성한다.
// 3. 브라우저의 자바스크립트 엔진은 서버로부터 응답된 자바스크립트를 파싱하여 AST 를 생성하고 바이트코드로 변환하여 실행한다.
// 이때 자바스크립트는 DOM API 를 통해 DOM 이나 CSSOM 을 변경할 수 있다. 변경된 DOM 과 CSSOM 은 다시 렌더 트리로 결합된다.
// 4. 렌더 트리를 기반으로 HTML 요소의 레이아웃을 계산하고 브라우저 화면에 HTML 요소를 페인팅한다.

// 요청과 응답
// 브라우저의 핵심 기능은 필요한 리소스(HTML,CSS,자바스크립트,이미지,폰트 등의 정적 파일 또는 서버가 동적으로 생성한 데이터)를 서버에 요청하고 서버로부터 응답받아 브라우저에 시각적으로 렌더링하는 것이다.
// 즉, 렌더링에 필요한 리소스는 모두 서버에 존재하므로 필요한 리소스를 서버에 요청하고 서버가 응답한 리소스를 파싱하여 렌더링하는 것이다.

// 서버에 요청을 전송하기 위해 브라우저는 주소창을 제공한다.
// 브라우저의 주소창에 url 을 입력하고 엔터 키를 누르면 url 의 호스트 이름이 DNS 를 통해 IP 주소로 변환되고 이 IP 주소를 갖는 서버에게 요청을 전송한다.

// 일반적으로 서버는 루트 요청에 대해 암묵적으로 index.html 을 응답하도록 기본 설정되어 있다.
// 즉 http://test.com 은 http://test.com/index.html 과 같은 요청이다.


// http 1.1 과 http 2.0 

// http 는 웹에서 브라우저와 서버가 통신하기 위한 프로토콜이다.
// http 1.1 은 기본적으로 커넥션당 하나의 요청과 응답만 처리한다.
// 즉 여러개의 요청을 한 번에 전송할수 없고 응답 또한 마찬가지다.
// 따라서 html 문서 내에 포함된 여러 개의 리소스 요청, 즉 css 파일을 로드하는 link 태그, 이미지파일을 로드하는 img 태그, 자바스크립트를 로드하는 script 태그 등에 의한 리소스 요청이 개별적으로 전송되고 응답 또한 개별적으로 전송된다.
// 이처럼 http 1.1 은 리소스의 동시 전송이 불가능한 구조이므로 요청할 리소스의 개수에 비례하여 응답 시간도 증가하는 단점이 있다.

// 이처럼 http 1.1 은 다중 요청/응답이 불가하다는 단점이 있지만 http 2 는 커넥션당 여러 개의 요청과 응답, 즉 다중 요청/응답이 가능하다.
// 따라서 http 2 은 여러 리소스의 동시 전송이 가능하므로 http 1.1 에 비해 페이지 로드가 약 50% 정도 빠르다고 알려져 있다.

// HTML 파싱과 DOM 생성

// 브라우저의 요청에 의해 서버가 응답한 HTML 문서는 문자열로 이루어진 순수한 텍스트다.
// 순수한 텍스트인 HTML 문서를 브라우저에 시각적으로 픽셀로 렌더링하려면 HTML 문서를 브라우저가 이해할 수 있는 자료구조(객체)로 변환하여 메모리에 저장해야 한다.

// 1. 서버에 존재하던 HTML 파일이 브라우저의 요청에 의해 응답된다.
// 이때 서버는 브라우저가 요청한 HTML 파일을 읽어 들여 메모리에 저장한 다음 메모리에 저장된 바이트(2진수)를 인터넷을 경유하여 응답한다.

// 2. 브라우저는 서버가 응답한 HTML 문서를 바이트 형태로 응답받는다.
// 그리고 응답된 바이트 형태의 HTML 문서는 meta 태그의 charset 어트리뷰트에 의해 지정된 인코딩 방식을 기준으로 문자열로 변환된다.
// 참고로 meta 태그의 charset 어트리뷰트에 선언된 인코딩 방식은 content-type: text/html; charset=utf8 과 같이 응답 헤더에 담겨 응답된다.
// 브라우저는 이를 확인하고 문자열로 변환한다.

// 3. 문자열로 변환된 HTML 문서를 읽어 들여 문법적 의미를 갖는 코드의 최소 단위인 토큰들로 분해한다.

// 4. 각 토큰들을 객체로 변환하여 노드들을 생성한다.
// 토큰의 내용에 따라 문서 노드, 요소 노드, 어트리뷰트 노드, 텍스트 노드가 생성된다.
// 노드는 이후 DOM 을 구성하는 기본 요소가 된다.

// 5. HTML 문서는 HTML 요소들의 집합으로 이루어지며 HTML 요소는 중첩  관계를 갖는다.
// 즉, HTML 요소의 콘텐츠 영역에는 텍스트뿐만 아니라 다른 HTML 요소도 포함될 수 있다.
// 이때 HTML 요소 간에는 중첩 관계에 의해 부자 관계가 형성된다.
// 이러한 HTML 요소 간의 부자 관계를 반영하여 모든 노드들을 트리 자료구조로 구성한다.
// 이 노드들로 구성된 트리 자료구조를 DOM 이라 부른다.

// 즉, DOM 은 HTML 문서를 파싱한 결과물이다.


// CSS 파싱과 CSOM 생성

// 렌더링 엔진은 HTML 을 처음부터 할 줄씩 순차적으로 파싱하여 DOM 을 생성해 나간다.
// 이처럼 렌더링 엔진은 DOM 을 생성해 나가다가 CSS 를 로드하는 link 태그나 style 태그를 만나면 DOM 생성을 일시 중단한다.

// 그리고 link 태그의 href 어트리뷰트에 지정된 CSS 파일을 서버에 요청하여 로드한 css 파일이나 style 태그 내의 css 를 html 과 동일한 파싱과정(바이트 -> 믄지 -> 노드 -> cssom) 을 거치며 해석하여 cssom 을 생성한다.
// 이후 css 파싱을 완료하면 html 파싱이 중단된 지점부터 다시 html 을 파싱하기 시작하여 dom 생성을 재개한다.


// 렌더 트리 생성
// 렌더링 엔진은 서버로부터 응답된 html 과 css 를 파싱하여 각각 dom 과 cssom 를 생성한다.
// 그리고 dom 과 cssom 은 렌더링을 위해 렌더 트리로 결합된다.

// 렌더 트리는 렌더링을 위한 트리 구조의 자료구조다.
// 따라서 브라우저 화면에 렌더링되지 않는 노드와 css 에 의해 비표시되는 노드들은 포함하지 않는다.
// 다시 말해 렌더 트리는 브라우저 홤녀에 렌더링 되는 노드만으로 구성된다.

// 이후 완성된 렌더 트리는 각 html 요소의 레이아웃을 계산하는 데 사용되며 브라우저 화면에 픽셀을 렌더링하는 페인팅 처리에 입력된다.

// 지금까지 살펴본 브라우저의 렌더링 과정은 반복해서 실행될 수 있다.


// 자바스크립트 파싱과 실행
// html 문서를 파싱한 결과물로서 생성된 dom 은 html 문서의 구조와 정보뿐만 아니라 html 요소의 ㄷ스타일 등을 변경할 수 있는 프로그래밍 인터페이스로서 dom api 를 제공한다.
// 즉, 자바스크립트 코드에서 dom api 를 사용하면 이미 생성된 dom 을 동적으로 조작할 수 있다.

// css 파싱과 마찬가지로 렌더링 엔진은 html 을 한 줄씩 순차적으로 파싱하며 dom 을 생성해 나가다가 자바스크립트 파일을 로드하는 script 태그나 자바스크립트 코드를 콘텐츠로 담은 script 태그를 만나면 dom 생성을 일시 중단한다.

// 그리고 script 태그의 src 어트리뷰트에 정의된 자바스크립트 파일을 서버에 요청하여 로드한 자바스크립트 파일이나 script 태그 내의 자바스크립트 코드를 파싱하기 위해 자바스크립트 엔진에 제어권을 넘긴다.
// 이후 자바스크립트 파싱과 실행이 종료되면 렌더링 엔진으로 다시 제어권을 넘겨 html 파싱이 중단된 지점부터 다시 html 파싱을 시작하여 dom 생성을 재개한다.

// 자바스크립트 파싱과 실행은 브라우저의 렌더링 엔진이 아니라 자바스크립트 엔진이 처리한다.
// 자바스크립트 엔진은 자바스크립트 코드를 파싱하여 cpu가 이해할 수 있는 저수준 언어로 변환하고 실행하는 역학을 한다.
// 자바스크립트 엔진은 구글 크롬과 node.js 의 v8, 파이어폭스의 spidermonkey, 사파리의 javascriptcore 등 다양한 종류가 있으며, 모든 자바스크립트 엔진은 ECMAScript 사양을 준수한다.

// 렌더링 엔진으로부터 제어권을 넘겨받은 자바스크립트 엔진은 자바스크립트 코드를 파싱하기 시작한다.
// 렌더링 엔진이 html 과 css 를 파싱하여 dom 과 cssom 을 생성하듯이 자바스크립트 엔진은 자바스크립트를 해석하여 ast(추상적 구문 트리)를 생성한다.
// 그리고 ast 를 기반으로 인터프리터가 실행할 수 있는 중간 코드인 바이트 코드를 생성하여 실행한다.

// 리플로우와 리페인트
// 만약 자바스크립트 코드에 dom 이나 cssom 을 변경하는 dom api 가 사용된 경우 dom 이나 cssom 이 변경된다.
// 이때 변경된 dom 과 cssom 은 다시 렌더 트리로 결합되고 변경된 렌더 트리를 기반으로 에이아웃과 페인트 괒엉르 거쳐 브라우저의 화면에 다시 렌더링한다.
// 이를 리플로우, 리페인트라 한다.

// 리플로우는 레이아웃 계산을 다시 하는 것을 말하며, 노드 추가,삭제 요소의 크기,위치 변경, 윈도우 리사이즈 등 레이아웃에 영향을 주는 변경이 발생한 경우에 한하여 실행된다.
// 리페인트는 재결합된 렌더 트리를 기반으로 다시 페인트를 하는 것을 말한다.

// 따라서 리플로우와 리페인트가 반드시 순차적으로 동시에 실행되는 것은 아니다.
// 레이아웃에 영향이 없는 변경은 리플로우 없이 리페인트만 실행된다.


// 자바스크립트 파싱에 의한 HTMl 파싱 중단

// 지금까지 살펴본 바와 같이 렌더링 엔진과 자바스크립트 엔진은 병렬적으로 파싱을 실행하지 않고 직렬적으로 파싱을 수행한다.
// 이처럼 브라우저는 동기적으로 위에서 아래 방향으로 순차적으로 html,css,자바스크립트를 파싱하고 실행한다.
// 이것은 script 태그의 위치에 따라 html 파싱이 블로킹되어 dom 생성이 지연될 수 있다는 것을 의미한다.
// 따라서 script 태그의 위치는 중요한 의미를 갖는다.

// body 요소의 가장 아래에 자바스크립트를 위치시키는 것은 좋은 아이디어다.

// dom 이 완성되지 않은 상태에서 자바스크립트가 dom 을 조작하면 에러가 발생할 수 있다.
// 자바스크립트 로딩/파싱/실행으로 인해 html 요소들의 렌더링에 지장받는 일이 발생하지 않아 페이지 로딩 시간이 단축된다.

// 자바스크립트가 실행될 시점에는 이미 렌더링 엔진이 html 요소를 모두 파싱하여 dom 생성을 완료한 이후다.
// 따라서 dom이 완성되지 않은 상태에서 자바스크립트가 dom 을 조작하는 에러가 발생할 우려도 없다.
// 또한 자바스크립트가 실행되기 이전에 dom 생성이 완료되어 렌더링되므로 페이지 로딩 시간이 단축되는 이점도 있다.


// script 태그의 async / defer 어트리뷰트

// 앞에서 살펴본 자바스크립트 파싱에 의한 dom 생성이 중단되는 문제를 근본적으로 해결하기 위해 html5부터 script 태그에 async defer 어트리뷰트가 추가되었다.
// async , defer 어트리뷰트는 다음과 같이 src 어트리뷰트를 통해 외부 자바스크립트 파일을 로드하는 경우에만 사용할 수 있다.
// 즉 src 어트리뷰트가 없는 인라인 자바스크립트에는 사용할 수 없다.

// async defer 어트리뷰트를 사용하면 html 파싱과 외부 자바스크립트 파일의 로드가 비동기적으로 동시에 진행된다.
// 하지만 자바스크립트 실행 시점에 차이가 있다.

// async 어트리뷰트
// html 파싱과 외부 자바스크립트 파일의 로드가 비동기적으로 동시에 진행된다.
// 단 자바스크립트 파싱과 실행은 자바스크립트 파일의 로드가 완료된 직후 진행되며, 이때 html 파싱이 중단된다.

// 여러개의 script 태그에 async 어트리뷰트를 지정하면 script 태그의 순서와는 상관없이 로드가 완료된 자바스크립트부터 먼저 실행되므로 순서가 보장되지 않는다.
// 따라서 순서 보장이 필요한 script 태그에는 async 어트리뷰트를 지정하지 않아야한다.
// ie10 이상에서 지원된다.

// defer 어트리뷰트
// async 어트리뷰트와 마찬가지로 html 파싱과 외부 자바스크립트 파일의 로드가 비동기적으로 동시에 진행된다.
// 단 자바스크립트의 파싱과 실행은 html 파싱이 완료된 직후, 즉 dom 생성이 완료된 직후(DOMContentLoaded 이벤트가 발생한다.) 진행된다.
// 따라서 dom 생성이 완료된 이후 실행되어야 할 자바스크립트에 유용하다.
// defer 어트리뷰트는 ie10 이상에서 지원된다.










</script>