// Ctrl + Alt + N : 실행

const log = console.log;

// 함수를 호출하면 함수 코드가 평가되어 함수 실행 컨텍스트가 생성된다.
// 이때 생성된 함수 실행 컨텍스트는 실행 컨텍스트 스택에 푸시되고 함수 코드가 실행된다.
// 함수 코드의 실행이 종료되면 함수 실행 컨텍스트는 실행 컨텍스트 스택에서 팝되어 제거된다.

// 자바스크립트 엔진은 단 하나의 실행 컨텍스트 스택을 갖는다.
// 이는 함수를 실행할 수 있는 창구가 단 하나이며, 동시에 2개 이상의 함수를 동시에 실행할 수 없다는 것을 의미한다.
// 실행 컨텍스트 스택의 최상위 요소인 실행 중인 실행 컨텍스트를 제외한 모든 실행 컨텍스트는 모두 실행 대기중인 태스크 들이다.
// 대기중인 태스크들은 현재 실행 중인 실행 컨텍스트가 팝되어 실행 컨텍스트 스택에서 제거되면 다시 말해 현재 실행중인 함수가 종료하면 비로소 실행되기 시작한다.

// 이처럼 자바스크립트 엔진은 한 번에 하나의 태스크만 실행할 수 있는 싱글 스레드 방식으로 동작한다.
// 싱글 스레드 방식은 한 번에 하나의 태스크만 실행할 수 있기 때문에 처리에 시간이 걸리는 태스크를 실행하는 경우 블로킹이 발생한다.
// 예를 들어 setTimeout 함수와 유사하게 일정 시간이 경과한 이후에 콜백함수를 호출하는 sleep 함수를 구현해보자.

// function sleep(f,d) {
//     const delay = Date.now() + d;

//     while(Date.now() < delay);

//     f();
// }

// function f1() {
//     log('f1');
// }

// function f2() {
//     log('f2');
// }

// sleep(f1, 3000);
// sleep(f2, 2000);
// f1();

// 이처럼 현재 실행 중인 태스크가 종료할 떄까지 다음에 실행될 태스크가 대기하는 방식을 동기처리라고 한다.
// 동기 처리 방식은 태스크를 순서대로 하나씩 처리하므로 실행 순서가 보장된다는 장점이 있지만, 앞선 태스크가 종료할 때까지 이후 태스크들이 블로킹되는 단점이 있다.

// setTimeout 을 사용해서 수정해보자

function sleep(f,d) {
    setTimeout(() => f(), d);
}

function f1() {
    log('f1');
}

function f2() {
    log('f2');
}

sleep(f1, 3000);
sleep(f2, 1000);


// setTimeout 함수난 앞서 살펴본 sleep 함수와 유사하게 일정 시간이 경과한 이후에 콜백 함수를 호출하지만
// setTimeout 함수 이후의 태스크를 블로킹하지 않고 곧바로 실행한다.
// 이처럼 현재 실행 중인 태스크가 종료되지 않은 상태라 해도 다음 태스크를 곧바로 실행하는 방식을 비동기 처리라고 한다.


// setTimeout, setInterval HTTP 요청, 이벤트 핸들러는 비동기 처리 방식으로 동작한다.

// 이벤트 루프와 태스크 큐
// 자바스크립트 특징 중 하나는 싱글 스레드로 동작한다는 것이다.
// 싱글 스레드 방식은 한 번에 하나의 태스크만 처리할 수 있다는 것을 의미한다.
// 하지만 브라우저가 동작하는 것을 살펴보면 많은 태스크가 동시에 처리되는 것처럼 느껴진다.

// 자바스크립트의 동시성을 지원하는 것이 바로 이벤트 루프다.

// 이벤트 루프는 브라우저에 내장되어 있는 기능 중 하나다.


// 콜 스택과 힙으로 구성되어 있는 자바스크립트 엔진은 단순히 태스크가 요청되면 콜 스택을 통해 요청된 작업을 순차적으로 실행할 뿐이다.
// 비동기 처리에서 소스코드의 평가와 실행을 제외한 모든 처리는 자바스크립트 엔진을 구동하는 환경인 브라우저 또는 Node.js 가 담당한다.
// 예를 들어 비동기 방식으로 동작하는 setTimeout 의 콜백 함수의 평가와 실행은 자바스크립트 엔진이 담당하지만
// 호출 스케줄링을 위한 타이머 설정과 콜백 함수의 등록은 브라우저 또는 Node.js 가 담당한다.
// 이를 위해 브라우저 환경은 태스크 큐와 이벤트 루프를 제공한다.

// 태스크 큐
// setTimeout 이나 setInterval 과 같은 비동기 함수의 콜백 함수 또는 이벤트 핸들러가 일시적으로 보관되는 영역이다.
// 태스크 큐와는 별도로 프로미스의 후속 처리 메서드의 콜백함수가 일시적으로 보관되는 마이크로태스크 큐도 존재한다.

// 이벤트 루프
// 이벤트 루프는 콜 스택에 현재 실행 중인 컨텍스트가 있는지 그리고 태스크 큐에 대기 중인 함수가 있는지 반복해서 확인한다.
// 만약 콜 스택이 비어있고 태스크 큐에 대기 중인 함수가 있다면 이벤트 루프는 순차적으로 태스크 큐에 대기중인 함수를 콜 스택으로 이동시킨다.
// 이때 콜 스택으로 이동한 함수는 실행된다.
// 즉 태스크 큐에 일시 보관된 함수들은 비동기 처리 방식으로 동작한다.



// function init() {
//     func1();
//     func2();
// }

// function func1() {
//     setTimeout(() => console.log('func1'));
// }

// function func2() {
//     console.log('func2');
// }

// init();


// function init() {
//     func1().then(() => func2());
// }

// function func1() {
//     return new Promise(resolve => {
//         setTimeout(() => {
//             console.log('func1')
//             resolve();
//         });
//     })
// }

// function func2() {
//     console.log('func2');
// }

// init();

// async function init() {
//     await func1();
//     func2();
// }

// function func1() {
//     return new Promise(resolve => {
//         setTimeout(() => {
//             console.log('func1');
//             resolve();
//         });
//     });
    
// }

// function func2() {
//     console.log('func2');
// }

// init();


// 1. 전역 코드가 평가되어 전역 실행 컨텍스트가 생성되고 콜 스택에 푸시된다.
// 2. 전역 코드가 실행되기 시작하여 setTimeout 함수가 호출된다.
// 이때 setTimeout 함수의 함수 실행 컨텍스트가 생성되고 콜 스택에 푸시되어 현재 실행 중인 실행 컨텍스트가 된다.
// 브라우저의 Web API 인 타이머 함수도 함수이므로 함수 실행 컨텍스트를 생성한다.
// 3. setTimeout 함수가 실행되면 콜백 함수를 호출 스케줄링하고 종료되어 콜 스택에서 팝된다.
// 이때 호출 스케줄링, 즉 타이머 설정과 타이머가 만료되면 콜백 함수를 태스크 큐에 푸시하는 것은 브라우저 역할이다.
// 4.브라우저가 수행하는 4-1 과 자바스크립트 엔진이 수행하는 4-2 는 병행처리 된다.

// 4-1. 브라우저는 타이머를 설정하고 타이머의 만료를 기다린다. 이후 타이머가 만료되면 콜백 함수의 foo 가 태스크 큐에 푸시된다.
// 위 예제의 경우 지연시간이 0이지만 지연 시간이 4ms 이하인 경우 최소 지연시간 4ms 가 지정된다.
// 따라서 4ms 후에 콜백 함수 foo 가 태스크 큐에 푸시되어 대기하게 된다.
// 이 처리 또한 자바스크립트 엔진이 아니라 브라우저가 수행한다.
// 이처럼 setTimeout 함수로 호출 스케줄링한 콜백 함수는 정확히 지연 시간 후에 호출된다는 보장은 없다.
// 지연 시간 이후에 콜백 함수가 태스크 큐에 푸시되어 대기하게 되지만 콜 스택이 비어야 호출되므로 약간의 시간차가 발생할 수 있기 때문이다.

// 4-2. bar 함수가 호출되어 bar 함수의 실행 컨텍스트가 생성되고 콜 스택에 푸시되어 현재 실행중인 실행 컨텍스트가 된다.
// 이후 bar 함수가 종료되어 콜 스택에서 팝된다. 이때 브라우저가 타이머를 설정한 후 4ms 가 경과했다면 foo 함수는 아직 태스크 큐에서 대기 중이다.

// 5. 전역 코드 실행이 종료되고 전역 실행 컨텍스트가 콜 스택에서 팝된다.
// 이로서 콜 스택에는 아무런 실행 컨텍스트도 존재하지 않게된다.

// 이벤트 루프에 의해 콜 스택이 비어 있음이 감지되고 태스크 큐에서 대기 중인 콜백 함수 foo 가 이벤트 루프에 의해 콜 스택에 푸시된다.


// 이처럼 비동기 함수인 setTimeout 의 콜백 함수는 태스크 큐에 푸시되어 대기하다가 콜 스택이 비게 되면 다시 말해 전역 코드 및 명시적으로 호출된 함수가 모두 종료하면 비로서 콜 스택에 푸시되어 실행된다.

// 브라우저는 자바스크립트 엔진 외에도 렌더링 엔진과 Web API 를 제공한다.
// 