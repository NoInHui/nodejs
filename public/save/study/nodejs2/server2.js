const http = require('http');
const fs = require('fs').promises;

http.createServer(async (req,res) => {
    try {
        const data = await fs.readFile('./server2.html');
        res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});
        res.end(data);
    } catch(err) {
        console.log(err);
        res.writeHead(500, {'Content-Type': 'text/html; charset=utf-8'});
        res.end(err.message);
    }
})
.listen(8081, () => {
    console.log('8081 open');
})

// HTTP 상태 코드

// 200 이나 500 과 같은 숫자는 HTTP 상태코드 입니다.
// res.writeHead 에 첫 번째 인수로 상태 코드를 넣었는데, 브라우저는 서버에서 보내주는 상태 코드를 보고 요청이 성공했는지 실패했는지를 판단합니다.

// 2XX : 성공을 알리는 상태 코드입니다. 대표적으로 200(성공), 201(작성됨)이 많이 사용됩니다.

// 3XX : 리다이렉션(다른 페이지로 이동)을 알리는 상태 코드입니다. 
// 어떤 주소를 입력했는데 다른 주소의 페이지로 넘어갈 때 이 코드가 사용됩니다.
// 대표적으로 301(영구이동), 302(임시이동)가 있습니다.
// 304(수정되지 않음)은 요청의 응답으로 캐시를 사용했다는 뜻입니다.

// 4XX : 요청 오류를 나타냅니다.
// 요청 자체에 오류가 있을 때 표시됩니다.
// 대표적으로 400(잘못된 요청), 401(권한 없음), 403(금지됨), 404(찾을수없음)

// 5XX : 서버 오류를 나타냅니다.
// 요청은 제대로 왔지만 서버에 오류가 생겼을 때 발생합니다.
// 이 오류가 뜨지 않게 주의해서 프로그래밍해야 합니다.
// 이 오류를 res.writeHead 로 클라이언트에 직접 보내는 경우는 거의 없고, 예기치 못한 에러가 발생하면 서버가 알아서 5XX 대 코드를 보냅니다.
// 500(내부 서버 오류), 502(불량 게이트웨이), 503(서비스를 사용할 수 없음)

// 무조건 응답을 보내야합니다.
// 요청 처리 과정 중에 에러가 발생했다고 해서 응답을 보내지 않으면 안 됩니다.
// 요청이 성공했든 실패했든 응답을 클라이언트로 보내서 요청이 마무리되었음을 알려야 합니다.
// 응답을 보내지 않는다면, 클라이언트는 서버로부터 응답이 오길 하염없이 기다리다가 일정 시간 지난 후 timeout 처리합니다.

