// 버퍼와 스트림 이해하기

// 파일을 읽거나 쓰는 방식에는 크게 두 가지 방식, 즉 버퍼를 이용하거나 스트림을 이용하는 방식이 있습니다.
// 영상을 로딩하고 있을 때는 버퍼링한다고 하고, 영상을 실시간으로 송출할 때는 스트리밍이라고 합니다.

// 버퍼링은 영상을 재생할 수 있을 때까지 데이터를 모으는 동작이고
// 스트리밍은 방송인의 컴퓨터에서 시청자의 컴퓨터로 영상 데이터를 조금씩 전송하는 동작입니다.

// 스트리밍하는 과정에서 버퍼링을 할 수도 있습니다.
// 전송이 너무 느리면 화면을 내보내기까지 최소한의 데이터를 모아야 하고, 영상 데이터가 재생 속도보다 빨리 전송되면 미리 전송받은 데이터를 저장할 공간이 필요하기 때문입니다.

// 노드의 버퍼와 스트림도 비슷한 개념입니다.
// 앞에서 readFile 메서드를 사용할 때 읽었던 파일이 버퍼 형식으로 출력되었습니다.
// 노드는 파일을 읽을 때 메모리에 파일 크기만큼 공간을 마련해두며 파일 데이터를 메모리에 저장한 뒤 사용자가 조작할 수 있도록 합니다.
// 이때 메모리에 저장된 데이터가 바로 버퍼입니다.

// 여기서 버퍼를 직접 다룰 수 있는 클래스가 있습니다.
// 바로 Buffer 입니다.

const buffer = Buffer.from('저를 버퍼로 바꿔주세요.');
console.log(buffer);
console.log(buffer.length);
console.log(buffer.toString());

const array = [Buffer.from('띄엄 '), Buffer.from('띄엄 '), Buffer.from('띄어쓰기')];
const buffer2 = Buffer.concat(array);
console.log(buffer2.toString());

const buffer3 = Buffer.alloc(5);
console.log(buffer3);

// readFile 방식의 버퍼가 편리하기는 하지만 문제점도 있습니다.
// 만약 용량이 100MB 인 파일이 있으면, 읽을 때 메모리에 100MB 의 버퍼를 만들어야 합니다.
// 이 작업을 동시에 열 개만 해도 1GB 에 달하는 메모리가 사용됩니다.
// 특히 서버처럼 몆 명이 이용할지 모르는 환경에서는 메모리 문제가 발생할 수 있습니다.

// 또한 모든 내용을 버퍼에 다 쓴 후에야 다음 동작으로 넘어가므로 파일 읽기,압축,쓰기 등의 조작을 연달아 할 떄 매번 전체 용량을 버퍼로 처리해야 다음 단계로 넘어갈 수 있습니다.

// 그래서 버퍼의 크기를 작게 만들고 여러 번에 걸쳐 나눠 보내는 방식이 등장했습니다.
// 예를 들면 버퍼 1MB를 만든 후 100MB 파일을 100 번에 걸쳐 나눠 보내는 것입니다.
// 이로써 메모리 1MB 로 100MB 파일을 전송할 수 있습니다.
// 이를 편리하게 만든 것이 스트림입니다.
